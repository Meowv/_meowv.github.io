<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>当然我在瞎扯</title>
  <subtitle>生命不息，奋斗不止</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xj8c.cc/"/>
  <updated>2017-09-27T06:25:38.165Z</updated>
  <id>http://xj8c.cc/</id>
  
  <author>
    <name>阿星Plus</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>今日头条全站新闻文章数据爬取</title>
    <link href="http://xj8c.cc/2017/09/27/ToutiaoNews/"/>
    <id>http://xj8c.cc/2017/09/27/ToutiaoNews/</id>
    <published>2017-09-27T06:23:48.000Z</published>
    <updated>2017-09-27T06:25:38.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="今日头条全站新闻文章数据爬取"><a href="#今日头条全站新闻文章数据爬取" class="headerlink" title="今日头条全站新闻文章数据爬取"></a>今日头条全站新闻文章数据爬取</h1><p>url:<a href="https://www.toutiao.com/api/pc/feed/" target="_blank" rel="external">https://www.toutiao.com/api/pc/feed/</a></p>
<p>拼接参数：</p>
<ul>
<li><code>category</code>：见下<a href="#category">category</a>表格</li>
<li><code>utm_source</code>：</li>
<li><code>widen</code>：</li>
<li><code>max_behot_time</code>：</li>
<li><code>max_behot_time_tmp</code>：</li>
<li><code>tadrequire</code>：</li>
<li><code>as</code>：</li>
<li><code>cp</code>：<a id="more"></a>
<h2 id="category">category 列表</h2>

</li>
</ul>
<table>
<thead>
<tr>
<th>标签</th>
<th style="text-align:center">category值</th>
</tr>
</thead>
<tbody>
<tr>
<td>推荐</td>
<td style="text-align:center">__all__</td>
</tr>
<tr>
<td>热点</td>
<td style="text-align:center">news_hot</td>
</tr>
<tr>
<td>科技</td>
<td style="text-align:center">news_tech</td>
</tr>
<tr>
<td>社会</td>
<td style="text-align:center">news_society</td>
</tr>
<tr>
<td>娱乐</td>
<td style="text-align:center">news_entertainment</td>
</tr>
<tr>
<td>游戏</td>
<td style="text-align:center">news_game</td>
</tr>
<tr>
<td>体育</td>
<td style="text-align:center">news_sports</td>
</tr>
<tr>
<td>汽车</td>
<td style="text-align:center">news_car</td>
</tr>
<tr>
<td>财经</td>
<td style="text-align:center">news_finance</td>
</tr>
<tr>
<td>搞笑</td>
<td style="text-align:center">funny</td>
</tr>
<tr>
<td>段子</td>
<td style="text-align:center">essay_joke</td>
</tr>
<tr>
<td>军事</td>
<td style="text-align:center">news_military</td>
</tr>
<tr>
<td>国际</td>
<td style="text-align:center">news_world</td>
</tr>
<tr>
<td>时尚</td>
<td style="text-align:center">news_fashion</td>
</tr>
<tr>
<td>旅游</td>
<td style="text-align:center">news_travel</td>
</tr>
<tr>
<td>探索</td>
<td style="text-align:center">news_discovery</td>
</tr>
<tr>
<td>育儿</td>
<td style="text-align:center">news_baby</td>
</tr>
<tr>
<td>养生</td>
<td style="text-align:center">news_regimen</td>
</tr>
<tr>
<td>美文</td>
<td style="text-align:center">news_essay</td>
</tr>
<tr>
<td>历史</td>
<td style="text-align:center">news_history</td>
</tr>
<tr>
<td>美食</td>
<td style="text-align:center">news_food</td>
</tr>
<tr>
<td>…</td>
<td style="text-align:center">…</td>
</tr>
</tbody>
</table>
<p>json接口示例:<a href="https://www.toutiao.com/api/pc/feed/?category=news_hot" target="_blank" rel="external">https://www.toutiao.com/api/pc/feed/?category=news_hot</a></p>
<h1 id="源代码下载"><a href="#源代码下载" class="headerlink" title="源代码下载"></a>源代码下载</h1><p><a href="https://github.com/Meowv/ToutiaoNews" target="_blank" rel="external">ToutiaoNews</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;今日头条全站新闻文章数据爬取&quot;&gt;&lt;a href=&quot;#今日头条全站新闻文章数据爬取&quot; class=&quot;headerlink&quot; title=&quot;今日头条全站新闻文章数据爬取&quot;&gt;&lt;/a&gt;今日头条全站新闻文章数据爬取&lt;/h1&gt;&lt;p&gt;url:&lt;a href=&quot;https://www.toutiao.com/api/pc/feed/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.toutiao.com/api/pc/feed/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;拼接参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;category&lt;/code&gt;：见下&lt;a href=&quot;#category&quot;&gt;category&lt;/a&gt;表格&lt;/li&gt;
&lt;li&gt;&lt;code&gt;utm_source&lt;/code&gt;：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;widen&lt;/code&gt;：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max_behot_time&lt;/code&gt;：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max_behot_time_tmp&lt;/code&gt;：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tadrequire&lt;/code&gt;：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;as&lt;/code&gt;：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cp&lt;/code&gt;：
    
    </summary>
    
    
      <category term="HtmlAgilityPack" scheme="http://xj8c.cc/tags/HtmlAgilityPack/"/>
    
      <category term="爬虫" scheme="http://xj8c.cc/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="今日头条" scheme="http://xj8c.cc/tags/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1/"/>
    
      <category term="Newtonsoft.Json" scheme="http://xj8c.cc/tags/Newtonsoft-Json/"/>
    
  </entry>
  
  <entry>
    <title>HtmlAgilityPack爬取美女图片、每日一文文章、小说</title>
    <link href="http://xj8c.cc/2017/09/07/HtmlAgilityPack/"/>
    <id>http://xj8c.cc/2017/09/07/HtmlAgilityPack/</id>
    <published>2017-09-07T01:23:53.000Z</published>
    <updated>2017-09-07T09:51:27.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HtmlAgilityPack？"><a href="#HtmlAgilityPack？" class="headerlink" title="HtmlAgilityPack？"></a>HtmlAgilityPack？</h1><p>HtmlAgilityPack 是 .NET 下的一个 HTML 解析类库。支持用 XPath 来解析 HTML 。命名空间： HtmlAgilityPack</p>
<h1 id="爬取美女图片核心代码"><a href="#爬取美女图片核心代码" class="headerlink" title="爬取美女图片核心代码"></a>爬取美女图片核心代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">static void Main(string[] args)</div><div class="line">&#123;</div><div class="line">    HtmlWeb web = new HtmlWeb();</div><div class="line">    string path = @&quot;F:\pic\&quot;;</div><div class="line">    </div><div class="line">    for (int i = 88; i &gt;= 1; i--)</div><div class="line">    &#123;</div><div class="line">        var url = &quot;http://jandan.net/ooxx/page-&quot; + i;</div><div class="line"></div><div class="line">        HtmlDocument doc = web.Load(url);</div><div class="line"></div><div class="line">        List&lt;HtmlNode&gt; nodeList = doc.DocumentNode.SelectNodes(&quot;//*[@class=\&quot;commentlist\&quot;]/li&quot;).AsParallel().ToList();</div><div class="line"></div><div class="line">        foreach (var item in nodeList)</div><div class="line">        &#123;</div><div class="line">            HtmlNode imghtml = item.SelectSingleNode(&quot;.//img&quot;);</div><div class="line">            var imgsrc = &quot;http:&quot; + imghtml.Attributes[&quot;src&quot;].Value;</div><div class="line">            var imgname = Guid.NewGuid().ToString() + imgsrc.Substring(imgsrc.Length - 4, 4);</div><div class="line"></div><div class="line">            Console.WriteLine(imgsrc);</div><div class="line"></div><div class="line">            DownPic(imgsrc, path + imgname);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="爬取每日一文核心代码"><a href="#爬取每日一文核心代码" class="headerlink" title="爬取每日一文核心代码"></a>爬取每日一文核心代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var url = &quot;https://meiriyiwen.com/random/&quot;;</div><div class="line"></div><div class="line">HtmlWeb web = new HtmlWeb();</div><div class="line">HtmlDocument doc = web.Load(url);</div><div class="line">HtmlNode node = doc.DocumentNode.SelectSingleNode(&quot;//*[@id=\&quot;article_show\&quot;]&quot;);</div><div class="line">node.Descendants()</div><div class="line">    .Where(n =&gt; n.Name == &quot;script&quot; || n.Name == &quot;style&quot; || n.Name == &quot;#comment&quot; || n.Id == &quot;bdshare&quot;)</div><div class="line">    .ToList().ForEach(n =&gt; n.Remove());</div><div class="line">    </div><div class="line">var title = node.SelectSingleNode(&quot;//h1&quot;).InnerText;</div><div class="line">var author = node.SelectSingleNode(&quot;//*[@class=\&quot;article_author\&quot;]&quot;).InnerText;</div><div class="line">var article = node.SelectSingleNode(&quot;//*[@class=\&quot;article_text\&quot;]&quot;).InnerText.TrimStart();</div></pre></td></tr></table></figure>
<h1 id="爬取小说核心代码"><a href="#爬取小说核心代码" class="headerlink" title="爬取小说核心代码"></a>爬取小说核心代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">static void Main(string[] args)</div><div class="line">&#123;</div><div class="line">    var domain = &quot;http://www.jueshitangmen.info&quot;;</div><div class="line"></div><div class="line">    HtmlWeb web = new HtmlWeb();</div><div class="line"></div><div class="line">    HtmlDocument doc = web.Load(domain + &quot;/zhetian/&quot;);</div><div class="line">    List&lt;HtmlNode&gt; nodeList = doc.DocumentNode.SelectNodes(&quot;//*[@class=\&quot;panel\&quot;]/ul/li&quot;).AsParallel().ToList();</div><div class="line"></div><div class="line">    foreach (var item in nodeList)</div><div class="line">    &#123;</div><div class="line">        HtmlNode html = item.SelectSingleNode(&quot;.//span/a&quot;);</div><div class="line">        var title = html.InnerText;</div><div class="line"></div><div class="line">        var url = html.Attributes[&quot;href&quot;].Value;</div><div class="line">        HtmlDocument document = web.Load(url);</div><div class="line"></div><div class="line">        HtmlNode node = document.DocumentNode.SelectSingleNode(&quot;//*[@class=\&quot;content\&quot;]&quot;);</div><div class="line">        node.Descendants()</div><div class="line">            .Where(n =&gt; n.Name == &quot;script&quot; || n.Name == &quot;style&quot; || n.Name == &quot;#comment&quot;)</div><div class="line">            .ToList().ForEach(n =&gt; n.Remove());</div><div class="line"></div><div class="line">        var content = node.InnerText.Trim();</div><div class="line"></div><div class="line">        Console.WriteLine(title + &quot;\r\n&quot;);</div><div class="line">        Console.WriteLine(content);</div><div class="line"></div><div class="line">        StreamWriter stream = new StreamWriter(@&quot;F:\Article\遮天\&quot; + title + &quot;.txt&quot;);</div><div class="line"></div><div class="line">        stream.WriteLine(title + &quot;\r\n&quot;);</div><div class="line">        stream.WriteLine(content);</div><div class="line"></div><div class="line">        stream.Close();</div><div class="line">        stream.Dispose();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="源代码下载"><a href="#源代码下载" class="headerlink" title="源代码下载"></a>源代码下载</h1><p><a href="https://github.com/Meowv/HtmlAgilityPack" target="_blank" rel="external">HtmlAgilityPackDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HtmlAgilityPack？&quot;&gt;&lt;a href=&quot;#HtmlAgilityPack？&quot; class=&quot;headerlink&quot; title=&quot;HtmlAgilityPack？&quot;&gt;&lt;/a&gt;HtmlAgilityPack？&lt;/h1&gt;&lt;p&gt;HtmlAgilityPack 是 .NET 下的一个 HTML 解析类库。支持用 XPath 来解析 HTML 。命名空间： HtmlAgilityPack&lt;/p&gt;
&lt;h1 id=&quot;爬取美女图片核心代码&quot;&gt;&lt;a href=&quot;#爬取美女图片核心代码&quot; class=&quot;headerlink&quot; title=&quot;爬取美女图片核心代码&quot;&gt;&lt;/a&gt;爬取美女图片核心代码&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;static void Main(string[] args)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    HtmlWeb web = new HtmlWeb();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    string path = @&amp;quot;F:\pic\&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    for (int i = 88; i &amp;gt;= 1; i--)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        var url = &amp;quot;http://jandan.net/ooxx/page-&amp;quot; + i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        HtmlDocument doc = web.Load(url);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        List&amp;lt;HtmlNode&amp;gt; nodeList = doc.DocumentNode.SelectNodes(&amp;quot;//*[@class=\&amp;quot;commentlist\&amp;quot;]/li&amp;quot;).AsParallel().ToList();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        foreach (var item in nodeList)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            HtmlNode imghtml = item.SelectSingleNode(&amp;quot;.//img&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            var imgsrc = &amp;quot;http:&amp;quot; + imghtml.Attributes[&amp;quot;src&amp;quot;].Value;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            var imgname = Guid.NewGuid().ToString() + imgsrc.Substring(imgsrc.Length - 4, 4);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Console.WriteLine(imgsrc);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            DownPic(imgsrc, path + imgname);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="HtmlAgilityPack" scheme="http://xj8c.cc/tags/HtmlAgilityPack/"/>
    
      <category term="爬虫" scheme="http://xj8c.cc/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative开发中一些有用的资源</title>
    <link href="http://xj8c.cc/2017/07/18/ReactNative-resource/"/>
    <id>http://xj8c.cc/2017/07/18/ReactNative-resource/</id>
    <published>2017-07-18T08:47:42.000Z</published>
    <updated>2017-07-21T03:29:24.226Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一些有用的资源"><a href="#一些有用的资源" class="headerlink" title="一些有用的资源"></a>一些有用的资源</h1><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p>英文（官方）：</p>
<p><a href="https://facebook.github.io/react-native" target="_blank" rel="external">https://facebook.github.io/react-native</a></p>
<p>中文：</p>
<p><a href="http://reactnative.cn" target="_blank" rel="external">http://reactnative.cn</a><br><a id="more"></a></p>
<h2 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h2><p>GitHub：</p>
<p><a href="https://github.com/facebook/react-native" target="_blank" rel="external">https://github.com/facebook/react-native</a></p>
<p>stackoverflow:</p>
<p><a href="http://stackoverflow.com/questions/tagged/react-native" target="_blank" rel="external">http://stackoverflow.com/questions/tagged/react-native</a></p>
<p>椰子壳:</p>
<p><a href="https://www.yeziker.com" target="_blank" rel="external">https://www.yeziker.com</a></p>
<h2 id="示例App"><a href="#示例App" class="headerlink" title="示例App"></a>示例App</h2><p>Examples：</p>
<p><a href="https://github.com/facebook/react-native/tree/master/Examples/UIExplorer" target="_blank" rel="external">https://github.com/facebook/react-native/tree/master/Examples/UIExplorer</a></p>
<p>F8App：</p>
<p><a href="https://github.com/fbsamples/f8app" target="_blank" rel="external">https://github.com/fbsamples/f8app</a></p>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>react-native-elements：</p>
<p><a href="https://github.com/react-native-training/react-native-elements" target="_blank" rel="external">https://github.com/react-native-training/react-native-elements</a></p>
<p>react-native-vector-icons：</p>
<p><a href="https://github.com/oblador/react-native-vector-icons" target="_blank" rel="external">https://github.com/oblador/react-native-vector-icons</a></p>
<p>NativeBase：</p>
<p><a href="https://github.com/GeekyAnts/NativeBase" target="_blank" rel="external">https://github.com/GeekyAnts/NativeBase</a></p>
<p>react-native-video：</p>
<p><a href="https://github.com/react-native-community/react-native-video" target="_blank" rel="external">https://github.com/react-native-community/react-native-video</a></p>
<p>Realm：</p>
<p><a href="https://github.com/realm/realm-js" target="_blank" rel="external">https://github.com/realm/realm-js</a></p>
<p>react-native-maps：</p>
<p><a href="https://github.com/airbnb/react-native-maps" target="_blank" rel="external">https://github.com/airbnb/react-native-maps</a></p>
<p>react-native-app-intro：</p>
<p><a href="https://github.com/FuYaoDe/react-native-app-intro" target="_blank" rel="external">https://github.com/FuYaoDe/react-native-app-intro</a></p>
<p>react-native-chart：</p>
<p><a href="https://github.com/tomauty/react-native-chart" target="_blank" rel="external">https://github.com/tomauty/react-native-chart</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一些有用的资源&quot;&gt;&lt;a href=&quot;#一些有用的资源&quot; class=&quot;headerlink&quot; title=&quot;一些有用的资源&quot;&gt;&lt;/a&gt;一些有用的资源&lt;/h1&gt;&lt;h2 id=&quot;文档&quot;&gt;&lt;a href=&quot;#文档&quot; class=&quot;headerlink&quot; title=&quot;文档&quot;&gt;&lt;/a&gt;文档&lt;/h2&gt;&lt;p&gt;英文（官方）：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react-native&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://facebook.github.io/react-native&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;中文：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://reactnative.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://reactnative.cn&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="ReactNative" scheme="http://xj8c.cc/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative样式总览</title>
    <link href="http://xj8c.cc/2017/07/17/ReactNative-styles/"/>
    <id>http://xj8c.cc/2017/07/17/ReactNative-styles/</id>
    <published>2017-07-17T08:46:47.000Z</published>
    <updated>2017-07-21T03:32:22.998Z</updated>
    
    <content type="html"><![CDATA[<h2 id="边框："><a href="#边框：" class="headerlink" title="边框："></a>边框：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">颜色</div><div class="line">borderColor: color</div><div class="line">borderBottomColor: color</div><div class="line">borderLeftColor: color</div><div class="line">borderTopColor: color</div><div class="line">borderRightColor: color</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">圆角</div><div class="line">borderRadius: number</div><div class="line">borderBottomLeftRadius: number</div><div class="line">borderBottomRightRadius: number</div><div class="line">borderTopLeftRadius: number</div><div class="line">borderTopRightRadius: number</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">宽度</div><div class="line">borderWidth: number</div><div class="line">borderBottomWidth: number</div><div class="line">borderLeftWidth: number</div><div class="line">borderRightWidth: number</div><div class="line">borderTopWidth: number</div><div class="line">样式</div><div class="line">borderStyle: enum(&apos;solid&apos;, &apos;dotted&apos;, &apos;dashed&apos;)</div></pre></td></tr></table></figure>
<h2 id="边距："><a href="#边距：" class="headerlink" title="边距："></a>边距：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">内边距</div><div class="line">padding: number</div><div class="line">paddingBottom: number</div><div class="line">paddingLeft: number</div><div class="line">paddingRight: number</div><div class="line">paddingTop: number</div><div class="line">paddingHorizontal: number (左右内边距)</div><div class="line">paddingVertical: number (上下内边距)</div><div class="line"></div><div class="line">外边距</div><div class="line">margin: number</div><div class="line">marginBottom: number</div><div class="line">marginLeft: number</div><div class="line">marginRight: number</div><div class="line">marginTop: number</div><div class="line"></div><div class="line">marginHorizontal: number (左右内边距)</div><div class="line">marginVertical: number (上下外边距)</div></pre></td></tr></table></figure>
<h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">color: color</div><div class="line">fontFamily: string</div><div class="line">fontSize: number</div><div class="line">fontStyle: enum(&apos;normal&apos;, &apos;italic&apos;)</div><div class="line">fontWeight: enum(&apos;normal&apos;, &apos;bold&apos;, &apos;100&apos;, &apos;200&apos;, &apos;300&apos;, &apos;400&apos;, &apos;500&apos;, &apos;600&apos;, &apos;700&apos;, &apos;800&apos;, &apos;900&apos;)</div><div class="line">textDecorationColor: color (文本修饰颜色)</div><div class="line">textDecorationLine: enum(&apos;none&apos;, &apos;underline&apos;, &apos;line-through&apos;, &apos;underline line-through&apos;) </div><div class="line">textDecorationStyle: enum(&apos;solid&apos;, &apos;double&apos;, &apos;dashed&apos;, &apos;dotted&apos;)</div><div class="line">letterSpacing: number</div><div class="line">lineHeight:number</div><div class="line">textAlign: enum(&apos;auto&apos;, &apos;left&apos;, &apos;right&apos;, &apos;center&apos;, &apos;justify&apos;)</div></pre></td></tr></table></figure>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">backgroundColor: color</div><div class="line"></div><div class="line">flex: number</div><div class="line">flexDirection: enum(&apos;row&apos;, &apos;row-reverse&apos;, &apos;column&apos;, &apos;column-reverse&apos;)</div><div class="line">flexWrap: enum(&apos;wrap&apos;, &apos;nowrap&apos;) </div><div class="line">justifyContent: enum(&apos;flex-start&apos;, &apos;flex-end&apos;, &apos;center&apos;, &apos;space-between&apos;, &apos;space-around&apos;) </div><div class="line">alignItems: enum(&apos;flex-start&apos;, &apos;flex-end&apos;, &apos;center&apos;, &apos;stretch&apos;) </div><div class="line">alignSelf: enum(&apos;auto&apos;, &apos;flex-start&apos;, &apos;flex-end&apos;, &apos;center&apos;, &apos;stretch&apos;) </div><div class="line"></div><div class="line">position: enum(&apos;absolute&apos;, &apos;relative&apos;)</div><div class="line">right: number</div><div class="line">left: number</div><div class="line">top: number</div><div class="line">bottom: number</div><div class="line">width: number</div><div class="line">height: number</div></pre></td></tr></table></figure>
<h2 id="图形变换"><a href="#图形变换" class="headerlink" title="图形变换"></a>图形变换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scaleX:水平方向缩放</div><div class="line">scaleY:垂直方向缩放</div><div class="line">rotation:旋转</div><div class="line">translateX:水平方向平移</div><div class="line">translateY:水平方向平移</div></pre></td></tr></table></figure>
<h2 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h2><h4 id="说个悲惨的故事，阴影只能在ios用"><a href="#说个悲惨的故事，阴影只能在ios用" class="headerlink" title="说个悲惨的故事，阴影只能在ios用"></a>说个悲惨的故事，阴影只能在ios用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">shadowColor: color</div><div class="line">shadowOffset: &#123;width: number, height: number&#125; </div><div class="line">shadowOpacity: number</div><div class="line">shadowRadius: number</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;边框：&quot;&gt;&lt;a href=&quot;#边框：&quot; class=&quot;headerlink&quot; title=&quot;边框：&quot;&gt;&lt;/a&gt;边框：&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;颜色&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;borderColor: color&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;borderBottomColor: color&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;borderLeftColor: color&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;borderTopColor: color&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;borderRightColor: color&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="ReactNative" scheme="http://xj8c.cc/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>打包你的App</title>
    <link href="http://xj8c.cc/2017/07/16/ReactNative-build/"/>
    <id>http://xj8c.cc/2017/07/16/ReactNative-build/</id>
    <published>2017-07-16T08:45:13.000Z</published>
    <updated>2017-07-21T03:29:02.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="打包应用"><a href="#打包应用" class="headerlink" title="打包应用"></a>打包应用</h1><p>假设你的应用做完了，总不能还在后台开着packager就把应用发布出去吧。很明显，我们需要让应用可以离线，下边所要讲的就是<br>一个让应用脱离packager的过程<br><a id="more"></a></p>
<h2 id="生成签名"><a href="#生成签名" class="headerlink" title="生成签名"></a>生成签名</h2><p>没签名直接打包应用是不行的，我们需要实现生成一个签名。在Linux下，我们执行这条命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -genkey -v -keystore RN-key.keystore -alias RN-key-alias -keyalg RSA -keysize 2048 -validity 10000</div></pre></td></tr></table></figure>
<p>然后会让你设置最少6位的密码，密码一定要记好，作者君的建议是两个密码最好不要设置成一样的~</p>
<p>至于Windows，我们得进到JDK目录下执行此命令，或者使用一些傻瓜式的签名生成软件。</p>
<h2 id="修改gradle变量"><a href="#修改gradle变量" class="headerlink" title="修改gradle变量"></a>修改gradle变量</h2><p>将生成的RN-key.keystore放到android/app文件夹中，然后修改在android目录下的gradle.properties，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MYAPP_RELEASE_STORE_FILE=RN-key.keystore</div><div class="line">MYAPP_RELEASE_KEY_ALIAS=RN-key-alias </div><div class="line">MYAPP_RELEASE_STORE_PASSWORD=your password</div><div class="line">MYAPP_RELEASE_KEY_PASSWORD=your password</div></pre></td></tr></table></figure>
<h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><p>修改android/app目录下的build.gradle，在<code>defaultConfig</code>代码块下增加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">signingConfigs &#123;</div><div class="line">        release &#123;</div><div class="line">            storeFile file(&quot;RN-key.keystore&quot;)</div><div class="line">            storePassword your password</div><div class="line">            keyAlias RN-key-alias </div><div class="line">            keyPassword your password</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在buildTypes中的release下添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">signingConfig signingConfigs.release</div></pre></td></tr></table></figure>
<p>整体就像这样：</p>
<p><img src="https://meowv.github.io/images/10.1.png" alt="PNG"></p>
<h2 id="打包应用-1"><a href="#打包应用-1" class="headerlink" title="打包应用"></a>打包应用</h2><p>进入项目所在目录，执行以下命令（packger应该处于开启状态）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd android &amp;&amp; ./gradlew assembleRelease</div></pre></td></tr></table></figure>
<p>Windows用户不用写<code>./</code>，漫长的等待过后，我们便可以在<br>android/app/build/outputs/apk下找到我们的应用了，并且这个可以发布到各大应用市场。</p>
<h2 id="混淆及安全"><a href="#混淆及安全" class="headerlink" title="混淆及安全"></a>混淆及安全</h2><p>为了安全（也为了缩小apk大小），我们需要启用代码混淆。进入android/app目录，然后修改build.gradle文件，<br>将<code>def enableProguardInReleaseBuilds = false</code>改为<code>def enableProguardInReleaseBuilds = true</code></p>
<p>如果不准备同时支持ARM和X86，那么将<code>enableSeparateBuildPerCPUArchitecture</code>改为true可以给安装包减少4mb大小~</p>
<h2 id="修改icon"><a href="#修改icon" class="headerlink" title="修改icon"></a>修改icon</h2><p>进入android/app/src/main/res目录，我们可以看到有这么几个子目录：</p>
<p><img src="https://meowv.github.io/images/10.2.png" alt="PNG"></p>
<p>然后把这四个目录下的图片换成别的就可以啦，尺寸要对上哟~</p>
<h2 id="修改应用名称"><a href="#修改应用名称" class="headerlink" title="修改应用名称"></a>修改应用名称</h2><p>假设我们想将应用的名字换成<code>茯苓</code>要怎么办呢？很简单，还是在res目录，我们进入values目录，修改strings.xml即可:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;resources&gt;</div><div class="line">    &lt;string name=&quot;app_name&quot;&gt;茯苓&lt;/string&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;打包应用&quot;&gt;&lt;a href=&quot;#打包应用&quot; class=&quot;headerlink&quot; title=&quot;打包应用&quot;&gt;&lt;/a&gt;打包应用&lt;/h1&gt;&lt;p&gt;假设你的应用做完了，总不能还在后台开着packager就把应用发布出去吧。很明显，我们需要让应用可以离线，下边所要讲的就是&lt;br&gt;一个让应用脱离packager的过程&lt;br&gt;
    
    </summary>
    
    
      <category term="ReactNative" scheme="http://xj8c.cc/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>掌握React Native的Fetch Api</title>
    <link href="http://xj8c.cc/2017/07/15/ReactNative-net/"/>
    <id>http://xj8c.cc/2017/07/15/ReactNative-net/</id>
    <published>2017-07-15T08:43:47.000Z</published>
    <updated>2017-07-21T03:29:11.611Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><p>这一章呢，不会只讲网络哦~</p>
<h2 id="Mock-Api"><a href="#Mock-Api" class="headerlink" title="Mock Api"></a>Mock Api</h2><p>Mock Api是一项非常棒的服务，它可以帮助我们快速的模拟后端的REST Api并且不需要你自己的服务器，甚至代码都不用写，它的网址是<br><a href="http://www.mockapi.io/，" target="_blank" rel="external">http://www.mockapi.io/，</a> 可以注册也可以使用GitHub帐号登陆。<br><a id="more"></a><br>点击<code>+</code>来创建一个项目：</p>
<p><img src="https://meowv.github.io/images/9.1.png" alt="PNG"></p>
<p>填写项目名称和Api前缀(随便写就行)：</p>
<p><img src="https://meowv.github.io/images/9.2.png" alt="PNG"></p>
<p>接下来点击Create Resource来创建资源：</p>
<p><img src="https://meowv.github.io/images/9.3.png" alt="PNG"></p>
<p>然后填写资源名称，以及修改Schema，为了方便，我们就留下id和name：</p>
<p><img src="https://meowv.github.io/images/9.4.png" alt="PNG"></p>
<p>然后点击next按钮，这一步完了之后，我们就可以通过<code>xxxxxxx.mockapi.io/api/user</code>使用REST Api了。</p>
<h2 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h2><p>在React Native中，我们可以使用Fetch来进行网络请求，由于Fetch API天然支持Promise规范，所以我们的代码可以变得很优雅。</p>
<p>执行Get操作应该是最为简单的了，我们看下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fetch(&apos;http://xxx.mockapi.io/api/user&apos;)</div><div class="line">  .then((response) =&gt; &#123;</div><div class="line">    console.log(response);</div><div class="line">  &#125;)</div><div class="line">  .catch((err) =&gt; console.error(err);)</div></pre></td></tr></table></figure>
<p>这样便可以在控制台打印出user下的所有内容。你可能会想：喵喵喵？React Native还有控制台？ 当然有啦，不过我们得打开远程调试，首先打开菜单：</p>
<p><img src="https://meowv.github.io/images/9.5.png" alt="PNG"></p>
<p>然后选择Debug Js Remotely，之后便会自动打开Chrome。自己打开Chrome的控制台便可以看到<code>console.log</code>的内容了。</p>
<p>实际应用中，我们会在组件渲染的时候把数据丢到状态或别的地方，然后使用这些数据(一般会用作列表渲染)。不管怎么说，不会直接console就是了。</p>
<p>然后是Post：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">fetch(&apos;http://xxxx.mockapi.io/api/user&apos;, &#123;</div><div class="line">  method: &apos;POST&apos;,</div><div class="line">  headers: &#123;</div><div class="line">    &apos;Accept&apos;: &apos;application/json&apos;,</div><div class="line">    &apos;Content-Type&apos;: &apos;application/json&apos;,</div><div class="line">  &#125;,</div><div class="line">  body: JSON.stringify(&#123;</div><div class="line">    name: &apos;meow&apos;,</div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line">  .then(xxxx)</div><div class="line">  .catch((err) =&gt; console.error(err))</div></pre></td></tr></table></figure>
<p>我们可以加个then来处理在Post过程中要做的事情，并用catch来获取异常。</p>
<p>至于Put和Delete参考Post就好啦~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;网络&quot;&gt;&lt;a href=&quot;#网络&quot; class=&quot;headerlink&quot; title=&quot;网络&quot;&gt;&lt;/a&gt;网络&lt;/h1&gt;&lt;p&gt;这一章呢，不会只讲网络哦~&lt;/p&gt;
&lt;h2 id=&quot;Mock-Api&quot;&gt;&lt;a href=&quot;#Mock-Api&quot; class=&quot;headerlink&quot; title=&quot;Mock Api&quot;&gt;&lt;/a&gt;Mock Api&lt;/h2&gt;&lt;p&gt;Mock Api是一项非常棒的服务，它可以帮助我们快速的模拟后端的REST Api并且不需要你自己的服务器，甚至代码都不用写，它的网址是&lt;br&gt;&lt;a href=&quot;http://www.mockapi.io/，&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.mockapi.io/，&lt;/a&gt; 可以注册也可以使用GitHub帐号登陆。&lt;br&gt;
    
    </summary>
    
    
      <category term="ReactNative" scheme="http://xj8c.cc/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>是时候用上React Navigation了</title>
    <link href="http://xj8c.cc/2017/07/14/ReactNative-navigation/"/>
    <id>http://xj8c.cc/2017/07/14/ReactNative-navigation/</id>
    <published>2017-07-14T08:42:18.000Z</published>
    <updated>2017-07-21T03:29:06.068Z</updated>
    
    <content type="html"><![CDATA[<h1 id="导航器"><a href="#导航器" class="headerlink" title="导航器"></a>导航器</h1><p>一个应用（普通的那种），总是有好多个界面，只有一个界面的应用怎么能留得住用户呢？（虽然有很多界面的也不一定留得住）<br>所以说，做应用一般不会只做一个页面。我们知道，网页之间可以自由跳转，通过一个<code>&lt;a&gt;&lt;/a&gt;</code>就可以搞定了，但是<br>开发应用不是写网页，React Native中也没有<code>&lt;a&gt;</code>，那当我们需要做界面跳转的时候该怎么办呢？答案是使用<code>Navigator</code>组件。<br>哈哈，逗你的，在0.42版本前使用<code>Navigator</code>来实现导航效果没问题，不过呢，自从0.43版本之后React Native将停止维护这个组件了，<br>因为出现了更好用的<code>React Navigation</code>（半官方）。<br><a id="more"></a><br>首先我们来安装它：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save react-navigation</div></pre></td></tr></table></figure>
<p>然后重新启动你的应用</p>
<p>作者君在安装这个库的时候，它的版本是beta7,有一个小bug需要处理一下，删掉<code>node_modules/react-navigation/src/views/Header.js</code>的第12行，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import ReactComponentWithPureRenderMixin from &apos;react/lib/ReactComponentWithPureRenderMixin&apos;;</div><div class="line">`</div></pre></td></tr></table></figure>
<p>不然直接红屏报错。</p>
<p>安装完毕后，我们来一个简单的例子，首先我们需要引入它：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import &#123; StackNavigator &#125; from &apos;react-navigation&apos;;</div></pre></td></tr></table></figure>
<p>然后写两个组件，一个叫<code>HelloScreen</code>，一个叫<code>UserScreen</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">class HelloScreen extends Component &#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    title: &apos;Hello&apos;,</div><div class="line">  &#125;;</div><div class="line">  render() &#123;</div><div class="line">    const &#123; navigate &#125; = this.props.navigation;</div><div class="line">    return (</div><div class="line">      &lt;View&gt;</div><div class="line">        &lt;Text&gt;&#123;&apos;\n&apos;&#125;&lt;/Text&gt;</div><div class="line">        &lt;Text&gt;按下边的按钮&lt;/Text&gt;</div><div class="line">        &lt;Button</div><div class="line">          onPress=&#123;() =&gt; navigate(&apos;User&apos;)&#125;</div><div class="line">          title=&quot;Go&quot;</div><div class="line">        /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;&#125;</div><div class="line"></div><div class="line">  class UserScreen extends Component &#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    title: &apos;这里是~&apos;,</div><div class="line">  &#125;;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;View&gt;</div><div class="line">        &lt;Text&gt;&#123;&apos;\n&apos;&#125;&lt;/Text&gt;</div><div class="line">        &lt;Text&gt;嘿，猜猜这里是谁？&lt;/Text&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>其实在按钮里面写方法并不优雅，翻过了issues之后觉得都不是很好，所以这里就期待一下官方的变化吧</p>
</blockquote>
<p>这两个组件和正常的组件差不多，不过是多了些东西罢了。其中，<code>navigationOptions</code>数组里可以放些配置信息，一般用来配置Header部分。<br>HelloScreen里的<code>const { navigate } = this.props.navigation</code>是为了可以在组件中使用<code>navigate</code>方法。<code>navigate(...)</code>理解成<br>跳转到那个界面就好。不过，光有这两个组件可看不出来什么，我们还需要一个<code>StackNavigator</code>来使导航可以正常运作。（可以把这个当成一个特殊的组件，更好理解）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const MyApp = StackNavigator(&#123;</div><div class="line">  Home: &#123; screen: HelloScreen &#125;,</div><div class="line">  User: &#123; screen: UserScreen &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这里的<code>Home</code>和<code>User</code>是路由别名，在使用<code>navigate</code>时需要用到。然后改一下注册的组件，就像下边那样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AppRegistry.registerComponent(&apos;AppName&apos;, () =&gt; MyApp);</div></pre></td></tr></table></figure>
<p>好啦，我们刷新一下应用：</p>
<p><img src="https://meowv.github.io/images/8.1.png" alt="PNG"></p>
<p>然后点一下Go按钮：</p>
<p><img src="https://meowv.github.io/images/8.2.png" alt="PNG"></p>
<p>就像这样，几行代码轻轻松松便实现了导航效果，甚至连头部都帮你做好了~</p>
<h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>很多时候，我们需要像要跳转的界面传递些参数，比如，某条数据的id，用户的名字。我们只需要把上边的例子小小的修改一下就可以传递参数了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//修改navigate方法</div><div class="line">navigate(&apos;User&apos;, &#123; id: &apos;233333333&apos;, name: &apos;nico&apos; &#125;);</div></pre></td></tr></table></figure>
<p>然后接受参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">render() &#123;</div><div class="line">    const &#123; params &#125; = this.props.navigation.state;</div><div class="line">    return (</div><div class="line">      &lt;View&gt;</div><div class="line">        &lt;Text&gt;&#123;&apos;\n&apos;&#125;&lt;/Text&gt;</div><div class="line">        &lt;Text&gt;嘿，这里是&#123;params.name&#125;，id是：&#123;params.id&#125;&lt;&lt;/Text&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这样就实现参数的传递啦，快刷新一下看看效果吧~</p>
<h2 id="定制头部"><a href="#定制头部" class="headerlink" title="定制头部"></a>定制头部</h2><p>前边说过，<code>navigationOptions</code>里面会放些配置信息，我们可以用这个来定制头部，比如说在右边加一个按钮：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">static navigationOptions = &#123;</div><div class="line">  title: &apos;hahaha&apos;,</div><div class="line">  headerRight: &lt;Button title=&quot;你好&quot; /&gt;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>理论上来说，它会在右边显示一个按钮，但是并不行，一脸茫然的作者君去翻了下GitHub，发现别人也遇到了这些问题，然后默默的更新了<br>一下<code>react-navigation</code>，从beta7升到了beta9：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm update react-navigation</div></pre></td></tr></table></figure>
<p>然后刷新一下应用就可以发现按钮乖乖的显示在那里了：</p>
<p><img src="https://meowv.github.io/images/8.3.png" alt="PNG"></p>
<p>除了按钮，你还可以丢个<text>之类的过去，都是可以的。</text></p>
<h2 id="Tab-Navigator"><a href="#Tab-Navigator" class="headerlink" title="Tab Navigator"></a>Tab Navigator</h2><p>如果需要Tab导航，我们使用其内置的<code>TabNavigator</code>即可，用法和<code>StackNavigator</code>差不多，只要在最后使用<code>TabNavigator</code>即可<br>就像这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">const XXX = TabNavigator(&#123;</div><div class="line">  ......</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>如果想要混用<code>StackNavigator</code>和<code>TabNavigator</code>则稍稍麻烦一点，首先，我们写两个新的组件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class HiScreen extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return &lt;Text&gt;Hi&lt;/Text&gt;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class WorldScreen extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return &lt;Text&gt;World&lt;/Text&gt;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后使用<code>TabNavigator</code>：</p>
<p>const TabScreen = TabNavigator({<br>  Hi: { screen: HiScreen },<br>  World: { screen: WorldScreen },<br>});</p>
<p>这里的<code>Hi</code>，<code>world</code>会被作为选项卡（Tab）的名字，然后修改MyApp:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const MyApp = StackNavigator(&#123;</div><div class="line">  Home: &#123; screen: TabScreen &#125;,</div><div class="line">  User: &#123; screen: UserScreen &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>刷新一下应用，会发现公用的头部是空白的：</p>
<p><img src="https://meowv.github.io/images/8.4.png" alt="PNG"></p>
<p>没关系，我们来添加一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">TabScreen.navigationOptions = &#123;</div><div class="line">  title: &apos;这里是Tab&apos;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>和别的导航组件，你也可以丢个按钮进去：</p>
<p><img src="https://meowv.github.io/images/8.5.png" alt="PNG"></p>
<p>最后，我们来写一个可以跳转到UserScreen的按钮(别忘记navigate)：</p>
<pre><code>//HiScreen
const { navigate } = this.props.navigation;
    return (
      &lt;View&gt;
        &lt;Text&gt;Hi&lt;/Text&gt;
        &lt;Button
          onPress={() =&gt; navigate(&apos;User&apos;, { id: &apos;233333333&apos;, name: &apos;nico&apos; })}
          title=&quot;Go&quot;
        /&gt;
      &lt;/View&gt;
    )
</code></pre><p>然后刷新一下看看是否成功吧~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;导航器&quot;&gt;&lt;a href=&quot;#导航器&quot; class=&quot;headerlink&quot; title=&quot;导航器&quot;&gt;&lt;/a&gt;导航器&lt;/h1&gt;&lt;p&gt;一个应用（普通的那种），总是有好多个界面，只有一个界面的应用怎么能留得住用户呢？（虽然有很多界面的也不一定留得住）&lt;br&gt;所以说，做应用一般不会只做一个页面。我们知道，网页之间可以自由跳转，通过一个&lt;code&gt;&amp;lt;a&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt;就可以搞定了，但是&lt;br&gt;开发应用不是写网页，React Native中也没有&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;，那当我们需要做界面跳转的时候该怎么办呢？答案是使用&lt;code&gt;Navigator&lt;/code&gt;组件。&lt;br&gt;哈哈，逗你的，在0.42版本前使用&lt;code&gt;Navigator&lt;/code&gt;来实现导航效果没问题，不过呢，自从0.43版本之后React Native将停止维护这个组件了，&lt;br&gt;因为出现了更好用的&lt;code&gt;React Navigation&lt;/code&gt;（半官方）。&lt;br&gt;
    
    </summary>
    
    
      <category term="ReactNative" scheme="http://xj8c.cc/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>带你了解ListView及FlatList</title>
    <link href="http://xj8c.cc/2017/07/13/ReactNative-ListView-FlatList/"/>
    <id>http://xj8c.cc/2017/07/13/ReactNative-ListView-FlatList/</id>
    <published>2017-07-13T08:31:08.000Z</published>
    <updated>2017-07-21T03:28:53.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ListView与FlatList"><a href="#ListView与FlatList" class="headerlink" title="ListView与FlatList"></a>ListView与FlatList</h1><p>当你需要给用户在一个页面展示一堆数据的时候，一个一个去渲染对性能来说真的不好，所以我们使用React Native内置的列表<br>来渲染数据。在0.43版本之前，我们一直使用ListView来渲染数据，不过它的性能经常被人吐嘈，社区里也不断提出解决方案。<br>就连Realm都内置了一个性能更好些的ListView。不过自从官方发布了0.43版之后，这种局面应该会离我们远去了，因为官方给出了<br>更好的方案FlatList。不过，ListView虽然老旧了一些，但依然还有学习的必要，所以我们从ListView开始学起<br><a id="more"></a></p>
<h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><p>对于ListView来说，我们需要一个数据源，这样ListView才有渲染视图的原料。这些数据可以放到一个数组里面(从Realm取出的数据可以直接用ListView渲染)，<br>首先定义取值策略，我们一般采用这种方式(上下数据不相等时更新数据)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const ds = new ListView.DataSource(&#123; rowHasChanged: (r1, r2) =&gt; r1 !== r2 &#125;);</div></pre></td></tr></table></figure>
<p>然后我们来创建一个数组来储存数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">const data = [</div><div class="line">    &#123;</div><div class="line">        id: 1,</div><div class="line">        name: &apos;meow&apos;</div><div class="line">        &#125;,</div><div class="line">    &#123;</div><div class="line">        id: 2,</div><div class="line">        name: &apos;meow2&apos;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        id: 3,</div><div class="line">        name: &apos;meow3&apos;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        id: 4,</div><div class="line">        name: &apos;meow4&apos;</div><div class="line">    &#125;        </div><div class="line">]</div></pre></td></tr></table></figure>
<p>准备好后，我们开始使用ListView，别忘记引用它：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">import &#123;</div><div class="line">  ....,  </div><div class="line">  ListView</div><div class="line">&#125; from &apos;react-native&apos;;</div></pre></td></tr></table></figure>
<p>然后随便找个视图丢个ListView进去，然后用刚才初始化好的<code>ds</code>来接受数据并使用renderRow渲染数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;ListView</div><div class="line">    dataSource=&#123;ds.cloneWithRows(data)&#125;</div><div class="line">    renderRow=&#123;(rowData) =&gt; &lt;Text&gt;id:&#123;rowData.id&#125;，name：&#123;rowData.name&#125;&lt;/Text&gt;&#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<p>没加任何样式，不过数据愉快的渲染出来了：</p>
<p><img src="https://meowv.github.io/images/7.1.png" alt="PNG"></p>
<p>我们可以用列表渲染文字，图片，在列表里嵌套组件等等，还可以像寻常组件一样为其添加各种样式。因为写样式就像寻常组件一样，所以这里<br>就不再说了。</p>
<p>除了传递<code>rowData</code>，还可以传递<code>sectionID, rowID</code>来获取section id和 row id，如果对这两个参数感兴趣就自己动手做下试验。</p>
<p>再提一个和性能有关的属性<code>initialListSize</code>，这个属性可以指定首屏渲染多少数据，避免造成性能损耗。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;ListView</div><div class="line">...</div><div class="line">initialListSize=&#123;123&#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h2 id="FlatList"><a href="#FlatList" class="headerlink" title="FlatList"></a>FlatList</h2><p>FlatList是一个高性能的列表，为什么要使用它我们在开篇介绍已经讲过，下面我们来看一个简单的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;FlatList</div><div class="line">    data=&#123;data&#125;</div><div class="line">    renderItem=&#123; (&#123; item &#125;) =&gt; &lt;Text&gt;&#123;item.id&#125;&lt;/Text&gt; &#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<p>这里的data是在ListView例子中用过的data，不过呢，这段代码并不能运行，因为FlatList需要每行都有一个不同的key，所以我们<br>需要炮制一下data。至于这个提示，先看前半句：</p>
<p><img src="https://meowv.github.io/images/7.3.png" alt="PNG"></p>
<p>之前在创建data的时候我们用了const，为了后边能够修改data，我们将const改成let。<br>然后写一小段代码为data添加key：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (let i = 0; i &lt; data.length; i++) &#123;</div><div class="line">  data[i].key = i</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://meowv.github.io/images/7.2.png" alt="PNG"></p>
<p>然后data就可以丢到FlatList中使用了(使用新组件别忘记引入)。另外，在现在的版本中data只能是一个普通数组，不可以是别的复杂数据结构(为了简单)。</p>
<p>接下来，我们来看FlatList支持的属性。</p>
<p>FlatList默认竖式布局，但是只要设置<code>horizontal</code>属性为true，列表就会变成横的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">horizontal=&#123;true&#125;</div></pre></td></tr></table></figure>
<p>刚才为data添加key的那一步其实并没有必要，因为有<code>keyExtractor</code>属性，我们可以通过这一属性来指定key，拿刚才的data来举例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keyExtractor=&#123; (item, index) =&gt; item.id &#125;</div></pre></td></tr></table></figure>
<p>然后是三个比较像的组件<code>ListHeaderComponent</code>，<code>ItemSeparatorComponent</code>，<code>ListFooterComponent</code>，<br>在这三个属性中，我们向其中分别会放头部组件，分隔组件，尾部组件。<br>举一个简单的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ListHeaderComponent=&#123;()=&gt;&#123;return &lt;Text&gt;我是头部&lt;/Text&gt;&#125;&#125;</div><div class="line">ItemSeparatorComponent=&#123;()=&gt;&#123;return &lt;Text&gt;我是分隔组件&lt;/Text&gt;&#125;&#125;</div><div class="line">ListFooterComponent=&#123;()=&gt;&#123;return &lt;Text&gt;我是尾部&lt;/Text&gt;&#125;&#125;</div></pre></td></tr></table></figure>
<p><img src="https://meowv.github.io/images/7.4.png" alt="PNG"></p>
<p>实际使用的时候记得把组件单独拿出来，这里这么写只是为了方便。<br>FlatList为了优化内存占用并保证流畅滑动会在屏幕外异步绘制列表内容（看不到的地方用空白代替items），所以如果用户滑动过快就会看到空白内容，<br>对于这个问题，我们可以使用<code>getItemLayout</code>属性来有优化，不过你得知道内容的行高才能用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//xxx是行高</div><div class="line">getItemLayout=&#123;(data, index) =&gt; (</div><div class="line">    &#123; length: xxx, offset: xxx * index, index &#125;</div><div class="line">)&#125;</div></pre></td></tr></table></figure>
<p>介绍的最后一个组件在当前版本（0.43）有点小问题<code>onEndReached</code>有时候会不触发，所以只好期待下一个版本喽</p>
<p><code>onEndReached</code>是当列表滑到尾部会调用的一个属性（距离尾部不足这个<code>onEndReachedThreshold</code>的大小），我们可以用它来更新列表数据什么的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">onEndReached=&#123;()=&gt;&#123;</div><div class="line">//更新数据</div><div class="line">&#125;&#125;</div></pre></td></tr></table></figure>
<p>与<code>onEndReachedThreshold</code>是个好基友，我们在里边放些数字，如果滑动列表就好触发<code>onEndReached</code>的话，我们需要设置<code>onEndReachedThreshold</code>的值<br>为0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onEndReachedThreshold=&#123;0&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ListView与FlatList&quot;&gt;&lt;a href=&quot;#ListView与FlatList&quot; class=&quot;headerlink&quot; title=&quot;ListView与FlatList&quot;&gt;&lt;/a&gt;ListView与FlatList&lt;/h1&gt;&lt;p&gt;当你需要给用户在一个页面展示一堆数据的时候，一个一个去渲染对性能来说真的不好，所以我们使用React Native内置的列表&lt;br&gt;来渲染数据。在0.43版本之前，我们一直使用ListView来渲染数据，不过它的性能经常被人吐嘈，社区里也不断提出解决方案。&lt;br&gt;就连Realm都内置了一个性能更好些的ListView。不过自从官方发布了0.43版之后，这种局面应该会离我们远去了，因为官方给出了&lt;br&gt;更好的方案FlatList。不过，ListView虽然老旧了一些，但依然还有学习的必要，所以我们从ListView开始学起&lt;br&gt;
    
    </summary>
    
    
      <category term="ReactNative" scheme="http://xj8c.cc/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>存储：与AsyncStorage相比，Realm更应该作为重点掌握内容</title>
    <link href="http://xj8c.cc/2017/07/12/ReactNative-storage/"/>
    <id>http://xj8c.cc/2017/07/12/ReactNative-storage/</id>
    <published>2017-07-12T08:28:22.000Z</published>
    <updated>2017-07-21T03:30:58.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="储存"><a href="#储存" class="headerlink" title="储存"></a>储存</h1><p>本章提要<br>  1.AsyncStorage<br>  2.Realm<br>一个应用总是要存些东西的，我们要怎么做才能把数据存起来呢？我们这里有两个选择，一个是使用官方提供的AsyncStorage另一个是使用小型数据库。</p>
<p>当数据量不大，结构很简单的时候，我们来使用AsyncStorage这个key-value储存系统，当数据量较大的时候，我们就需要使用小型数据库了，这里我们<br>会学习一个叫做Realm的数据库。<br><a id="more"></a><br>首先，我们来看看AsyncStorage吧~</p>
<h2 id="AsyncStorage"><a href="#AsyncStorage" class="headerlink" title="AsyncStorage"></a>AsyncStorage</h2><p>与数据打交道，免不了对数据进行增加，删除，更改和查找。我们来看看如何用AsyncStorage实现这些。</p>
<p>增加数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">`` </div><div class="line">save(key, value) &#123;</div><div class="line">  AsyncStorage.setItem(key,value).then(</div><div class="line">    (errs)=&gt;&#123;</div><div class="line">      if (!errs) &#123;</div><div class="line">        //xxx</div><div class="line">      &#125;else &#123;</div><div class="line">        //xxx</div><div class="line">      &#125;</div><div class="line">    &#125;)  </div><div class="line">&#125;</div><div class="line">``</div></pre></td></tr></table></figure>
<p>在这里，我们使用了promise，这样会使代码看起来舒服很多。虽然看起来很多，实际上，只要知道</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AsyncStorage.setItem(key,value)</div></pre></td></tr></table></figure>
<p>就可以了，我们用<code>setItem</code>来将key和value存储起来，看到这里想必你已经知道了为什么AsyncStorage是key-value系统了。</p>
<p>由于有了key，所以我们可以用key进行查询：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">get(key) &#123;</div><div class="line">   AsyncStorage.getItem(key)</div><div class="line">            .then(  </div><div class="line">                (result)=&gt; &#123;   </div><div class="line">                    if (!result) &#123;</div><div class="line">                      //xxx</div><div class="line">                    &#125;</div><div class="line">                    //返回结果</div><div class="line">                &#125;</div><div class="line">            ).catch((error)=&gt; &#123;  </div><div class="line">              //错误处理</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>数据我们存完了，但是如果数据没用了怎么办？删掉呗。和查询数据很像，删除也需要用到key：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">del(key) &#123;</div><div class="line">   AsyncStorage.removeItem(key).</div><div class="line">            then(</div><div class="line">            ()=&gt;&#123;</div><div class="line">              //删除成功</div><div class="line">            &#125;</div><div class="line">          ).catch((error)=&gt; &#123;  </div><div class="line">              //错误处理</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至于修改数据，其实写法和增加数据一样，当你需要修改一项数据的时候，直接传入key和一个新的值就可以了。</p>
<h2 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a>Realm</h2><p>前面的AsyncStorage只能存些小东西，数据量一大就开始捉襟见肘了，到了这种时候就该用Realm了。<br>其实用SQLite也行，不过不怎么好用，索性就不用了。当初作者君在用Realm的时候版本号才是0.14转眼间就到1.0.0了，所以请放心的使用Realm吧。</p>
<p>Realm并不是React Native自己就有的，所以我们需要安装Realm：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save realm</div></pre></td></tr></table></figure>
<p>安装好后大概是这样：</p>
<p><img src="https://meowv.github.io/images/6.1.png" alt="PNG">  </p>
<p>然后执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native link realm</div></pre></td></tr></table></figure>
<p><img src="https://meowv.github.io/images/6.2.png" alt="PNG">  </p>
<p>装完Realm之后得重新构建一下App：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native run-android</div></pre></td></tr></table></figure>
<p><em>Tips：由于网络的问题呢，可能会构建失败，多试几次就可以构建完成了</em></p>
<p>接下来测试一下Realm是不是安装成功了，先是引入Realm：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import Realm from &apos;realm&apos;;</div></pre></td></tr></table></figure>
<p>下面是Realm官方文档的例子的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">export default class &lt;project-name&gt; extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    let realm = new Realm(&#123;</div><div class="line">     schema: [&#123;name: &apos;Dog&apos;, properties: &#123;name: &apos;string&apos;&#125;&#125;]</div><div class="line">   &#125;);</div><div class="line"></div><div class="line">   realm.write(() =&gt; &#123;</div><div class="line">     realm.create(&apos;Dog&apos;, &#123;name: &apos;Rex&apos;&#125;);</div><div class="line">   &#125;);</div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">        &lt;Text style=&#123;styles.welcome&#125;&gt;</div><div class="line">          Count of Dogs in Realm: &#123;realm.objects(&apos;Dog&apos;).length&#125;</div><div class="line">        &lt;/Text&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>&lt;project-name&gt;</code>是你的项目名称，别弄错了。然后刷新一下，界面上的数字就会加1。如果程序可以顺利运行，<br>Realm就已经安装好了。</p>
<p>先简单的解释一下上面的代码，首先我们新建了一个叫做Dog的Schema，下面的<code>write</code>是写入数据，组件中的<br><code>realm.objects(&#39;Dog&#39;).length</code>会返回Dog中的数据个数。每次刷新App，都会写入一条数据，所以数字会加一。</p>
<p>有了一个简单的认识之后，让我们来详细的了解Realm吧！</p>
<h3 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h3><p>在使用Realm的时候离不开Schema，一个大些的App一般会用到多个Schema，所以在正式使用Realm的时候<br>不能像上面的例子一样敷衍，我们需要进行一个简单的封装。新建一个叫Schema.js文件，它可以在app文件夹下（没有app文件夹就自己新建一个），</p>
<p>在文件头部引入Realm：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import Realm from &apos;realm&apos;;</div></pre></td></tr></table></figure>
<p>然后创建一个叫Todo的class：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">class Todo extends Realm.Object &#123;&#125;</div></pre></td></tr></table></figure>
<p>不喜欢这个名字的话，你可以自己随便起一个名字。</p>
<p>然后来写Schema：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Todo.schema = &#123;</div><div class="line">    name:&apos;Todo&apos;,</div><div class="line">    primaryKey: &apos;id&apos;,</div><div class="line">    properties: &#123;</div><div class="line">        title: &#123;type: &apos;string&apos;&#125;,</div><div class="line">        id: &#123;type: &apos;string&apos;, indexed: true&#125;,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们用id来作为主键，由于这个id具有唯一性，我们一会儿会写一个小程序来生成id。 </p>
<p>然后导出模块：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">export default new Realm(&#123;schema: [Todo]&#125;)</div><div class="line">``` </div><div class="line"></div><div class="line">如果你需要多个Schema，在后面加上就好：</div></pre></td></tr></table></figure>
<p>export default new Realm({schema: [Todo, Category, xxx, xxx]})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">然后在你需要使用储存的地方引入Schema.js。</div><div class="line"></div><div class="line">比如这样引入：</div></pre></td></tr></table></figure></p>
<p>import realm from ‘./Schema’;<br>//注意文件位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">然后写一个生成id(为了不生成重复的id，我们使用guid，别管这是啥，只要知道这东西一般不会重复就好了)的函数：</div></pre></td></tr></table></figure></p>
<p>const guid = () =&gt; {<br>  return ‘xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx’<br>    .replace(/[xy]/g, (c) =&gt; {<br>      var r = Math.random() * 16 | 0, v = c == ‘x’ ? r : (r &amp; 0x3 | 0x8);<br>      return v.toString(16);<br>    });<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">接下来，我们来看如何去用Realm（也就是增删改查）。</div><div class="line"></div><div class="line">我们来写一个输入框来收集数据：</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">![PNG](https://meowv.github.io/images/6.4.png)  </div><div class="line"></div><div class="line">不出意外的话，下边会有一个黄色的提示（前边的章节有说过），先不要管它，我们一会儿解决。</div><div class="line">为了储存数据，我们需要把输入的文字放到state里面，上面的`onChangeText`就是干这个的，对了，别忘记加一个叫title的状态：</div></pre></td></tr></table></figure>
<p>constructor(props){<br>      super(props);<br>      this.state = {<br>        text: null<br>      };<br>    }<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Ok，搞定这些后我们来写一个写入数据的方法，我们起名叫write，write应该写在constructor下边：</div></pre></td></tr></table></figure></p>
<p>write(){<br>      realm.write(()=&gt;{<br>        realm.create(‘Todo’,{ title: this.state.title, id: guid() });<br>      });<br>    }<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">写入数据需要用到`realm.write()`和`realm.create()`，Todo是Schema，后边跟着的是要写入的数据，title是从</div><div class="line">state中取出来的，然后我们调用`guid()`来生成一个不重复的id。</div><div class="line">接下来把这个方法绑到按钮上，实现点击添加数据：</div></pre></td></tr></table></figure></p>
<p><button title="添加" onpress="{" ()=""> this.write() }/&gt;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">别忘记写this哦，write是内部的方法，不用this会引用不到的。</div><div class="line"></div><div class="line">我们可以在下边写一个文本来显示Todo中数据的条数，就和上面的例子一样，我们在Button下面写个换行符：</div></pre></td></tr></table></figure></button></p>
<p><text>{‘\n’}</text><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">然后把数据放到state里：</div></pre></td></tr></table></figure></p>
<p>this.state = {<br>  text: null,<br>  data: realm.objects(‘Todo’)<br>};<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">在换行符下面继续写：</div></pre></td></tr></table></figure></p>
<p><text>{ this.state.data.length }</text><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">然后才是重点，Realm是可以使数据实时更新的，只要增加一个监听就好了，我们把这个监听写在构造里面：</div></pre></td></tr></table></figure></p>
<p>this.state = {…}<br>realm.addListener(‘change’, () =&gt; {<br>  this.forceUpdate()<br>});<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">然后输入一个数据，保存，下面的数字就可以实时的变化了~</div><div class="line"></div><div class="line">然后我们来看查询是怎样的，界面的话把上面的代码复制过去，改几个字就好：</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">然后把find放到state里，正如我们之前做过的一样：</div></pre></td></tr></table></figure>
<p>this.state = {<br>  text: null,<br>  find: null,<br>  data: realm.objects(‘Todo’)<br>};<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">然后我们写一个叫find的方法,这个方法稍稍有些复杂：</div></pre></td></tr></table></figure></p>
<p>find () {<br>  realm.objects(‘Todo’)<br>      .filtered(‘title = ‘ + ‘“‘ + this.state.find + ‘“‘)<br>      .forEach(result =&gt; ToastAndroid.show(result.id, ToastAndroid.SHORT));<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">我们借助了一个叫做`ToastAndroid`的组件来实现显示查找结果的id，所以别忘记引入这个组件。</div><div class="line">`filtered`是一个过滤器，我们在里面写查询代码，注意喽，查询的值应该是一个字符串所以在外面包裹了双引号。</div><div class="line">由于返回的结果稍稍有些复杂，所以我们用`forEach`来处理一下，使其获得id。</div><div class="line"></div><div class="line">效果应该是这个样子的：</div><div class="line"></div><div class="line">![PNG](https://meowv.github.io/images/6.5.png)  </div><div class="line"></div><div class="line">至于修改和删除就很简单了，所以这里只给出核心代码，作者君知道你很聪明，所以来想想具体怎么用把~</div><div class="line"></div><div class="line">修改：</div></pre></td></tr></table></figure></p>
<p>realm.write(() =&gt; {<br>  realm.create(‘Todo’, { id: xxx, title: xxx }, true);<br>});<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">删除：</div></pre></td></tr></table></figure></p>
<p>realm.write(() =&gt; {<br>  const todo = realm.objects(‘Todo.filtered(‘id = xxxxx’);<br>  realm.delete(todo);<br>});<br>```</p>
<p>小提示：</p>
<p>唔？ID真的没有用吗？具体可以起到什么作用呢？</p>
<p>想明白这两点，修改和删除就没问题了。另外，有没有发现修改，增加，删除都是在write中进行的呢？</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;储存&quot;&gt;&lt;a href=&quot;#储存&quot; class=&quot;headerlink&quot; title=&quot;储存&quot;&gt;&lt;/a&gt;储存&lt;/h1&gt;&lt;p&gt;本章提要&lt;br&gt;  1.AsyncStorage&lt;br&gt;  2.Realm&lt;br&gt;一个应用总是要存些东西的，我们要怎么做才能把数据存起来呢？我们这里有两个选择，一个是使用官方提供的AsyncStorage另一个是使用小型数据库。&lt;/p&gt;
&lt;p&gt;当数据量不大，结构很简单的时候，我们来使用AsyncStorage这个key-value储存系统，当数据量较大的时候，我们就需要使用小型数据库了，这里我们&lt;br&gt;会学习一个叫做Realm的数据库。&lt;br&gt;
    
    </summary>
    
    
      <category term="ReactNative" scheme="http://xj8c.cc/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>React Native中的样式，Flexbox布局及其他内容</title>
    <link href="http://xj8c.cc/2017/07/11/ReactNative-style-layout/"/>
    <id>http://xj8c.cc/2017/07/11/ReactNative-style-layout/</id>
    <published>2017-07-11T08:25:59.000Z</published>
    <updated>2017-07-21T03:29:22.951Z</updated>
    
    <content type="html"><![CDATA[<h1 id="是时候说说样式与布局了"><a href="#是时候说说样式与布局了" class="headerlink" title="是时候说说样式与布局了"></a>是时候说说样式与布局了</h1><p>本章提要</p>
<ul>
<li>样式</li>
<li>布局</li>
<li>Dimensions</li>
</ul>
<h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><p>在前几章说了一些样式，是不是有点懵了呢？没关系，我们一起看看样式在React Native中的使用。</p>
<p>在React Native中，写样式和写CSS差不多，只不过是把<code>-</code>的连接方式换成了小驼峰式。又把<code>;</code>换成了<code>,</code>，有的时候要把值加上分号，比如这样：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">background-color: green; ---&gt;  backgroundColor: &apos;green&apos;,</div></pre></td></tr></table></figure></p>
<p>实际上，React Native的样式算是CSS的一个子集，当发现有些样式不能用的话不要惊讶，试着换用别的方式来实现就好~</p>
<p>作者君总结了一些常用的样式放到了附录里，可以作为写样式时的参考。</p>
<p>我们知道，代码总是会越写越多，样式也一样。所以为了效率，为了样式的整洁，我们写样式用<code>StyleSheet.create</code>比较好，不过只是写着玩玩的话，<br>怎么写都好。下面我们来看看这种定义样式的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    content: &#123;</div><div class="line">        backgroundColor: &apos;#fff&apos;,</div><div class="line">        height: 50,</div><div class="line">        width: 100</div><div class="line">    &#125;,</div><div class="line">    text: &#123;</div><div class="line">        color: &apos;blue&apos;,</div><div class="line">        textAlign: &apos;center&apos;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>然后在组件中这样使用即可:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;View style=&#123;styles.content&#125;&gt;</div><div class="line">    &lt;Text style=&#123;styles.text&#125;&gt;哈，我是小整洁&lt;/Text&gt;</div><div class="line">    .....</div><div class="line">&lt;/View&gt;</div></pre></td></tr></table></figure>
<p>这样写后，你的代码可读性会提高不少，毕竟样式都像：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Text style=&#123;&#123; fontStyle:&apos;italic&apos;, fontSize: 20,... &#125;&#125;</div></pre></td></tr></table></figure>
<p>就会变得乱糟糟一团团了。</p>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h3 id="Flexbox"><a href="#Flexbox" class="headerlink" title="Flexbox"></a>Flexbox</h3><p>在React Native中，你可以愉快的使用Flexbox布局，完全不用考虑兼容性（放心，绝对不需要考虑IE6）,<br>如果在浏览器端写过的话，在React Native上继续写这种布局会很是得心应手的。如果没接触过也没关系，这里会很详细的讲的（毕竟很重要）。</p>
<p>首先，我们先瞅瞅Flexbox布局需要用到什么样式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flex, flexDiretion, justifyCotent, alignItems, alignSelf, flexWrap, flexShrink, flexGrow</div></pre></td></tr></table></figure>
<p>嗯，先把这些列在这里，有个大概印象就成，我们一会儿再说。</p>
<p>对于Flexbox来说，有一个很重要的概念————轴。理解了轴的概念，使用Flexbox也不会有什么问题了。</p>
<p>对于一个平面来说，它有两个轴，横轴和纵轴，就是下面这样： </p>
<p><img src="https://meowv.github.io/images/5.1.png" alt="PNG">  </p>
<p>Flexbox用操作这两个轴的方式来完成布局，不过不叫横纵而是叫主次。</p>
<p>当横轴为主轴时，次轴是纵轴：</p>
<p><img src="https://meowv.github.io/images/5.2.png" alt="PNG">  </p>
<p>当纵轴为主轴时，次轴是横轴：</p>
<p><img src="https://meowv.github.io/images/5.3.png" alt="PNG">  </p>
<p>看完预备知识，我们可以看看Flexbox是怎么用的了。</p>
<p>首先，要有一个flex容器，如果不指定高度和宽度，它会占满能够占领的最大空间，如果给了高度和宽度，那么会占满你给它的空间。</p>
<p>我们用<code>flex</code>告诉React Native说这是一个使用了弹性布局的组件，就像这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;View style=&#123;&#123; flex:1 &#125;&#125;&gt;&lt;/View&gt;</div></pre></td></tr></table></figure></p>
<p>flex后面的数字可以简单的理解为比例</p>
<p>不过呢，我们一般不会只写个<code>flex: 1</code>，我们还得写一些别的东西，就像下面这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;View style=&#123;&#123; flex: 1, flexDirection: &apos;column&apos;, justifyContent:&apos;center&apos;, alignItems:&apos;flex-end&apos; &#125;&#125;&gt;</div><div class="line">&lt;/View&gt;</div></pre></td></tr></table></figure>
<p>除了<code>flex: 1</code>，剩下的其实就是用来操作横纵轴的。<br>用<code>flexDirection</code>声明主轴是纵轴，次轴是横轴，用<code>justifyContent</code>声明元素处在主轴的中心位置，用<code>alignItems</code>声明元素处在<br>次轴的末尾。</p>
<p>我们在<code>View</code>容器里填充一些元素进去，就可以很直观的看到效果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;View style=&#123;&#123; flex: 1, flexDirection: &apos;column&apos;, justifyContent:&apos;center&apos;, alignItems:&apos;flex-end&apos; &#125;&#125;&gt;</div><div class="line">    &lt;Text style=&#123;&#123; backgroundColor:&apos;blue&apos;&#125;&#125; &gt;1&lt;/Text&gt;</div><div class="line">    &lt;Text style=&#123;&#123; backgroundColor:&apos;red&apos; &#125;&#125;&gt;2&lt;/Text&gt;</div><div class="line">    &lt;Text style=&#123;&#123; backgroundColor:&apos;green&apos; &#125;&#125;&gt;3&lt;/Text&gt;</div><div class="line">&lt;/View&gt;</div></pre></td></tr></table></figure>
<p>效果是这样（虽然比较建议你自己敲一下代码，但是还是把图放在这里比较好）：</p>
<p><img src="https://meowv.github.io/images/5.4.png" alt="PNG">  </p>
<p>至于为啥这个图看起来有些大，是因为作者君把整个模拟器的屏幕截过来了，毕竟要突出元素在主轴中间的效果嘛。</p>
<p>这些还不是全部，毕竟不可能每个整体都是统一的，内部总是要有些不一样的。拿上面的那个例子来说：如果我不想让每个元素都在次轴的末尾，那<br>该怎么办呢？ 很简单，这个时候我们就可以使用<code>alignSelf</code>了。<code>alignSelf</code>可以使容器里的元素和父样式不一样，我们来简单的改造一下上面的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Text style=&#123;&#123; backgroundColor:&apos;green&apos;, alignSelf:&apos;flex-start&apos; &#125;&#125;&gt;3&lt;/Text&gt;</div></pre></td></tr></table></figure>
<p>这样就可以使第三个<code>Text</code>在前面了。就像这样：</p>
<p><img src="https://meowv.github.io/images/5.5.png" alt="PNG">  </p>
<p>我们再说回<code>flex</code>。我们知道，<code>flex</code>后面是接数字的，数字是这个容器所占的比例，也就是说，后面的数字越大，容器所占比例也就越大。</p>
<p>不过，如果只有<code>flex: 1</code>的话，它会自己占领所有地盘，谁叫没有其它的容器和它抢地盘呢。</p>
<h3 id="position"><a href="#position" class="headerlink" title="position"></a>position</h3><p>对于一个App来说，不可能只用到Flexbox，还得用到其他的布局方式。</p>
<p>首先来看绝对布局absolute，绝对布局这名字听起来挺霸气的，实际上也确实霸气，规定元素在那里，那元素就得在那里待着。<br>我们使用<code>top,bottom,left,right</code>来声明元素的上下左右距容器有多少距离，从而将元素定在那个位置。我们在用绝对布局的时候<br>需要告诉元素它的布局方式是绝对布局，就像这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Text style=&#123;&#123; position: &apos;absolute&apos;, width: 50, height: 50 &#125;&#125;&gt;&lt;/Text&gt;</div></pre></td></tr></table></figure>
<p>只不过我们得事先声明元素的宽度和高度，不然样式会变得很奇怪，然后来定位元素的位置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Text style=&#123;&#123; position: &apos;absolute&apos;, width:50, height: 50, bottom: 20, left:10 &#125;&#125;&gt;233&lt;/Text&gt;</div></pre></td></tr></table></figure>
<p>就像这样：</p>
<p><img src="https://meowv.github.io/images/5.6.png" alt="PNG">  </p>
<p>还有一点得注意，我们需要给父容器一个合适的高度和宽度，比如这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;View style=&#123;&#123; height:500,width:500 &#125;&#125;&gt;</div><div class="line">    &lt;Text style=&#123;&#123; position: &apos;absolute&apos;, bottom: 20, left:10, width:50, height: 50 &#125;&#125;&gt;233&lt;/Text&gt;</div><div class="line">    &lt;Text style=&#123;&#123; position: &apos;absolute&apos;, bottom: 20, left:80, width:50, height: 50 &#125;&#125;&gt;233&lt;/Text&gt;</div><div class="line">&lt;/View&gt;</div></pre></td></tr></table></figure>
<p>既然有绝对布局，就有相对布局，只不过可能会有些难用。你可以把相对布局理解成一个流，只不过<code>bottom,right</code>不能用。<br>可以使用<code>top,left</code>更改元素在流中的上，左偏移大小（top,left初始值为0）。下面是个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;View style=&#123;&#123;height:500,width:500&#125;&#125;&gt;</div><div class="line">    &lt;Text style=&#123;&#123; position: &apos;relative&apos;,  left:10, width:50, height: 50 &#125;&#125;&gt;233&lt;/Text&gt;</div><div class="line">    &lt;Text style=&#123;&#123; position: &apos;relative&apos;,  left:60, width:50, height: 50 &#125;&#125;&gt;233&lt;/Text&gt;</div><div class="line">    &lt;Text style=&#123;&#123; position: &apos;relative&apos;,  left:120, width:50, height: 50 &#125;&#125;&gt;233&lt;/Text&gt;</div><div class="line">&lt;/View&gt;</div></pre></td></tr></table></figure>
<p><img src="https://meowv.github.io/images/5.7.png" alt="PNG"> </p>
<h2 id="Dimensions"><a href="#Dimensions" class="headerlink" title="Dimensions"></a>Dimensions</h2><p>在React Native中，我们不能用<code>width: 60%</code>之类的方式来进行布局，那该怎么办嘞？嗯，我们可以换个方式，那就是<code>Dimensions</code>，<br>我们来请Dimensions出场：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import &#123;</div><div class="line">  Dimensions</div><div class="line">&#125; from &apos;react-native&apos;;</div></pre></td></tr></table></figure>
<p>然后获取宽度和高度，这里我们用解构赋值的方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const &#123; width, height &#125; = Dimensions.get(&quot;window&quot;);</div></pre></td></tr></table></figure>
<p>然后就可以在样式中使用喽：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;View style=&#123;&#123; width: width * 0.5 ,height: height * 0.5 &#125;&#125;&gt;&lt;/View&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;是时候说说样式与布局了&quot;&gt;&lt;a href=&quot;#是时候说说样式与布局了&quot; class=&quot;headerlink&quot; title=&quot;是时候说说样式与布局了&quot;&gt;&lt;/a&gt;是时候说说样式与布局了&lt;/h1&gt;&lt;p&gt;本章提要&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;样式&lt;/li&gt;
&lt;li&gt;布局&lt;/li&gt;
&lt;li&gt;Dimensions&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;样式&quot;&gt;&lt;a href=&quot;#样式&quot; class=&quot;headerlink&quot; title=&quot;样式&quot;&gt;&lt;/a&gt;样式&lt;/h2&gt;&lt;p&gt;在前几章说了一些样式，是不是有点懵了呢？没关系，我们一起看看样式在React Native中的使用。&lt;/p&gt;
&lt;p&gt;在React Native中，写样式和写CSS差不多，只不过是把&lt;code&gt;-&lt;/code&gt;的连接方式换成了小驼峰式。又把&lt;code&gt;;&lt;/code&gt;换成了&lt;code&gt;,&lt;/code&gt;，有的时候要把值加上分号，比如这样：&lt;br&gt;
    
    </summary>
    
    
      <category term="ReactNative" scheme="http://xj8c.cc/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>React Native常用的组件</title>
    <link href="http://xj8c.cc/2017/07/10/ReactNative-module/"/>
    <id>http://xj8c.cc/2017/07/10/ReactNative-module/</id>
    <published>2017-07-10T08:24:39.000Z</published>
    <updated>2017-07-21T03:29:16.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一些一定要知道的组件"><a href="#一些一定要知道的组件" class="headerlink" title="一些一定要知道的组件"></a>一些一定要知道的组件</h1><p>本章提要</p>
<ul>
<li>View组件</li>
<li>Text组件</li>
<li>Button组件</li>
<li>Image组件</li>
<li>第三方组件</li>
</ul>
<p>很多组件是开发应用的基石，如果没有这些组件，那么是写不出来一个应用的，在这一章，我们来学习一些一定要知道的组件。<br><a id="more"></a><br>在使用组件的时候，忘记引入组件是不行的，我们来看一下怎么引入组件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import &#123;</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">  Button,</div><div class="line">  ...其它的组件名字</div><div class="line">&#125; from &apos;react-native&apos;;</div></pre></td></tr></table></figure>
<p>这样就可以依次引入Text，View和Button组件了~</p>
<h2 id="View组件"><a href="#View组件" class="headerlink" title="View组件"></a>View组件</h2><p>这么说吧，第一个就介绍View组件是有原因的。View组件可是最最基础的组件，我们经常需要拿View组件当容器使用~<br>View自己没有固定的样式，我们需要自己为它定义样式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;View style=&#123;&#123; backgroundColor:&apos;green&apos;, height:50, width:50 &#125;&#125;&gt;&lt;/View&gt;</div></pre></td></tr></table></figure>
<p>这样，在屏幕上便可以出现一个绿色的，边长为50dp的正方形</p>
<p><img src="https://meowv.github.io/images/4.1.png" alt="PNG"> </p>
<p>样式什么的，我们会在下一章讲到，在这里简单看看就好。</p>
<h2 id="Text组件"><a href="#Text组件" class="headerlink" title="Text组件"></a>Text组件</h2><p>一般来说，一个应用总是离不开文字的，在React Native中，文字外面需要套上Text组件才可以，<br>我们可以通过Text组件控制文字大小及颜色，文字行数，还可以通过点击Text组件来触发一些动作（函数）。<br>栗子如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Text numberOfLines=&#123; 1 &#125; style=&#123;&#123; fontSize:20, color:&apos;green&apos; &#125;&#125;&gt;</div><div class="line">略略略,略略略略略略，略略略略略略略略略，略略略略略略略略略略略略</div><div class="line">&lt;/Text&gt;</div></pre></td></tr></table></figure>
<p>我们通过numberOfLines来控制行数，超过设定的行数便会在设定好的最后一行显示省略号。通过fontSize和color设定了文字的<br>大小及颜色。效果如下：</p>
<p><img src="https://meowv.github.io/images/4.2.png" alt="PNG"> </p>
<h2 id="Button组件"><a href="#Button组件" class="headerlink" title="Button组件"></a>Button组件</h2><p>Button组件大概是在0.37版加入的，在那之前按钮什么的要自己写，如果对官方出的这个不满意的话，那就自己写或找一些第三方组件吧~<br>我们写两个按钮当作栗子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;View&gt;</div><div class="line">    &lt;Button color=&quot;green&quot; title=&quot;我是一个正常的按钮&quot;/&gt;</div><div class="line">    &lt;Button  disabled=&#123;true&#125; title=&quot;我是一个不可用的按钮&quot;/&gt;</div><div class="line">&lt;/View&gt;</div></pre></td></tr></table></figure>
<p><img src="https://meowv.github.io/images/4.3.png" alt="PNG"> </p>
<p>由于写了两个组件，所以要在外面包裹一层容器，这里我们用View。这两个按钮一个是<br>正常状态，一个是不可用状态，我们通过控制disabled属性来控制是否可用(默认false)。按钮中的文字写在title里，color属性可以控制颜色。<br>由于按钮需要和onPress一起用，所以会有一个这样的警告：</p>
<p><img src="https://meowv.github.io/images/4.4.png" alt="PNG"> </p>
<p>不过暂时没什么问题，咱先不用管，以后用到的时候再写~</p>
<h2 id="Image组件"><a href="#Image组件" class="headerlink" title="Image组件"></a>Image组件</h2><p>在以前，用React Native引用组件总是很坑，不过现在比以前好多了。由于作者君木有苹果电脑，所以不怎么清楚IOS版是怎么用的，<br>我们就只说安卓的吧。<br>图片的来源有两种，一种是本地图片，一种是网络图片，这两种图片在引入的时候稍稍有些差别，我们先看引入本地图片的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Image source=&#123;require(&apos;./images/avatar.png&apos;)&#125; style=&#123;&#123; height:50, width:50 &#125;&#125; /&gt;</div></pre></td></tr></table></figure>
<p>我们在项目根目录创建一个叫images的文件夹，并在里面放一个叫avatar的图片。然后require图片地址，<br>使用图片组件要给它宽和高，不然无法正常显示。还有，如果图片没显示的话，记得重新执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native run-android</div></pre></td></tr></table></figure>
<p>然后是网络图片:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Image source=&#123;&#123;uri: &apos;http://qiniu.com/xxx/png&#125;&#125; style=&#123;&#123; height:50, width:50 &#125;&#125; /&gt;</div></pre></td></tr></table></figure>
<p>在使用网络图片的时候，要将require改成uri，而且不写高度和宽度也没问题~</p>
<h2 id="第三方组件"><a href="#第三方组件" class="headerlink" title="第三方组件"></a>第三方组件</h2><p>当你觉得官方组件有限，自己写又心好累，这时该怎么办呢？</p>
<p>当然是使用第三方组件啦~React Native社区越来越大，我们可以用的组件也越來越多，在这里，<br>作者君推荐两个搜索组件的地方：</p>
<ul>
<li>js.coach(<a href="https://js.coach/react-native" target="_blank" rel="external">https://js.coach/react-native</a>)</li>
<li>GitHub(<a href="https://github.com/" target="_blank" rel="external">https://github.com/</a>)</li>
</ul>
<p>其实js.coach的组件来源也是GitHub 23333</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一些一定要知道的组件&quot;&gt;&lt;a href=&quot;#一些一定要知道的组件&quot; class=&quot;headerlink&quot; title=&quot;一些一定要知道的组件&quot;&gt;&lt;/a&gt;一些一定要知道的组件&lt;/h1&gt;&lt;p&gt;本章提要&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;View组件&lt;/li&gt;
&lt;li&gt;Text组件&lt;/li&gt;
&lt;li&gt;Button组件&lt;/li&gt;
&lt;li&gt;Image组件&lt;/li&gt;
&lt;li&gt;第三方组件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;很多组件是开发应用的基石，如果没有这些组件，那么是写不出来一个应用的，在这一章，我们来学习一些一定要知道的组件。&lt;br&gt;
    
    </summary>
    
    
      <category term="ReactNative" scheme="http://xj8c.cc/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>启动你的第一个React Native 应用</title>
    <link href="http://xj8c.cc/2017/07/09/ReactNative-run/"/>
    <id>http://xj8c.cc/2017/07/09/ReactNative-run/</id>
    <published>2017-07-09T08:20:15.000Z</published>
    <updated>2017-07-19T08:37:21.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="启动你的App"><a href="#启动你的App" class="headerlink" title="启动你的App"></a>启动你的App</h1><p>本章提要</p>
<ul>
<li>1.搭建React Native环境</li>
<li>2.启动App</li>
</ul>
<h2 id="1-搭建React-Native环境"><a href="#1-搭建React-Native环境" class="headerlink" title="1.搭建React Native环境"></a>1.搭建React Native环境</h2><p>啊哈，我们即将近距离接触React Native了。不过，我们得在这之前安装一下React Native环境。<br><a id="more"></a><br>首先，我们来安装Node.js环境。<br>如果你的系统是Windows，那么到Node.js官网上下载安装包，一路next就行了。<br>如果是Linux或MacOS，那么作者君推荐使用神奇的nvm。<br>nvm的地址是:<br><a href="https://github.com/creationix/nvm" target="_blank" rel="external">https://github.com/creationix/nvm</a><br>按照说明安装即可。</p>
<p>然后执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvm install x.xx.x(要安装的版本号)</div></pre></td></tr></table></figure>
<p>这样Node.js就安装完毕了。</p>
<p>接下来，我们来安装Java环境。去Oracle的官网上下载安装包<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a><br>然后安装。</p>
<p>同样的，Windows用户一路next然后设置JAVA_HOME环境变量即可。<br>对于Linux和MacOS用户来说，会稍稍麻烦一些。<br>首先把安装包解压到opt目录，然后在/etc/profile里加上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/opt/(这里是安装包解压后的路径，别填错)</div><div class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</div><div class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</div><div class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</div></pre></td></tr></table></figure></p>
<p>最后别忘了执行一下<code>source /etc/profile</code></p>
<p>如果执行<code>java -version</code>可以正常输出的话，那么恭喜啦，对很多人来说不怎么好装的Java环境被你安装好了哟</p>
<p>然后安装安卓环境，我们先去Google的开发者网站<a href="https://developer.android.google.cn/studio/index.html" target="_blank" rel="external">https://developer.android.google.cn/studio/index.html</a> 上下载Android Studio。<br>安装好Android Studio，我们需要安装SDK及SDK Tools。首先，我们来安装SDK。在SDK Platforms，选择Show Package Details，然后勾选Android 6.0下的Google APIs，Android SDK Platform 23，Intel x86 Atom_64 System Image还有Google APIs Intel x86 Atom_64 System Image。接下来，在SDK Tools窗口中选择Show Package Details，然后选中有23.0.1的选项并下载。<br>最后，我们需要在/etc/profile中写入环境变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export ANDROID_HOME=&apos;/home/elven/Android/Sdk&apos;</div></pre></td></tr></table></figure>
<p>Windows用户也需要设置<code>ANDROID_HOME</code>这个环境变量。</p>
<p>如果是老司机的话，Android Studio是不需要安装的，不过为了及时，方便的更新SDK，还是装上吧。</p>
<p>再来三步，环境就安装好啦，如果感觉有些焦灼，给自己冲杯茶，咖啡或果汁是很好的选择~</p>
<p>接下来，我们需要安装React Native。在终端中执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install react-native-cli -g</div></pre></td></tr></table></figure>
<p>然后安装Yarn</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install yarn -g</div></pre></td></tr></table></figure>
<p>最后安装Watchman，按照这里(<br><a href="https://facebook.github.io/watchman/docs/install.html#build-install" target="_blank" rel="external">https://facebook.github.io/watchman/docs/install.html#build-install</a></p>
<p>)的说明一步步安装。<br>如果有报错的话，多半是有什么没装，按照报错里的信息装一下就Ok了。另外，Windows系统不需要安装Watchman（其实是Watchman不能在在这个系统运行）</p>
<p>到这里，开发环境就搭建好了。</p>
<h2 id="2-启动App"><a href="#2-启动App" class="headerlink" title="2.启动App"></a>2.启动App</h2><p>在启动App之前，我们得创建一个新的项目（啥都没有拿什么启动，哈哈）<br>在终端输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native init 项目名</div></pre></td></tr></table></figure>
<p>等待一会儿，进入项目目录。<br>好了，拿出你的小手机和数据线并与电脑相连。<br>新开一个终端，然后进入项目目录，执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native start</div></pre></td></tr></table></figure>
<p>回到原来的终端，执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native run-android</div></pre></td></tr></table></figure>
<p>如果是Windows的话，只要执行<code>run-android</code>这条命令就可以，packager可以自行启动，<br>这里分开是为了保证App可以正常启动。</p>
<p>闭一会儿眼睛，稍稍休息下之后，你就会在手机上看到启动好的App了！</p>
<p>作者君猜，你可能不知道项目中的index.android.js里的最后一句是什么意思，所以就在代码里小小的解释一下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AppRegistry.registerComponent(&apos;项目名称&apos;, () =&gt; 组件名称);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;启动你的App&quot;&gt;&lt;a href=&quot;#启动你的App&quot; class=&quot;headerlink&quot; title=&quot;启动你的App&quot;&gt;&lt;/a&gt;启动你的App&lt;/h1&gt;&lt;p&gt;本章提要&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.搭建React Native环境&lt;/li&gt;
&lt;li&gt;2.启动App&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-搭建React-Native环境&quot;&gt;&lt;a href=&quot;#1-搭建React-Native环境&quot; class=&quot;headerlink&quot; title=&quot;1.搭建React Native环境&quot;&gt;&lt;/a&gt;1.搭建React Native环境&lt;/h2&gt;&lt;p&gt;啊哈，我们即将近距离接触React Native了。不过，我们得在这之前安装一下React Native环境。&lt;br&gt;
    
    </summary>
    
    
      <category term="ReactNative" scheme="http://xj8c.cc/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative基础</title>
    <link href="http://xj8c.cc/2017/07/08/ReactNative-base/"/>
    <id>http://xj8c.cc/2017/07/08/ReactNative-base/</id>
    <published>2017-07-08T08:18:48.000Z</published>
    <updated>2017-07-19T08:37:34.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-Native基础"><a href="#React-Native基础" class="headerlink" title="React Native基础"></a>React Native基础</h1><p>本章提要</p>
<ul>
<li>1.初识JSX</li>
<li>2.组件</li>
<li>3.Props和State</li>
</ul>
<h2 id="1-初识JSX"><a href="#1-初识JSX" class="headerlink" title="1.初识JSX"></a>1.初识JSX</h2><p>React Native抛弃了HTML，所以只好用JSX喽，在这里，我们来简单的了解一下JSX。<br><a id="more"></a><br>JSX是一个JS的语法糖，写起来就像XML。嗯，如果你不知道什么是XML的话，就脑补HTML吧，<br>它们都需要一些标签。比如这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Text&gt;&lt;/Text&gt;</div></pre></td></tr></table></figure>
<p>还有这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Image /&gt;</div></pre></td></tr></table></figure></p>
<p>怎么样，有没有一丝熟悉的感觉？<br>JSX就是这样简单，我们只需要一个<code>&lt;</code>加上组件名字和<code>/&gt;</code>就可以了（其中Text，Image就是组件名）</p>
<h2 id="2-组件"><a href="#2-组件" class="headerlink" title="2.组件"></a>2.组件</h2><p>在React Native中，有这么几种组件，无状态组件，正常的组件和高阶组件。</p>
<blockquote>
<p>高阶组件以后补上</p>
</blockquote>
<p>无状态组件，顾名思义，就是没有状态的组件，写一个无状态组件就和写一个函数一样简单。由于无状态组件的性能较高，我们<br>一般会在App性能优化的时候使用无状态组件。<br>下面是一个无状态组件的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const Hello = () =&gt; &#123;</div><div class="line">    return (</div><div class="line">        &lt;Text&gt;我是一个无状态组件&lt;/Text&gt;</div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中，Hello是组件的名字，这里有个友情提示，在React Native中，组件的名字最好都是首字母大写，这样可以避免一些奇怪的BUG。<br>然后在return中写组件的内容，注意，使用文字的时候，一定要在文字外面套上Text组件，否则会红屏报错。<br>如果想要用Props(属性)，要传一个props参数，就像这样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const Hello = (props) =&gt; &#123;...&#125;</div></pre></td></tr></table></figure>
<p>如果不知道什么是Props的话，别着急，一会儿会说到的。</p>
<p>接下来是正常的组件。<br>正常的组件能做的事情比无状态组件多了不少 (´・ω・`)。<br>写起来是酱紫的，稍微复杂一点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class Hello extends Component &#123;</div><div class="line">    constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">    this.state = &#123;&#125;;</div><div class="line">  &#125;</div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;View&gt;</div><div class="line">                &lt;Text&gt;Hi,很高兴认识你&lt;/Text&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是一个比较完整的组件，包含了Props和State(状态)。<br>在正常组件中使用state和props，我们需要使用constructor来初始化一下~<br>这里的super(props)是为了可以在constructor使用<code>this.props</code>，<br>当然，如果不需要这些，则不用写（虽然没写，但是按照ES6规范，class需要有一个constructor，所以constructor会被自动加上）。就像这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class Hello extends Component &#123;</div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;View&gt;</div><div class="line">                &lt;Text&gt;略略略/Text&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-Props和State"><a href="#3-Props和State" class="headerlink" title="3.Props和State"></a>3.Props和State</h2><p>嗯哼，刚才稍微提了一下Props和State，是不是很想知道这俩是啥嘞~<br>别着急，我这就说(´・ω・`)<br>Props的意思是属性，在React中，我们可以实现组件的复用(毕竟不复用组件太浪费了)。为了实现<br>组件的复用，我们希望可以对组件做些定制，这个时候，我们就需要使用Props了。往组件中传些不同的参数，从而使组件具有不同的功能。我们称这些<br>参数为Props。如果不太理解，没关系，来看这个栗子。</p>
<p>设计师为衣服厂设计了一些衣服，但是为了照顾到不同的人群，所以要有不同的型号。高的，矮的，胖的，瘦的。虽然有不同的型号，但是<br>是同一款衣服，我们可以认为高矮胖瘦是参数，衣服的款式是一个组件。</p>
<p>我们来看一下Props怎么用。首先写一个叫做Eat的组件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class Eat extends Component &#123;</div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">                &lt;Text&gt;我想吃&lt;/Text&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在组件里使用Props，我们需要一对花括号<code>{}</code>(写其他的JS语句也需要花括号)就像这样:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">return (</div><div class="line">    &lt;Text&gt;我想吃&#123;this.props.food&#125;&lt;/Text&gt;</div><div class="line">)</div></pre></td></tr></table></figure>
<p>在props后面跟着的是属性的名字</p>
<p>接下来，我们写另一个组件Dinner，并引入Eat组件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class Dinner extends Component &#123;</div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">                &lt;Eat /&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后使用props:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Eat food=&apos;鱼&apos; /&gt;</div></pre></td></tr></table></figure>
<p>这样最终会显示我想吃鱼，这里的鱼是food的值。到这里，Props的栗子就结束了，我们来看看State。</p>
<p>一般来说，组件是需要和用户进行交互的，组件会随着随着交互而发生变化，这里的变化指的是State也就是状态。</p>
<p>下面是一个用到了状态的组件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class NeedState extends Component &#123;</div><div class="line">    constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">    this.state = &#123; text: &apos;&apos; &#125;;</div><div class="line">  &#125;</div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;View&gt;</div><div class="line">                &lt;Text onPress=&#123;() =&gt; &#123; this.setState(&#123; text: &apos;状态变了&apos; &#125;)&#125; &#125;&gt;点我！&lt;/Text&gt;</div><div class="line">                &lt;Text&gt;期待会发生的事情&lt;/Text&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先，我们需要constructor函数来初始化状态，别忘记用<code>this.state</code>写入状态的名字。<code>onPress</code>可以帮我们在点了某个组件之后<br>执行一定的动作。我们在这里用它来触发<code>setState</code>来改变状态。</p>
<p>如果没有什么奇怪的错误的话，点击<code>点我</code>这个文本之后，下面的文字会变成<code>状态变了</code>。</p>
<p>State大概就是这么用的，没什么难度。在使用React Native的过程中，我们会时常用到Props和State，所以记下它们的用法还是很有必要的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;React-Native基础&quot;&gt;&lt;a href=&quot;#React-Native基础&quot; class=&quot;headerlink&quot; title=&quot;React Native基础&quot;&gt;&lt;/a&gt;React Native基础&lt;/h1&gt;&lt;p&gt;本章提要&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.初识JSX&lt;/li&gt;
&lt;li&gt;2.组件&lt;/li&gt;
&lt;li&gt;3.Props和State&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-初识JSX&quot;&gt;&lt;a href=&quot;#1-初识JSX&quot; class=&quot;headerlink&quot; title=&quot;1.初识JSX&quot;&gt;&lt;/a&gt;1.初识JSX&lt;/h2&gt;&lt;p&gt;React Native抛弃了HTML，所以只好用JSX喽，在这里，我们来简单的了解一下JSX。&lt;br&gt;
    
    </summary>
    
    
      <category term="ReactNative" scheme="http://xj8c.cc/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative介绍</title>
    <link href="http://xj8c.cc/2017/07/07/ReactNative-introduce/"/>
    <id>http://xj8c.cc/2017/07/07/ReactNative-introduce/</id>
    <published>2017-07-07T08:17:29.000Z</published>
    <updated>2017-07-19T08:37:02.859Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-Native介绍"><a href="#React-Native介绍" class="headerlink" title="React Native介绍"></a>React Native介绍</h1><p>虽然，你可能已经对React Native有一定的了解了，但是按照惯例，还是要简单介绍一下。</p>
<p>React是由Facebook的工程师们在2013年开源的一款前端框架，现在已成为最火热的前端框架之一。<br>React Native则是使用React来开发移动应用的方式。<br><a id="more"></a><br>React Native底层使用JS与原生进行通信，这使得其性能比Hybird强了不少，如果觉得Hybird使你的应用变得卡顿，<br>那么投入React Native的怀抱是一个好的选择~</p>
<p>React Native在底层通过一套机制天然的支持ES6,这意味着你可以在你的应用中愉快的使用ES6语法，而不用头疼兼容问题。</p>
<p>使用React Native意味着更快的调试速度，当你在配置中开启一些选项时，React Native可以做到保存后自动更新，摆脱耗时巨长的编译过程。<br>还可以在Chrome中获取调试信息，这使排除异常的过程更加轻松。</p>
<p>React Native具有自动更新的能力。前一阵子苹果警告了一些使用热更新的应用，不用担心，这并不是针对React Native，那些被警告的<br>应用使用了有害的API，而React Native热更新是从网络获取JS bundle，不会影响安全性。</p>
<p>虽然React Native很棒，但是有些事情还是要知道的。</p>
<p>1.React Native抛弃了HTML，所以需要使用一种叫做JSX的东西，如果觉得有些畏惧，那么请放心，JSX还是很易于掌握的。</p>
<p>2.React Native并非万能，有些事情它不能做到。举个栗子，如果我想做一个桌面小部件，那么我在这个时候就需要一些原生知识了。</p>
<p>3.React Native不能完全取代原生应用，它们之间应当是相辅相成的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;React-Native介绍&quot;&gt;&lt;a href=&quot;#React-Native介绍&quot; class=&quot;headerlink&quot; title=&quot;React Native介绍&quot;&gt;&lt;/a&gt;React Native介绍&lt;/h1&gt;&lt;p&gt;虽然，你可能已经对React Native有一定的了解了，但是按照惯例，还是要简单介绍一下。&lt;/p&gt;
&lt;p&gt;React是由Facebook的工程师们在2013年开源的一款前端框架，现在已成为最火热的前端框架之一。&lt;br&gt;React Native则是使用React来开发移动应用的方式。&lt;br&gt;
    
    </summary>
    
    
      <category term="ReactNative" scheme="http://xj8c.cc/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>我的实习记录</title>
    <link href="http://xj8c.cc/2017/06/01/my-internship-record/"/>
    <id>http://xj8c.cc/2017/06/01/my-internship-record/</id>
    <published>2017-05-31T16:00:00.000Z</published>
    <updated>2017-07-19T08:58:43.383Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2017年7月"><a href="#2017年7月" class="headerlink" title="2017年7月"></a>2017年7月</h3><p>1、签订劳动合同，转正，实习期结束</p>
<p>2、React-Native 学习研究</p>
<h3 id="2017年6月19日星期一-—-2017年6月23日星期五"><a href="#2017年6月19日星期一-—-2017年6月23日星期五" class="headerlink" title="2017年6月19日星期一 — 2017年6月23日星期五"></a>2017年6月19日星期一 — 2017年6月23日星期五</h3><p>1、重装系统/开发环境</p>
<p>2、动态表单设计开发完成</p>
<p>3、请假两天回武汉领毕业证、办理党员组织关系手续</p>
<p>4、表单Bootstrap美化<br><a id="more"></a></p>
<h3 id="2017年6月5日星期三-—-2017年6月9日星期五"><a href="#2017年6月5日星期三-—-2017年6月9日星期五" class="headerlink" title="2017年6月5日星期三 — 2017年6月9日星期五"></a>2017年6月5日星期三 — 2017年6月9日星期五</h3><p>1、AC项目上线前的数据增量整理导出导入，Bug修改，业务功能刚改等</p>
<p>2、动态报名表单实现 可创建表单，将创建的表单解析成html，根据创建的表单进行报名登记数据</p>
<p>3、因公司内部原因，居家办公一周，6月15日恢复公司上班</p>
<h3 id="2017年5月31日星期三-—-2017年6月2日星五"><a href="#2017年5月31日星期三-—-2017年6月2日星五" class="headerlink" title="2017年5月31日星期三 — 2017年6月2日星五"></a>2017年5月31日星期三 — 2017年6月2日星五</h3><p>1、动态表单研究</p>
<p>2、微信编辑器修改出版</p>
<p>3、AC项目需求更改，写业务代码</p>
<h3 id="2017年5月22日星期一-—-2017年5月27日星期六"><a href="#2017年5月22日星期一-—-2017年5月27日星期六" class="headerlink" title="2017年5月22日星期一 — 2017年5月27日星期六"></a>2017年5月22日星期一 — 2017年5月27日星期六</h3><p>1、仿活动行表单自定义设计器-简版</p>
<p>2、AC项目遗漏问题解决</p>
<p>3、服务器折腾、Hexo+Github折腾</p>
<h3 id="2017年5月15日星期四-—-2017年5月19日星期五"><a href="#2017年5月15日星期四-—-2017年5月19日星期五" class="headerlink" title="2017年5月15日星期四 — 2017年5月19日星期五"></a>2017年5月15日星期四 — 2017年5月19日星期五</h3><p>1、AC bug修复、需求更改 上线</p>
<p>2、微信编辑器研究，demo</p>
<p>3、自我学习</p>
<h3 id="2017年4月29日星期六-—-2017年5月3日星期三休假"><a href="#2017年4月29日星期六-—-2017年5月3日星期三休假" class="headerlink" title="2017年4月29日星期六 — 2017年5月3日星期三休假"></a>2017年4月29日星期六 — 2017年5月3日星期三休假</h3><h3 id="2017年5月4日星期四-—-2017年5月12日星期五"><a href="#2017年5月4日星期四-—-2017年5月12日星期五" class="headerlink" title="2017年5月4日星期四 — 2017年5月12日星期五"></a>2017年5月4日星期四 — 2017年5月12日星期五</h3><p>AC汽车项目需求变更，第二版改版</p>
<h3 id="2017年4月24日星期一-—-2017年4月28日星期五"><a href="#2017年4月24日星期一-—-2017年4月28日星期五" class="headerlink" title="2017年4月24日星期一 — 2017年4月28日星期五"></a>2017年4月24日星期一 — 2017年4月28日星期五</h3><p>1、AC汽车项目bug修改</p>
<p>2、WordPress数据导出、XML处理、导入数据至sqlserver</p>
<p>3、AC汽车项目第一版完成，需求更改，确定需求，五一放假之后具体实施</p>
<p>4、微信商城相关项目被打回，bug很多，功能没完成、重做重改</p>
<h3 id="2017年4月17日星期一-—-2017年4月23日星期天"><a href="#2017年4月17日星期一-—-2017年4月23日星期天" class="headerlink" title="2017年4月17日星期一 — 2017年4月23日星期天"></a>2017年4月17日星期一 — 2017年4月23日星期天</h3><p>1、AC汽车项目开发，我主要负责前台，由另一名同事负责后台</p>
<p>2、终端连锁、EMBA、门店托管、产业研究院、论坛活动、盈利商家、咨询、调研、专栏、作者……</p>
<p>3、19,20,21号晚上加班至9点+、22,23号周末全天加班完成全部开发工作</p>
<p>4、终端连锁：按公司名称搜索、按公司首字母筛选搜索、首次加载10条信息，点击加载更多、详情内容页面</p>
<p>5、门店托管：首次加载5条信息，点击加载更多、是否接手判断、详情内容页面</p>
<p>6、论坛活动：首次加载5条信息，点击加载更多、内容详情页面、依据开始时间结束时间判断活动状态(已开始、已结束、还剩多少天开始)</p>
<p>7、盈利商家：首次加载12条信息，点击加载更多、内容详情页面、合作状态、按类型分类搜索</p>
<p>8、商家入驻、我要联系、我要报名、我要接手、我要合作、发布项目的表单提交</p>
<p>9、调研，专栏，作者：依据现有项目进行二次修改，分类显示不同的页面，调研话题的显示、作者列表、属于作者的文章列表……</p>
<p>9、banner轮播图，上一页，下一页、新浪腾讯微博分享、微信二维码、返回顶部、全站伪静态……</p>
<p>10、耗时的功能点：json数据时间格式转换问题、时间的计算问题(临界值)、表单验证提示(SMValidator)、分类搜索功能</p>
<h3 id="2017年4月5日星期三-—-2017年4月7日星期五请假回校答辩"><a href="#2017年4月5日星期三-—-2017年4月7日星期五请假回校答辩" class="headerlink" title="2017年4月5日星期三 — 2017年4月7日星期五请假回校答辩"></a>2017年4月5日星期三 — 2017年4月7日星期五请假回校答辩</h3><h3 id="2017年4月10日星期一-—-2017年4月14日星期五"><a href="#2017年4月10日星期一-—-2017年4月14日星期五" class="headerlink" title="2017年4月10日星期一 — 2017年4月14日星期五"></a>2017年4月10日星期一 — 2017年4月14日星期五</h3><p>1、微信商城购买页调整，可在后台设置是否允许开发票，如果订单只含有不可开发票商品，”我要发票”不显示，增加前后收货地址、Email、后台收货地址修改功能，增加显示开发票的金额，购买前必须注册，如果商品为虚拟物品，详情页给出提示：”本商品为虚拟商品，一经售出，概不退换。”</p>
<p>2、AC汽车项目需求更改，数据库创建，开发准备工作</p>
<p>3、<a href="http://api.xj8c.cc/articles" target="_blank" rel="external">当然我在瞎扯</a>API接口开发</p>
<h3 id="2017年3月27日星期一-—-2017年4月1日星期六"><a href="#2017年3月27日星期一-—-2017年4月1日星期六" class="headerlink" title="2017年3月27日星期一 — 2017年4月1日星期六"></a>2017年3月27日星期一 — 2017年4月1日星期六</h3><p>1、微信商城虚拟物品交付邮件查收打开监控</p>
<p>2、微信商城虚拟物品交付下载地址点击监控</p>
<p>3、程序处理两张图片叠加在一起</p>
<p>4、资讯站采埃孚ZF技术专栏信息展示</p>
<p>5、新闻发布关键发布和定时发布为空验证检查</p>
<p>6、AC汽车项目产品开发会议，需求讲解</p>
<p>7、AC汽车项目开发计划表，4-5天，一个工作日完成</p>
<p>8、AC汽车项目数据库 Table Schema、document created</p>
<p>9、微信商城发送邮件切换至商用系统(Webpower)</p>
<p>10、Web Service 使用学习、接口调用</p>
<h3 id="2017年3月22日星期三-—-2017年3月24日星期五"><a href="#2017年3月22日星期三-—-2017年3月24日星期五" class="headerlink" title="2017年3月22日星期三 — 2017年3月24日星期五"></a>2017年3月22日星期三 — 2017年3月24日星期五</h3><p>1、入职培训</p>
<p>2、DotNetFrame框架搭建</p>
<p>3、自己学习</p>
<p>4、入职培训考试 - 92</p>
<h3 id="2017年3月21日星期二"><a href="#2017年3月21日星期二" class="headerlink" title="2017年3月21日星期二"></a>2017年3月21日星期二</h3><p>1、文章关键词报表查询及导出</p>
<p>2、GasgooNewsAuto 资讯站遗漏专题页</p>
<h3 id="2017年3月20日星期一"><a href="#2017年3月20日星期一" class="headerlink" title="2017年3月20日星期一"></a>2017年3月20日星期一</h3><p>1、电脑中毒，系统重装</p>
<p>2、微信商城项目首页样式更改，热门商品全部显示</p>
<h3 id="2017年3月17日星期五"><a href="#2017年3月17日星期五" class="headerlink" title="2017年3月17日星期五"></a>2017年3月17日星期五</h3><p>1、资讯站发布新闻分类默认选中功能</p>
<p>2、微信商城维护加载优化</p>
<h3 id="2017年3月16日星期四"><a href="#2017年3月16日星期四" class="headerlink" title="2017年3月16日星期四"></a>2017年3月16日星期四</h3><p>自我学习看框架源码</p>
<h3 id="2017年3月15日星期三"><a href="#2017年3月15日星期三" class="headerlink" title="2017年3月15日星期三"></a>2017年3月15日星期三</h3><p>1、索喜专题企业聚焦图片轮播</p>
<p>2、文档转换(word，txt)为PDF</p>
<h3 id="2017年3月14日星期二"><a href="#2017年3月14日星期二" class="headerlink" title="2017年3月14日星期二"></a>2017年3月14日星期二</h3><p>1、UEditor编辑器图片等比例缩放定制功能 √</p>
<p>2、UEditor编辑器插入视频在线预览</p>
<h3 id="2017年3月13日星期一"><a href="#2017年3月13日星期一" class="headerlink" title="2017年3月13日星期一"></a>2017年3月13日星期一</h3><p>1、ASP.NET MVC</p>
<p>2、UEditor编辑器图片等比例缩放功能</p>
<p>3、UEditor编辑器上传视频多终端显示</p>
<h3 id="2017年3月10日星期五"><a href="#2017年3月10日星期五" class="headerlink" title="2017年3月10日星期五"></a>2017年3月10日星期五</h3><p>1、PC版快速专题 上下翻页状态修复 √</p>
<p>2、商城项目图片处理、优化 √</p>
<p>3、每周例会，项目汇报/ReactJS技术分享 √</p>
<h3 id="2017年3月9日星期四"><a href="#2017年3月9日星期四" class="headerlink" title="2017年3月9日星期四"></a>2017年3月9日星期四</h3><p>1、PC版快速专题链接增加 √</p>
<p>2、商城项目图片处理</p>
<h3 id="2017年3月8日星期三"><a href="#2017年3月8日星期三" class="headerlink" title="2017年3月8日星期三"></a>2017年3月8日星期三</h3><p>1、PC版快速专题 √</p>
<p>2、li多列图片上下页功能 jQuery分页插件jPages</p>
<h3 id="2017年3月7日星期二"><a href="#2017年3月7日星期二" class="headerlink" title="2017年3月7日星期二"></a>2017年3月7日星期二</h3><p>1、资讯运营报表 √</p>
<p>2、Vue.js</p>
<p>3、PC版专题页</p>
<h3 id="2017年3月6日星期一"><a href="#2017年3月6日星期一" class="headerlink" title="2017年3月6日星期一"></a>2017年3月6日星期一</h3><p>1、资讯站头尾部链接添加</p>
<p>2、报表查询及导出</p>
<h3 id="2017年3月3日星期五"><a href="#2017年3月3日星期五" class="headerlink" title="2017年3月3日星期五"></a>2017年3月3日星期五</h3><p>1、二维码的显示与隐藏</p>
<p>2、本地加入图片随机展示</p>
<p>3、会议项目汇报，微信小程序技术分享，每周例会主题技术分享</p>
<p>4、Ueditor 上传图片等比例缩放</p>
<h3 id="2017年3月2日星期四"><a href="#2017年3月2日星期四" class="headerlink" title="2017年3月2日星期四"></a>2017年3月2日星期四</h3><p>1、WEB API访问数据库，json接口 √</p>
<p>2、.NET WEB API跨域方法配置 √</p>
<p>3、ajax跨域解析，随机展示图片 √</p>
<h3 id="2017年3月1日星期三"><a href="#2017年3月1日星期三" class="headerlink" title="2017年3月1日星期三"></a>2017年3月1日星期三</h3><p>1、原生js实现随机显示图片</p>
<p>2、WEB API</p>
<h3 id="2017年2月28日星期二"><a href="#2017年2月28日星期二" class="headerlink" title="2017年2月28日星期二"></a>2017年2月28日星期二</h3><p>1、提交实现发送邮件功能</p>
<p>2、高峰论坛移动端专题 签入到SVN</p>
<p>3、jQuery与javascript代码互转示例</p>
<h3 id="2017年2月27日星期一"><a href="#2017年2月27日星期一" class="headerlink" title="2017年2月27日星期一"></a>2017年2月27日星期一</h3><p>1、正式入职上海盖世网络技术有限公司</p>
<p>2、开发环境配置</p>
<p>3、页面查看更多/收起功能</p>
<hr>
<h3 id="2017年2月10日星期五"><a href="#2017年2月10日星期五" class="headerlink" title="2017年2月10日星期五"></a>2017年2月10日星期五</h3><p>提辞职申请，项目整理，第一家实习公司生涯结束</p>
<h3 id="2017年2月9日星期四"><a href="#2017年2月9日星期四" class="headerlink" title="2017年2月9日星期四"></a>2017年2月9日星期四</h3><p>原生js+css3实现下拉刷新效果</p>
<h3 id="2017年2月8日星期三-请病假1天"><a href="#2017年2月8日星期三-请病假1天" class="headerlink" title="2017年2月8日星期三 - 请病假1天"></a>2017年2月8日星期三 - 请病假1天</h3><h3 id="2017年2月7日星期二"><a href="#2017年2月7日星期二" class="headerlink" title="2017年2月7日星期二"></a>2017年2月7日星期二</h3><p>自我学习，聚餐，简历更新，着手离职</p>
<h3 id="2017年2月6日星期一"><a href="#2017年2月6日星期一" class="headerlink" title="2017年2月6日星期一"></a>2017年2月6日星期一</h3><p>1、开年第一天上班，例会</p>
<p>2、电脑出问题，重装系统，配置开发环境</p>
<p>3、同事离职，项目交接整理</p>
<h3 id="2017年1月22日星期日"><a href="#2017年1月22日星期日" class="headerlink" title="2017年1月22日星期日"></a>2017年1月22日星期日</h3><p>最后一天上班，我要回家过年了</p>
<h3 id="2017年1月21日星期六"><a href="#2017年1月21日星期六" class="headerlink" title="2017年1月21日星期六"></a>2017年1月21日星期六</h3><p>江汉区交通大队网站年前最终版本发布</p>
<h3 id="2017年1月20日星期五"><a href="#2017年1月20日星期五" class="headerlink" title="2017年1月20日星期五"></a>2017年1月20日星期五</h3><p>前往总公司吃年饭领红包</p>
<h3 id="2017年1月19日星期四"><a href="#2017年1月19日星期四" class="headerlink" title="2017年1月19日星期四"></a>2017年1月19日星期四</h3><p>江汉区交通大队网站页面修改、IE提示</p>
<h3 id="2017年1月18日星期三"><a href="#2017年1月18日星期三" class="headerlink" title="2017年1月18日星期三"></a>2017年1月18日星期三</h3><p>江汉区交通大队网站线上测试、改Bug，外出部署项目</p>
<h3 id="2017年1月17日星期二"><a href="#2017年1月17日星期二" class="headerlink" title="2017年1月17日星期二"></a>2017年1月17日星期二</h3><p>江汉区交通大队网站开发完成，数据填充，线上发布</p>
<h3 id="2017年1月16日星期一"><a href="#2017年1月16日星期一" class="headerlink" title="2017年1月16日星期一"></a>2017年1月16日星期一</h3><p>江汉区交通大队网站用户签收通知、整合项目</p>
<h3 id="2017年1月13日星期五"><a href="#2017年1月13日星期五" class="headerlink" title="2017年1月13日星期五"></a>2017年1月13日星期五</h3><p>江汉区交通大队网站后台每日值班、签收用户增删改查登录功能完成</p>
<h3 id="2017年1月12日星期四"><a href="#2017年1月12日星期四" class="headerlink" title="2017年1月12日星期四"></a>2017年1月12日星期四</h3><p>江汉区交通大队网站后台三层框架、后台登录、签收弹窗、每日值班模块完成</p>
<h3 id="2017年1月11日星期三"><a href="#2017年1月11日星期三" class="headerlink" title="2017年1月11日星期三"></a>2017年1月11日星期三</h3><p>江汉区交通大队第二版网站党建、新闻、政务、大队长信箱模块完成</p>
<h3 id="2017年1月10日星期二"><a href="#2017年1月10日星期二" class="headerlink" title="2017年1月10日星期二"></a>2017年1月10日星期二</h3><p>1、麦都网站bug修改</p>
<p>2、江汉区交通大队第二版网站首页完成</p>
<h3 id="2017年1月9日星期一"><a href="#2017年1月9日星期一" class="headerlink" title="2017年1月9日星期一"></a>2017年1月9日星期一</h3><p>1、麦都网站bug修改</p>
<p>2、网站维护</p>
<h3 id="2017年1月6日星期五"><a href="#2017年1月6日星期五" class="headerlink" title="2017年1月6日星期五"></a>2017年1月6日星期五</h3><p>1、麦都网站前后台全部完成、发布线上测试</p>
<p>2、至科cktit.com域名接入备案</p>
<h3 id="2017年1月5日星期四"><a href="#2017年1月5日星期四" class="headerlink" title="2017年1月5日星期四"></a>2017年1月5日星期四</h3><p>1、麦都网站后台课程介绍模块全部完成</p>
<p>2、URL重写实现前台伪静态化</p>
<h3 id="2017年1月4日星期三"><a href="#2017年1月4日星期三" class="headerlink" title="2017年1月4日星期三"></a>2017年1月4日星期三</h3><p>1、麦都网站后台多层项目搭建，后台整体框架、登录模块、课程介绍</p>
<p>2、购买域名cktit.com相关</p>
<p>3、<a href="http://www.jianshu.com/p/e709942f145c" target="_blank" rel="external">2016年年终总结</a></p>
<p>4、至科人员检测资格查询系统后台二维码信息修改</p>
<h3 id="2017年1月3日星期二"><a href="#2017年1月3日星期二" class="headerlink" title="2017年1月3日星期二"></a>2017年1月3日星期二</h3><p>麦都网站前端页面(自适应PC及手机)全部完成</p>
<h3 id="2016年12月30日星期五"><a href="#2016年12月30日星期五" class="headerlink" title="2016年12月30日星期五"></a>2016年12月30日星期五</h3><p>麦都网站课程介绍、师资力量、考试资讯完成</p>
<h3 id="2016年12月29日星期四"><a href="#2016年12月29日星期四" class="headerlink" title="2016年12月29日星期四"></a>2016年12月29日星期四</h3><p>麦都网站前台首页、关于我们完成</p>
<h3 id="2016年12月28日星期三"><a href="#2016年12月28日星期三" class="headerlink" title="2016年12月28日星期三"></a>2016年12月28日星期三</h3><p>麦都网站前台首页 头部导航、轮播图、简介、讲师、课程介绍栏目</p>
<h3 id="2016年12月27日星期二"><a href="#2016年12月27日星期二" class="headerlink" title="2016年12月27日星期二"></a>2016年12月27日星期二</h3><p>1、响应式导航</p>
<p>2、麦都网站前台响应式布局解决方案</p>
<p>3、Bootstrap栅格化布局</p>
<h3 id="2016年12月26日星期一"><a href="#2016年12月26日星期一" class="headerlink" title="2016年12月26日星期一"></a>2016年12月26日星期一</h3><p>1、Sass CSS预处理器</p>
<p>2、Linq…</p>
<h3 id="2016年12月23日星期五"><a href="#2016年12月23日星期五" class="headerlink" title="2016年12月23日星期五"></a>2016年12月23日星期五</h3><p>1、Linq To SQL</p>
<p>2、NoSql、MongoDB数据库基础</p>
<h3 id="2016年12月22日星期四"><a href="#2016年12月22日星期四" class="headerlink" title="2016年12月22日星期四"></a>2016年12月22日星期四</h3><p>1、Google Code Prettify 代码高亮使用</p>
<p>2、ASP.NET MVC5官方教程(中文版).pdf(看完)</p>
<p>3、深入理解Bootstrap</p>
<h3 id="2016年12月21日星期三"><a href="#2016年12月21日星期三" class="headerlink" title="2016年12月21日星期三"></a>2016年12月21日星期三</h3><p>1、ASP.NET MVC5(7层架构) 注册、登录、注销、修改密码功能实现</p>
<p>2、Entity Framework6 Code First 相关</p>
<h3 id="2016年12月20日星期二"><a href="#2016年12月20日星期二" class="headerlink" title="2016年12月20日星期二"></a>2016年12月20日星期二</h3><p>MVC5 &amp;&amp; EF6</p>
<h3 id="2016年12月19日星期一"><a href="#2016年12月19日星期一" class="headerlink" title="2016年12月19日星期一"></a>2016年12月19日星期一</h3><p>1、试验室信息管理系统修改意见、PPT</p>
<p>2、ASP.NET MVC 实例学习</p>
<h3 id="2016年12月16日星期五"><a href="#2016年12月16日星期五" class="headerlink" title="2016年12月16日星期五"></a>2016年12月16日星期五</h3><p>1、至科人员检测资格查询系统添加返回和打印按钮</p>
<p>2、ASP.NET Razor语法</p>
<h3 id="2016年12月15日星期四"><a href="#2016年12月15日星期四" class="headerlink" title="2016年12月15日星期四"></a>2016年12月15日星期四</h3><p>1、江汉区交警大队网站前台全部完成</p>
<h3 id="2016年12月14日星期三"><a href="#2016年12月14日星期三" class="headerlink" title="2016年12月14日星期三"></a>2016年12月14日星期三</h3><p>1、江汉区交警大队网站旧版后台代码修改</p>
<p>2、江汉区交警大队网站新版前台代码政务、服务、关于三个页面完成</p>
<h3 id="2016年12月13日星期二"><a href="#2016年12月13日星期二" class="headerlink" title="2016年12月13日星期二"></a>2016年12月13日星期二</h3><p>江汉区交警大队网站前台代码首页和新闻页面完成</p>
<h3 id="2016年12月12日星期一"><a href="#2016年12月12日星期一" class="headerlink" title="2016年12月12日星期一"></a>2016年12月12日星期一</h3><p>1、PDF《CSS揭秘》研读</p>
<p>2、江汉区交警大队网站前台代码</p>
<h3 id="2016年12月9日星期五"><a href="#2016年12月9日星期五" class="headerlink" title="2016年12月9日星期五"></a>2016年12月9日星期五</h3><p>1、Asp.Net 缓存、本地化和全球化、监控和诊断、单元测试、测试驱动开发TDD、配置与部署</p>
<p>2、将博CMS</p>
<p>3、HTTPS网站加密</p>
<p>4、CSS三栏布局</p>
<h3 id="2016年12月8日星期四"><a href="#2016年12月8日星期四" class="headerlink" title="2016年12月8日星期四"></a>2016年12月8日星期四</h3><p>1、江汉区交警大队网站功能修改</p>
<p>2、<a href="https://xj8c.cc">瞎JB扯</a>文章详情页面接入百度分享并支持https、自动获取文章内容添加到关键字及描述</p>
<h3 id="2016年12月7日星期三"><a href="#2016年12月7日星期三" class="headerlink" title="2016年12月7日星期三"></a>2016年12月7日星期三</h3><p>1、前往武汉江汉区交警大队出差,项目部署,需求,改版方案…</p>
<h3 id="2016年12月6日星期二"><a href="#2016年12月6日星期二" class="headerlink" title="2016年12月6日星期二"></a>2016年12月6日星期二</h3><p>1、江汉区交警大队网站每日值班功能完成</p>
<p>2、留言功能实现</p>
<p>3、首页漂浮窗</p>
<h3 id="2016年12月5日星期一"><a href="#2016年12月5日星期一" class="headerlink" title="2016年12月5日星期一"></a>2016年12月5日星期一</h3><p>1、<a href="http://zktit.com/" target="_blank" rel="external">至科</a>网站导航修改兼容IE9+</p>
<p>2、Entity Framework模式、ASP.NET MVC Ajax/分页/认证与授权</p>
<h3 id="2016年12月2日星期五"><a href="#2016年12月2日星期五" class="headerlink" title="2016年12月2日星期五"></a>2016年12月2日星期五</h3><p>1、网站在线打包成App平台</p>
<p>2、C#的匿名函数</p>
<p>3、江汉区交警大队网站内容以及页面修改</p>
<p>4、网站漂浮窗实现</p>
<h3 id="2016年12月1日星期四"><a href="#2016年12月1日星期四" class="headerlink" title="2016年12月1日星期四"></a>2016年12月1日星期四</h3><p>1、C#的Attribute</p>
<p>2、C#的预处理指令</p>
<p>3、C#的反射机制</p>
<p>4、C#的正则表达式</p>
<h3 id="2016年11月30日星期三"><a href="#2016年11月30日星期三" class="headerlink" title="2016年11月30日星期三"></a>2016年11月30日星期三</h3><p>1、C#文件读写操作 IO</p>
<p>2、C#委托 Delegate</p>
<p>3、C#异常处理 ExceptionHandle</p>
<p>4、C#事件处理机制 Event</p>
<p>5、C#索引器 Indexer</p>
<p>6、C#泛型 Generic</p>
<p>7、ASP.NET MVC Introduce</p>
<h3 id="2016年11月29日星期二"><a href="#2016年11月29日星期二" class="headerlink" title="2016年11月29日星期二"></a>2016年11月29日星期二</h3><p>1、Asp.Net MVC学习</p>
<p>2、<a href="http://zktit.com/" target="_blank" rel="external">武汉至科检测技术有限公司网站</a>、<a href="http://www.dfjssj.com/" target="_blank" rel="external">武汉东方建设集团建筑设计院网站</a>、武汉至科检测技术有限公司论坛 3个网站功能清单整理</p>
<h3 id="2016年11月28日星期一"><a href="#2016年11月28日星期一" class="headerlink" title="2016年11月28日星期一"></a>2016年11月28日星期一</h3><p>1、<a href="http://meowv.com" target="_blank" rel="external">喵呜网</a> 站点搬家</p>
<ol>
<li>备份MySQL数据库</li>
<li>打包整个站点代码文件,通过FTP工具将其下载至本地</li>
<li>修改配置文件</li>
<li>上传至新服务器,导入MySQL数据库</li>
<li>解析IP地址,刷新本地DNS缓存</li>
<li>访问成功,搬家完成</li>
</ol>
<p>2、中电云集-云主机助手 工具</p>
<p>3、Bootstrap Application</p>
<p>4、CSS绝对底部方案</p>
<h3 id="2016年11月25日星期五"><a href="#2016年11月25日星期五" class="headerlink" title="2016年11月25日星期五"></a>2016年11月25日星期五</h3><p>1、npm包管理工具</p>
<p>2、Markdown语法</p>
<h3 id="2016年11月24日星期四"><a href="#2016年11月24日星期四" class="headerlink" title="2016年11月24日星期四"></a>2016年11月24日星期四</h3><p>1、图片裁剪生成不同尺寸</p>
<p>2、全屏背景轮播循环案例</p>
<p>3、检测资格查询系统信息上传</p>
<h3 id="2016年11月23日星期三"><a href="#2016年11月23日星期三" class="headerlink" title="2016年11月23日星期三"></a>2016年11月23日星期三</h3><p>1、SAE Sina</p>
<p>2、C# ConsoleApplication 2048</p>
<h3 id="2016年11月22日星期二"><a href="#2016年11月22日星期二" class="headerlink" title="2016年11月22日星期二"></a>2016年11月22日星期二</h3><p>1、HTML5</p>
<p>2、至科网站导入报告、页面改写维护</p>
<p>3、借助Flash完成图片批量上传</p>
<h3 id="2016年11月21日星期一"><a href="#2016年11月21日星期一" class="headerlink" title="2016年11月21日星期一"></a>2016年11月21日星期一</h3><p>1、Github项目整理、静态资源上传</p>
<p>2、Bolg更新</p>
<p>3、前端插件学习以及整理</p>
<h3 id="2016年11月18日星期五"><a href="#2016年11月18日星期五" class="headerlink" title="2016年11月18日星期五"></a>2016年11月18日星期五</h3><p>1、Layui 文档学习、Demo练习</p>
<p>2、至科网站报告添加跟踪维护、技术指导</p>
<p>3、本地在线学习/网校搭建</p>
<h3 id="2016年11月17日星期四"><a href="#2016年11月17日星期四" class="headerlink" title="2016年11月17日星期四"></a>2016年11月17日星期四</h3><p>1、json序列化、反序列化</p>
<p>2、在线搭建网校的方案</p>
<p>3、JSHelper运用</p>
<h3 id="2016年11月16日星期三"><a href="#2016年11月16日星期三" class="headerlink" title="2016年11月16日星期三"></a>2016年11月16日星期三</h3><p>1、Git命令学习</p>
<p>2、网站Rewrite防盗链配置文件</p>
<p>3、至科网站报告查询更新至线上</p>
<p>4、本地网校平台搭建解决方案</p>
<h3 id="2016年11月15日星期二"><a href="#2016年11月15日星期二" class="headerlink" title="2016年11月15日星期二"></a>2016年11月15日星期二</h3><p>1、自制html源码查看工具</p>
<p>2、VUE.JS、Jquery文字提示插件</p>
<p>3、Git命令学习</p>
<p>4、看书jQuery开发从入门到精通</p>
<h3 id="2016年11月14日星期一"><a href="#2016年11月14日星期一" class="headerlink" title="2016年11月14日星期一"></a>2016年11月14日星期一</h3><p>1、集团网站logo修改</p>
<p>2、优仕德网站footer修改</p>
<p>3、自适应全屏banner Demo</p>
<h3 id="2016年11月11日星期五"><a href="#2016年11月11日星期五" class="headerlink" title="2016年11月11日星期五"></a>2016年11月11日星期五</h3><p>1、在线学习平台搭建解决方案</p>
<p>2、武汉东方建设集团网站维护修改</p>
<h3 id="2016年11月10日星期四"><a href="#2016年11月10日星期四" class="headerlink" title="2016年11月10日星期四"></a>2016年11月10日星期四</h3><p>1、Excel数据导入SQLServer完成</p>
<p>2、报告查询码提取器小工具</p>
<h3 id="2016年11月9日星期三"><a href="#2016年11月9日星期三" class="headerlink" title="2016年11月9日星期三"></a>2016年11月9日星期三</h3><p>1、HTML5 Canvas</p>
<p>2、Excel数据导入SQLServer</p>
<p>3、上传报告页面代码编写</p>
<h3 id="2016年11月8日星期二"><a href="#2016年11月8日星期二" class="headerlink" title="2016年11月8日星期二"></a>2016年11月8日星期二</h3><p>1、Lims框架</p>
<p>2、至科报告添加</p>
<p>3、HTML5 localStorage 本地存储与读取</p>
<p>4、有关二级域名的知识学习以及全站https加密处理等</p>
<h3 id="2016年11月7日星期一"><a href="#2016年11月7日星期一" class="headerlink" title="2016年11月7日星期一"></a>2016年11月7日星期一</h3><p>1、七牛云存储SDK</p>
<p>2、C#上传图片至七牛云</p>
<h3 id="2016年11月4日星期五"><a href="#2016年11月4日星期五" class="headerlink" title="2016年11月4日星期五"></a>2016年11月4日星期五</h3><p>1、登陆页面重写、优化</p>
<p>2、框架搭建</p>
<h3 id="2016年11月3日星期四"><a href="#2016年11月3日星期四" class="headerlink" title="2016年11月3日星期四"></a>2016年11月3日星期四</h3><p>1、url重写研究,页面伪静态技术</p>
<p>2、Vue.js学习</p>
<h3 id="2016年11月2日星期三"><a href="#2016年11月2日星期三" class="headerlink" title="2016年11月2日星期三"></a>2016年11月2日星期三</h3><p>1、 Liger UI API</p>
<p>2、代码发布，上传上线</p>
<p>3、JS算法案例学习</p>
<p>4、C#后台代码优化功能点实现</p>
<h3 id="2016年11月1日星期二"><a href="#2016年11月1日星期二" class="headerlink" title="2016年11月1日星期二"></a>2016年11月1日星期二</h3><p>1、 Liger UI API</p>
<p>2、NextEasy .net快速开发平台</p>
<p>3、一般处理程序</p>
<h3 id="2016年10月31日星期一"><a href="#2016年10月31日星期一" class="headerlink" title="2016年10月31日星期一"></a>2016年10月31日星期一</h3><p>1、 Liger UI框架搭建修改</p>
<p>2、 Asp.net URL重写</p>
<p>3、一般处理程序+html+ajax</p>
<h3 id="2016年10月28日星期五"><a href="#2016年10月28日星期五" class="headerlink" title="2016年10月28日星期五"></a>2016年10月28日星期五</h3><p>1、jQuery Liger UI框架</p>
<p>2、Bootstrap</p>
<p>3、Webqic快速开发平台</p>
<h3 id="2016年10月27日星期四"><a href="#2016年10月27日星期四" class="headerlink" title="2016年10月27日星期四"></a>2016年10月27日星期四</h3><p>1、jQuery学习、案例代码编写</p>
<p>2、RoadFlow框架修改</p>
<p>3、jQuery Liger UI API、Demo学习</p>
<p>4、jQuery Liger UI框架搭建</p>
<h3 id="2016年10月26日星期三"><a href="#2016年10月26日星期三" class="headerlink" title="2016年10月26日星期三"></a>2016年10月26日星期三</h3><p>1、权限管理框架申请及其查看</p>
<p>2、Sina SAE</p>
<p>3、.Net多图上传案例</p>
<p>4、源码学习</p>
<h3 id="2016年10月25日星期二—科目四考试-结束驾考生涯，驾驶证到手"><a href="#2016年10月25日星期二—科目四考试-结束驾考生涯，驾驶证到手" class="headerlink" title="2016年10月25日星期二—科目四考试(结束驾考生涯，驾驶证到手)"></a>2016年10月25日星期二—科目四考试(结束驾考生涯，驾驶证到手)</h3><h3 id="2016年10月24日星期一"><a href="#2016年10月24日星期一" class="headerlink" title="2016年10月24日星期一"></a>2016年10月24日星期一</h3><p>1、搭建在线慕课平台框架选择和方案的整理</p>
<p>2、权限管理框架</p>
<p>3、FineUI 通用权限管理框架（AppBoxPro）</p>
<p>4、FuneUI ASP.NET 控件库 Demo</p>
<h3 id="2016年10月21日星期五"><a href="#2016年10月21日星期五" class="headerlink" title="2016年10月21日星期五"></a>2016年10月21日星期五</h3><p>1、优仕德交互效果修改</p>
<p>2、整合代码，转移至新服务器</p>
<p>3、H+后台UI框架</p>
<h3 id="2016年10月20日星期四"><a href="#2016年10月20日星期四" class="headerlink" title="2016年10月20日星期四"></a>2016年10月20日星期四</h3><p>1、后台UI</p>
<p>2、Sina SAE</p>
<p>3、优仕德项目</p>
<p>4、jquery实例运用</p>
<p>5、前端知识点总结</p>
<h3 id="2016年10月19日星期三"><a href="#2016年10月19日星期三" class="headerlink" title="2016年10月19日星期三"></a>2016年10月19日星期三</h3><p>1、360等国产浏览器兼容性</p>
<p>2、优仕德项目导航显示效果js修改、页面修改、搜索框百度搜索js</p>
<p>3、githup学习</p>
<h3 id="2016年10月18日星期二"><a href="#2016年10月18日星期二" class="headerlink" title="2016年10月18日星期二"></a>2016年10月18日星期二</h3><p>1、至科检测接入加密UKID登录</p>
<p>2、Bug修改</p>
<h3 id="2016年10月17日星期一"><a href="#2016年10月17日星期一" class="headerlink" title="2016年10月17日星期一"></a>2016年10月17日星期一</h3><p>1、至科检测工作流登录页面3种方案</p>
<p>2、优仕德Bug修改</p>
<h3 id="2016年10月14日星期五"><a href="#2016年10月14日星期五" class="headerlink" title="2016年10月14日星期五"></a>2016年10月14日星期五</h3><p>1、文件断点续传技术</p>
<p>2、至科人员检测Bug修改、页面重写、兼容主流浏览器</p>
<p>3、优仕德教育项目Bug修改、页面调整维护</p>
<p>4、Hexo+GitHub学习研究</p>
<p>5、IE不支持placeholder属性的解决方案研究</p>
<p>6、Validator、jquery全选/反选 Demo</p>
<h3 id="2016年10月13日星期四—考试科目三"><a href="#2016年10月13日星期四—考试科目三" class="headerlink" title="2016年10月13日星期四—考试科目三"></a>2016年10月13日星期四—考试科目三</h3><h3 id="2016年10月12日星期三"><a href="#2016年10月12日星期三" class="headerlink" title="2016年10月12日星期三"></a>2016年10月12日星期三</h3><p>1、优仕德项目招考信息列表详情页</p>
<p>2、优仕德项目分页PageHelper</p>
<h3 id="2016年10月11日星期二"><a href="#2016年10月11日星期二" class="headerlink" title="2016年10月11日星期二"></a>2016年10月11日星期二</h3><p>1、Html、css编码规范html页面编写</p>
<p>2、Webservice</p>
<p>3、Html全屏背景自适应效果demo</p>
<p>4、优仕德项目后台详情页面</p>
<h3 id="2016年10月10日星期一"><a href="#2016年10月10日星期一" class="headerlink" title="2016年10月10日星期一"></a>2016年10月10日星期一</h3><p>1、培训机构HTML代码 全部完成</p>
<p>2、项目发布</p>
<h3 id="2016年10月9日星期日"><a href="#2016年10月9日星期日" class="headerlink" title="2016年10月9日星期日"></a>2016年10月9日星期日</h3><p>培训机构HTML代码完成90%</p>
<h3 id="2016年10月8日星期六"><a href="#2016年10月8日星期六" class="headerlink" title="2016年10月8日星期六"></a>2016年10月8日星期六</h3><p>1、发布至科监测类项目简报网站至服务器</p>
<p>2、至科报告协助上传、维护</p>
<p>3、培训机构HTML代码</p>
<h3 id="2016年9月30日星期五"><a href="#2016年9月30日星期五" class="headerlink" title="2016年9月30日星期五"></a>2016年9月30日星期五</h3><p>1、微信公众号处理</p>
<p>2、地图标注</p>
<p>3、网页结构分析、代码编写</p>
<h3 id="2016年9月29日星期四"><a href="#2016年9月29日星期四" class="headerlink" title="2016年9月29日星期四"></a>2016年9月29日星期四</h3><p>1、百度地图标注接入数据库、本地查询案例</p>
<p>2、微信公众号</p>
<p>3、至科网站维护小Bug修改</p>
<h3 id="2016年9月28日星期三"><a href="#2016年9月28日星期三" class="headerlink" title="2016年9月28日星期三"></a>2016年9月28日星期三</h3><p>1、百度地图自定义标注研究</p>
<p>2、结合数据库动态添加标注案例</p>
<p>3、动态解析数组学习</p>
<h3 id="2016年9月27日星期二"><a href="#2016年9月27日星期二" class="headerlink" title="2016年9月27日星期二"></a>2016年9月27日星期二</h3><p>1、地图标注研究以及案例</p>
<p>2、至科报告查询代添加</p>
<h3 id="2016年9月26日星期一"><a href="#2016年9月26日星期一" class="headerlink" title="2016年9月26日星期一"></a>2016年9月26日星期一</h3><p>1、至科微信公众号菜单添加</p>
<p>2、后台UI框架</p>
<h3 id="2016年9月23日星期五"><a href="#2016年9月23日星期五" class="headerlink" title="2016年9月23日星期五"></a>2016年9月23日星期五</h3><p>1、ASPOSE.WORD 操作Word Demo</p>
<p>2、PHP基础语法学习</p>
<p>3、微信公众号开发学习</p>
<p>4、文档，文件，项目整理</p>
<h3 id="2016年9月22日星期四"><a href="#2016年9月22日星期四" class="headerlink" title="2016年9月22日星期四"></a>2016年9月22日星期四</h3><p>1、WeX5 App 打包</p>
<p>2、Oracle 基础学习</p>
<p>3、.Net 奇淫巧技</p>
<h3 id="2016年9月21日星期三"><a href="#2016年9月21日星期三" class="headerlink" title="2016年9月21日星期三"></a>2016年9月21日星期三</h3><p>1、WeX5 Baas.Net环境部署完成</p>
<p>2、Base.Net后端开发学习</p>
<p>3、研究微信公众号开发</p>
<p>4、 微擎平台搭建学习</p>
<h3 id="2016年9月20日星期二"><a href="#2016年9月20日星期二" class="headerlink" title="2016年9月20日星期二"></a>2016年9月20日星期二</h3><p>1、WeX5 hybrid APP开发学习</p>
<p>2、WeX5 Baas.Net环境部署，需要VS2015最新版本</p>
<p>3、本地应用打包学习、观看WeX5 在线学习文档</p>
<p>4、2048 APP案例</p>
<h3 id="2016年9月19日星期一"><a href="#2016年9月19日星期一" class="headerlink" title="2016年9月19日星期一"></a>2016年9月19日星期一</h3><p>1、WebAPP学习</p>
<p>2、移动端框架jquery.mobil</p>
<p>3、网站维护</p>
<p>4、WebAPP 火车票查询案例</p>
<h3 id="2016年9月18日星期日"><a href="#2016年9月18日星期日" class="headerlink" title="2016年9月18日星期日"></a>2016年9月18日星期日</h3><p>1、上线集团网站</p>
<p>2、至科网站维护</p>
<h3 id="2016年9月5日—2016年9月14日请假练车考试科目二"><a href="#2016年9月5日—2016年9月14日请假练车考试科目二" class="headerlink" title="2016年9月5日—2016年9月14日请假练车考试科目二"></a>2016年9月5日—2016年9月14日请假练车考试科目二</h3><h3 id="2016年9月2日星期五"><a href="#2016年9月2日星期五" class="headerlink" title="2016年9月2日星期五"></a>2016年9月2日星期五</h3><p>1、源码整理归档，数据库备份</p>
<p>2、Asp.Net Mvc学习</p>
<h3 id="2016年9月1日星期四"><a href="#2016年9月1日星期四" class="headerlink" title="2016年9月1日星期四"></a>2016年9月1日星期四</h3><p>1、Asp.Net MVC 学习</p>
<p>2、电子宣传册在线制作</p>
<h3 id="2016年8月31日星期三"><a href="#2016年8月31日星期三" class="headerlink" title="2016年8月31日星期三"></a>2016年8月31日星期三</h3><p>1、电子宣传册</p>
<p>2、集团网站Bug修改、维护</p>
<p>3、Entity Framework学习、EF三层搭建，增删改查案例</p>
<h3 id="2016年8月30日星期二"><a href="#2016年8月30日星期二" class="headerlink" title="2016年8月30日星期二"></a>2016年8月30日星期二</h3><p>1、WebApp方案</p>
<p>2、WeX5开源移动开发框架</p>
<p>3、Entity Framework了解学习</p>
<h3 id="2016年8月29日星期一"><a href="#2016年8月29日星期一" class="headerlink" title="2016年8月29日星期一"></a>2016年8月29日星期一</h3><p>1、电子宣传册</p>
<p>2、网站维护</p>
<p>3、ASP.NET MVC学习</p>
<h3 id="2016年8月26日星期五"><a href="#2016年8月26日星期五" class="headerlink" title="2016年8月26日星期五"></a>2016年8月26日星期五</h3><p>1、Hadoop核心架构研究抄录</p>
<p>2、C#语法糖(自动属性、隐式类型、匿名类型、Lambad表达式…)</p>
<p>3、C#，T4模板学习</p>
<h3 id="2016年8月25日星期四"><a href="#2016年8月25日星期四" class="headerlink" title="2016年8月25日星期四"></a>2016年8月25日星期四</h3><p>1、集团网站维护、时间修改</p>
<p>2、至科网站维护、文字修改</p>
<p>3、电子宣传册</p>
<h3 id="2016年8月24日星期三"><a href="#2016年8月24日星期三" class="headerlink" title="2016年8月24日星期三"></a>2016年8月24日星期三</h3><p>1、检测单位上岗人员检测资格查询系统完善</p>
<p>2、Node.js</p>
<p>3、集团网站新闻时间修改、维护</p>
<h3 id="2016年8月23日星期二"><a href="#2016年8月23日星期二" class="headerlink" title="2016年8月23日星期二"></a>2016年8月23日星期二</h3><p>1、继续集团网站备案</p>
<p>2、QR-Code二维码生成</p>
<p>3、至科检测资格信息管理系统</p>
<p>4、工作室网站美化调整</p>
<h3 id="2016年8月22日星期一"><a href="#2016年8月22日星期一" class="headerlink" title="2016年8月22日星期一"></a>2016年8月22日星期一</h3><p>1、至科网站导航检测报告真伪查询修改</p>
<p>2、检测人员资格查询后台界面修改调整</p>
<p>3、短信验证提交容联审核通过，根据审核通过模板Id修改短信验证，现都可查询</p>
<p>4、添加无验证查询页面用于二维码扫描查询</p>
<p>5、集团网站接入阿里云备案</p>
<h3 id="2016年8月19日星期五"><a href="#2016年8月19日星期五" class="headerlink" title="2016年8月19日星期五"></a>2016年8月19日星期五</h3><p>1、集团网站、设计院网站、至科网站维护</p>
<p>2、至科检测人员资格信息管理系统</p>
<p>3、.Net Ajax应用与学习</p>
<h3 id="2016年8月18日星期四"><a href="#2016年8月18日星期四" class="headerlink" title="2016年8月18日星期四"></a>2016年8月18日星期四</h3><p>1、设计院网站Bug修改，信息替换，导航调整，招聘英才列表显示调整</p>
<p>2、至科网站Bug修改，热点检测项目滚动特效，图片修改，添加试验室信息管理系统链接，查询系统下报告查询添加验证码限制查询功能</p>
<p>3、至科检测人员资格信息管理系统页面修改，增加图片验证码限制功能</p>
<h3 id="2016年8月17日星期三"><a href="#2016年8月17日星期三" class="headerlink" title="2016年8月17日星期三"></a>2016年8月17日星期三</h3><p>1、至科人员资格查询系统上线</p>
<p>2、至科、设计院、路博特网站更新需求、Bug修改</p>
<p>3、至科、设计院网站后台增加上传新闻图片功能</p>
<p>4、极验验证码</p>
<h3 id="2016年8月16日星期二"><a href="#2016年8月16日星期二" class="headerlink" title="2016年8月16日星期二"></a>2016年8月16日星期二</h3><p>1、至科检测资格信息查询系统本地发布进行后台测试</p>
<p>2、检测资格查询系统Bug修改</p>
<p>3、H5 &amp; CSS3 实战书看完</p>
<h3 id="2016年8月15日星期一"><a href="#2016年8月15日星期一" class="headerlink" title="2016年8月15日星期一"></a>2016年8月15日星期一</h3><p>1、至科检测资格信息查询系统静态页面完成</p>
<p>2、表单验证js完成</p>
<p>3、后台用户查询登录三层代码完成</p>
<p>4、登录页面保存用户信息至数据库完成</p>
<p>5、手机验证码发送并校验完成</p>
<p>6、点击弹窗显示和关闭</p>
<p>7、修改路博特页面文字错误</p>
<p>8、美化至科检测资格信息查询系统后台</p>
<p>9、至科检测资格信息查询系统前后台完成，可接入容联短信平台进入测试阶段</p>
<h3 id="2016年8月12日星期五"><a href="#2016年8月12日星期五" class="headerlink" title="2016年8月12日星期五"></a>2016年8月12日星期五</h3><p>1、学习node.js</p>
<p>2、至科、集团、路博特网站代码修改整理</p>
<p>3、转达任务至团队人员，转发邮件</p>
<p>4、上传代码，上线网站</p>
<p>5、至科资格检测信息管理系统对接</p>
<h3 id="2016年8月8日—2016年8月11日请假回家休息"><a href="#2016年8月8日—2016年8月11日请假回家休息" class="headerlink" title="2016年8月8日—2016年8月11日请假回家休息"></a>2016年8月8日—2016年8月11日请假回家休息</h3><h3 id="第十六周总结"><a href="#第十六周总结" class="headerlink" title="第十六周总结"></a>第十六周总结</h3><p>本周完成工作</p>
<p>1.集团网站Bug修改</p>
<p>2.路博特网站框架、数据库搭建</p>
<p>3.三层代码以及解决方案模块</p>
<p>4.容联短信验证接口代码实现、文档说明</p>
<p>5.各个版本代码整理、备份管理…</p>
<p>本周工作总结</p>
<p>本周主要完成了集团网站的Bug修改，经过测试之手，网站存在很多Bug，都是在开发过程中疏忽的。软件测试这个环节在软件行业中是至关重要的，很多人认为软件开发中贡献最大的人是开发人员，这个观点不能否认，但是软件测试人员也扮演着非常重要的角色。经此次开发过程遇到的一些问题，学到了不少经验。在填充数据的时候遇到一个SQL错误，.Net SqlClient Data Provider，经过查阅资料，分析原因，最后得以解决并且进行记录(SQL错误：.Net SqlClient Data Provider)…</p>
<p>下周工作计划</p>
<p>下周请假，回家好好休息，上班后好好工作。</p>
<h3 id="2016年8月5日星期五"><a href="#2016年8月5日星期五" class="headerlink" title="2016年8月5日星期五"></a>2016年8月5日星期五</h3><p>1.集团网站后台公益事业、活动剪辑详情页面</p>
<p>2.容联短信验证接口代码实现、文档说明</p>
<p>3.事业单位等培训机构网站</p>
<p>4.路博特网站交接、后台页面图标logo、链接更换</p>
<p>5.集团网站Bug修改完毕</p>
<p>6.至科、集团网站源码发送</p>
<h3 id="2016年8月4日星期四"><a href="#2016年8月4日星期四" class="headerlink" title="2016年8月4日星期四"></a>2016年8月4日星期四</h3><p>1.容联短信接口文档学习</p>
<p>2.Demo,暂时只可以实现接收收短信，未进行验证。</p>
<p>2.集团网站Bug修改</p>
<h3 id="2016年8月3日星期三"><a href="#2016年8月3日星期三" class="headerlink" title="2016年8月3日星期三"></a>2016年8月3日星期三</h3><p>1.集团网站Bug修改</p>
<p>2.Lbt网站3层代码完成</p>
<p>3.后台解决方案模块完成</p>
<h3 id="2016年8月2日星期二"><a href="#2016年8月2日星期二" class="headerlink" title="2016年8月2日星期二"></a>2016年8月2日星期二</h3><p>1、集团网站Bug修改</p>
<p>2、Lbt网站简介模块完成</p>
<p>3、各种琐事…</p>
<h3 id="2016年8月1日星期一"><a href="#2016年8月1日星期一" class="headerlink" title="2016年8月1日星期一"></a>2016年8月1日星期一</h3><p>1、集团网站完成</p>
<p>2、上传Lims管理系统</p>
<p>3、Lucene.Net+盘古分词学习</p>
<p>4、Lbt数据库</p>
<p>5、Model代码</p>
<h3 id="第十五周总结"><a href="#第十五周总结" class="headerlink" title="第十五周总结"></a>第十五周总结</h3><p>本周完成工作</p>
<p>1.集团网站后台功能已全部实现</p>
<p>2.前台数据绑定完成90%左右</p>
<p>本周工作总结</p>
<p>集团网站从前台到后台，收获颇多。</p>
<p>本周开始着手写集团网站后台代码，因为是自己写的前台页面，所以对整个页面的架构是一目了然的。</p>
<p>首先根据前台页面创建了网站数据库。让后利用代码生成器生成网站Model层代码，对于代码生成的好处就是可以减轻工作量，因为网站涉及到30来个数据表，如果是手写Model层代码会耗费大量的时间。</p>
<p>根据生成的Model层代码手写Dal与Bll层增删改查的代码。这个耗费了我大量的时间。可以说在三成架构中，网站的Dal层其实就是网站的灵魂，所有的增删改查分页查询等等都离不开Dal层。</p>
<p>分页用的存储过程，存储过程的好处有很多，运行速度快，可以接收参数、输出参数、返回单个值或者多个结果集以及返回值。这样网站相对来说会比较稳定。</p>
<p>然后在后台开发中，用到了多图上传，因为之前没有做过，便在网上学习了一下多图上传的案例，总的来说我有两种解决方案，一种是多图上传的插件，这个比较强大，学习了一下弄懂了其原理，另外一种便是循环上传图片，因为多图上传还是需要一张一张的上传，这个比较简单，由于时间和效率的原因，我采用了循环上传。</p>
<p>最后一个便是缩略图生成，这个在网上找的现成的生成缩略图的一个方法，看了一下代码，可以高按照度或者宽度的比例来生成对应的缩略图，而且也不会对图片造成变形。直接调用，在前台资质资格、集团荣誉、领导关怀三个模块用上了。</p>
<p>一个工作日的时间，完成了集团网站后台所用逻辑代码，以及前台90%的数据绑定。</p>
<p>下周工作计划</p>
<p>1.网站数据添加完毕</p>
<p>2.交由测试人员进行测试</p>
<p>3.配合测试人员进行Bug修改</p>
<p>4.完善手头上的工作，休假一星期</p>
<h3 id="2016年7月29日星期五"><a href="#2016年7月29日星期五" class="headerlink" title="2016年7月29日星期五"></a>2016年7月29日星期五</h3><p>1.工程业绩模块</p>
<p>① 竣工工程 - 增删改查、分页列表、分类查询、前台数据绑定</p>
<p>② 在建工程 - 增删改查、分页列表、分类查询、前台数据绑定</p>
<p>③ 设计工程 - 增删改查、分页列表、前台数据绑定</p>
<p>2.企业文化模块</p>
<p>① 公益事业 - 增删改查、多图上传、前台数据绑定、轮播显示</p>
<p>② 活动剪辑 - 增删改查、多图上传、前台数据绑定、轮播显示</p>
<p>3.联系我们 - 全部完成</p>
<p>4.友情链接 - 全部完成</p>
<p>5.后台首页 - 文字更换、logo修改、页面修改美化优化</p>
<p>6.后台修改密码功能完成</p>
<p>7.后台整体页面搭建完成</p>
<p>8.前台数据绑定完成</p>
<h3 id="2016年7月28日星期四"><a href="#2016年7月28日星期四" class="headerlink" title="2016年7月28日星期四"></a>2016年7月28日星期四</h3><p>1.集团网站工程业绩模块</p>
<p>① 竣工工程后台增删改查，图片上传，列表显示，分类查询</p>
<p>② 在建工程后台增删改查，图片上传，列表显示，分类查询</p>
<p>③ 设计工程后台增删改查，图片上传，列表显示</p>
<p>2.集团网站企业文化模块</p>
<p>① 公益事业后台增删改查，多图上传并显示</p>
<p>② 活动剪辑页面添加完成</p>
<h3 id="2016年7月27日星期三"><a href="#2016年7月27日星期三" class="headerlink" title="2016年7月27日星期三"></a>2016年7月27日星期三</h3><p>1.集团网站联系我们模块</p>
<p>① 在线留言完成</p>
<p>② 联系方式(站点信息)完成</p>
<p>2.友情链接前台数据绑定</p>
<p>3.学习多图上传，实时预览代码</p>
<h3 id="2016年7月26日星期二"><a href="#2016年7月26日星期二" class="headerlink" title="2016年7月26日星期二"></a>2016年7月26日星期二</h3><p>1.友情链接模块增删改查</p>
<p>2.企业文化模块</p>
<p>① 企业理念Update</p>
<p>② 党团建设增删改查</p>
<p>3.人力资源模块</p>
<p>① 简历投递上传下载</p>
<p>② 学习平台增删改查</p>
<p>4.联系我们页面搭建完毕</p>
<h3 id="2016年7月25日星期一"><a href="#2016年7月25日星期一" class="headerlink" title="2016年7月25日星期一"></a>2016年7月25日星期一</h3><p>一、集团网站</p>
<p>1.新闻中心模块</p>
<p>添加、后台列表展示、删除、分页查询、分类型查询完成</p>
<p>2.科技创新模块</p>
<p>① 技术中心、科研领域修改功能完成</p>
<p>② 科技成果添加、后台展示、删除、分页查询、分类型查询完成</p>
<p>3.人力资源模块</p>
<p>① 人才战略修改功能完成</p>
<p>② 人才聚集添加、后台带缩略图展示、删除、分页查询完成</p>
<p>③ 人才招聘添加、后台展示、删除、分页查询完成</p>
<p>二、至科网站</p>
<p>1.整理上线所缺数据文档</p>
<p>2.修改至科网站Logo及导航菜单颜色</p>
<p>三、路博特网站</p>
<p>1.路博特主机域名绑定</p>
<p>2.上线路博特静态页面网站</p>
<h3 id="第十四周总结"><a href="#第十四周总结" class="headerlink" title="第十四周总结"></a>第十四周总结</h3><p>本周完成工作</p>
<p>1.至科网站上线工作(代码整理、数据填充…)完成</p>
<p>2.路博特网站所有HTML静态页面完成</p>
<p>3.路博特网站后台数据库搭建完成</p>
<p>4.路博特网站后台3层框架代码搭建完成</p>
<p>5.<a href="http://www.lubok.cn" target="_blank" rel="external">路博特</a> 网站域名备案成功</p>
<p>6.集团网站所有HTML静态页面完成</p>
<p>7.集团网站项目计划流程图</p>
<p>8.集团网站后台数据库搭建完成</p>
<p>9.集团网站后台登录模块、关于集团模块完成</p>
<p>本周工作总结</p>
<p>本周在三个网站之间来回切换，至科网站上线工作完成，只差备案成功，上传代码，算是告一段落。</p>
<p>公司内部网站改版，独立完成了PC版及手机自适应版静态页面路博特网站，一并完成后台数据库的搭建及网站3层框架的搭建。</p>
<p>主要时间还是花在集团网站上，集团网站页面众多，虽说有部分重复页面，但是也还是达到了36个页面。花费了我很多时间来完成，美工多次外出办公回来传达需求，修修改改终于在周四完成了所有页面，然后马不停蹄创建数据库，搭建后台框架进行项目计划安排分析。现已经完成登录模块、关于集团模块的后台代码。</p>
<p>下周工作计划</p>
<p>1.全身心投入到集团网站后台开发当中去，按计划表进行开发，在周末之前完成所有后台逻辑代码</p>
<p>2.配合完成至科网站上线及备案工作…</p>
<h3 id="2016年7月22日星期五"><a href="#2016年7月22日星期五" class="headerlink" title="2016年7月22日星期五"></a>2016年7月22日星期五</h3><p>集团网站后台</p>
<p>1、Model层所有代码完成</p>
<p>2、登录模块完成</p>
<p>关于集团模块</p>
<p>1、集团简介、董事长致辞、组织结构三大模块Update完成</p>
<p>2、资格资质、集团荣誉、领导关怀，标题，多图上传，列表展示，存储过程分页查询完成</p>
<p>新闻中心模块—新闻中心模块界面搭建完成，数据访问层(Dal)代码完成</p>
<h3 id="2016年7月21日星期四"><a href="#2016年7月21日星期四" class="headerlink" title="2016年7月21日星期四"></a>2016年7月21日星期四</h3><p>1、Lbt网站数据库搭建完毕</p>
<p>2、Lbt网站三层框架搭建</p>
<p>3、集团网站项目计划图</p>
<p>4、集团网站数据库搭建完毕</p>
<p>5、集团网站三层框架搭建</p>
<p>6、集团网站后台页面框架搭建</p>
<h3 id="2016年7月20日星期三"><a href="#2016年7月20日星期三" class="headerlink" title="2016年7月20日星期三"></a>2016年7月20日星期三</h3><p>1、集团网站静态页面全部完成</p>
<p>① 领导关怀页面完成</p>
<p>② 技术中心页面完成</p>
<p>③ 活动剪辑详情页完成</p>
<p>④ 公益事业、公益事业详情页完成</p>
<p>⑤ 科研领域完成</p>
<p>⑥ 简历投递完成</p>
<p>⑦ 学习平台、学习平台详情页完成</p>
<p>2、集团网站后台数据库搭建</p>
<h3 id="2016年7月19日星期二"><a href="#2016年7月19日星期二" class="headerlink" title="2016年7月19日星期二"></a>2016年7月19日星期二</h3><p>1、集团网站修改添加页面</p>
<p>① 工法标准改为工法，增加技术规章类型</p>
<p>② 水利建设工程改为园林绿化</p>
<p>③ 工程业绩模块增加设计工程页面</p>
<p>④ 工地整理工程改为土地整理工程</p>
<p>⑤ 后台数据库搭建</p>
<p>2、<a href="http://www.lubok.cn" target="_blank" rel="external">路博特</a> 网站域名备案成功，新增<a href="http://dfjssj.com" target="_blank" rel="external">设计院</a> 网站打印核验单初审通过，待邮寄核验单。</p>
<h3 id="2016年7月18日星期一"><a href="#2016年7月18日星期一" class="headerlink" title="2016年7月18日星期一"></a>2016年7月18日星期一</h3><p>1、至科网站上线数据填充</p>
<p>2、集团网站页面添加和修改</p>
<p>3、分配至科网站数据填充任务给ZouXueXia</p>
<p>4、jquery插件学习及使用</p>
<h3 id="第十三周总结"><a href="#第十三周总结" class="headerlink" title="第十三周总结"></a>第十三周总结</h3><p>本周有事请假了一天，首先这一周完成了路博特静态网站，PC版和手机版自适应页面</p>
<p>路博特网站备案告一段落，静等管局审核完成</p>
<p>着手至科网站上线任务，修改了至科网站的一些bug和新增了一些功能(登录UKID验证)</p>
<p>集团为网站因需求而进行修改压面，添加页面</p>
<p>计划下周将至科网站上线全部完成，开始集团网站前后台和路博特网站后台代码编写</p>
<h3 id="2016年7月15日星期五"><a href="#2016年7月15日星期五" class="headerlink" title="2016年7月15日星期五"></a>2016年7月15日星期五</h3><p>请假一天…</p>
<h3 id="2016年7月14日星期四"><a href="#2016年7月14日星期四" class="headerlink" title="2016年7月14日星期四"></a>2016年7月14日星期四</h3><p>1、完善路博特网站页面</p>
<p>2、路博特数据库搭建</p>
<p>3、至科网站：新闻中心-至科空间模块完成</p>
<p>4、至科网站：服务项目模块修订整改</p>
<p>5、后台测试数据删除，数据库测试数据清空</p>
<p>6、整合至科网站源码、部署版代码，随时可以上线</p>
<p>7、集团网站：人力资源-添加人才聚集模块、首页-banner图更换…</p>
<h3 id="2016年7月13日星期三"><a href="#2016年7月13日星期三" class="headerlink" title="2016年7月13日星期三"></a>2016年7月13日星期三</h3><p>1、路博特网站静态页面全部完成</p>
<p>2、至科网站页面信息修改</p>
<p>3、至科后台登录加入UKID数据验证</p>
<p>4、最新版至科网站发布与上传</p>
<h3 id="2016年7月12日星期二"><a href="#2016年7月12日星期二" class="headerlink" title="2016年7月12日星期二"></a>2016年7月12日星期二</h3><p>路博特网站</p>
<p>首页、走进路博特、解决方案、解决方案详情页、新闻资讯、加入我们、联系我们-页面完成</p>
<p>新闻资讯详情页，无样式模板</p>
<p>产品与解决方案公用一个页面。暂时没有多余的项目，建议导航目前只放一个解决方案，产品保留，需要的时候可以加上。</p>
<h3 id="2016年7月11日星期一"><a href="#2016年7月11日星期一" class="headerlink" title="2016年7月11日星期一"></a>2016年7月11日星期一</h3><p>1、提交备案信息(管局审核中)，等待审核结果</p>
<p>2、学习Node.js</p>
<p>3、整理有关OA、CRM、ERP…解决方案的展示文字</p>
<p>4、整理路博特网站相关资料</p>
<h3 id="第十二周总结"><a href="#第十二周总结" class="headerlink" title="第十二周总结"></a>第十二周总结</h3><p>这周完成了公司集团网站的所有静态页面，这是我在公司做的第三个项目了。感觉好累，现在有点力不从心，没有刚开始的激情了。</p>
<p>大夏天，好友同学们都回家避暑去了，然而我已经很早就没有暑假可言了。</p>
<p>马上出来实习就三个月了，好想回家，从过年到现在都没有回过家，想回去看看。</p>
<h3 id="2016年7月8日星期五"><a href="#2016年7月8日星期五" class="headerlink" title="2016年7月8日星期五"></a>2016年7月8日星期五</h3><p>1、教育局Js代码加密</p>
<p>2、Node.js学习</p>
<p>3、集团网站导航修改</p>
<h3 id="2016年7月7日星期四"><a href="#2016年7月7日星期四" class="headerlink" title="2016年7月7日星期四"></a>2016年7月7日星期四</h3><p>1、打印网站备案核验单</p>
<p>2、修改集团网站静态页面</p>
<p>① 工程业绩模块：竣工工程、在建工程修改为图文展示样式</p>
<p>② 工程业绩详情页</p>
<p>3、网站所有信息及联系方式修改</p>
<p>4、数据库：(用户、新闻中心、新闻类型、工程业绩、业绩类型、联系我们-在线留言、联系我们-联系方式）表创建</p>
<h3 id="2016年7月6日星期三"><a href="#2016年7月6日星期三" class="headerlink" title="2016年7月6日星期三"></a>2016年7月6日星期三</h3><p>湖北武汉，暴雨，休息一天</p>
<h3 id="2016年7月5日星期二"><a href="#2016年7月5日星期二" class="headerlink" title="2016年7月5日星期二"></a>2016年7月5日星期二</h3><p>1、集团网站静态页面全部完成</p>
<p>2、放弃之前路博特域名，进行新网站备案</p>
<p>3、网站备案，核减单待打印上传</p>
<p>4、集团网站需修改部分信息</p>
<h3 id="2016年7月4日星期一"><a href="#2016年7月4日星期一" class="headerlink" title="2016年7月4日星期一"></a>2016年7月4日星期一</h3><p>1、集团网站 - html页面</p>
<p>① 新闻中心模块完成</p>
<p>② 科技创新模块完成</p>
<p>③ 人力资源模块完成</p>
<p>④ 企业文化模块完成</p>
<p>⑤ 联系我们模块完成</p>
<p>2、集团网站页面美化</p>
<h3 id="第十一周总结"><a href="#第十一周总结" class="headerlink" title="第十一周总结"></a>第十一周总结</h3><p>本月工作内容</p>
<p>1、设计院网站</p>
<p>2、至科网站</p>
<p>3、集团网站</p>
<p>4、路博特网站</p>
<p>5、有关域名备案等相关工作</p>
<p>本月工作总结</p>
<p>1、设计院网站两个版本的前台页面</p>
<p>2、分工合作，完成设计院数据库设计，后台代码编写</p>
<p>3、至科网站前台页面</p>
<p>4、至科网站后台代码编写</p>
<p>5、经测试修改两个网站存在的Bug，达到可以上线的版本</p>
<p>6、正在进行集团网站前台页面的代码编写</p>
<p>7、域名备案等工作</p>
<p>8、工作需求中的自我学习(Asp.Net存储过程、JS各种动画效果、H5+CSS3全新前端代码、寻找论坛BBS源码、Asp.Net富文本框使用案例)</p>
<p>下月工作计划</p>
<p>1、集团网站前端页面</p>
<p>2、集团网站后台代码</p>
<p>3、路博特网站前端页面</p>
<p>4、路博特网站后台代码</p>
<p>5、工作中的其它任务</p>
<p>6、自我学习</p>
<p>4月份来公司，至今也已两个多月了。</p>
<p>马上就是3个月了，学到了很多，也领悟了很多。</p>
<p>7月份想要请假休息几天回家一趟，感觉有点疲惫。</p>
<h3 id="2016年7月1日星期五"><a href="#2016年7月1日星期五" class="headerlink" title="2016年7月1日星期五"></a>2016年7月1日星期五</h3><p>1、集团网站首页全部完成</p>
<p>2、关于集团模块(集团简介、董事长致辞、组织结构、资质资格、集团荣誉、领导关怀页面)完成</p>
<p>3、工程业绩页面(竣工工程模块)</p>
<p>4、提交工信部域名注销备案申请</p>
<h3 id="2016年6月30日星期四"><a href="#2016年6月30日星期四" class="headerlink" title="2016年6月30日星期四"></a>2016年6月30日星期四</h3><p>1、集团网站首页</p>
<p>2、域名注册证书</p>
<h3 id="2016年6月29日星期三"><a href="#2016年6月29日星期三" class="headerlink" title="2016年6月29日星期三"></a>2016年6月29日星期三</h3><p>1、跟进花生壳域名过户，填写过户原因</p>
<p>2、修改至科网站导航样式、联系我们页面</p>
<p>3、JS速度动画、透明度动画、缓冲动画、多物体动画、链式动画、同事运动案例，万能运动框架编写</p>
<p>4、集团网站首页代码编写</p>
<h3 id="2016年6月28日星期二"><a href="#2016年6月28日星期二" class="headerlink" title="2016年6月28日星期二"></a>2016年6月28日星期二</h3><p>1、联系花生壳办理域名过户…</p>
<p>2、查看，对比后，提供企业邮箱的两种方案</p>
<p>3、寻找Asp.Net版BBS源码</p>
<h3 id="2016年6月27日星期一"><a href="#2016年6月27日星期一" class="headerlink" title="2016年6月27日星期一"></a>2016年6月27日星期一</h3><p>1、修改设计院和至科两个网站的bug</p>
<p>2、JS划入划出特效学习</p>
<h3 id="第十周总结"><a href="#第十周总结" class="headerlink" title="第十周总结"></a>第十周总结</h3><p>本周完成工作</p>
<p>1、两个网站的bug修改</p>
<p>2、至科网站的后台编码，前台数据绑定，功能模块全部完成</p>
<p>3、提交了设计院网站的最终版本</p>
<p>4、报告查询模块查询报告</p>
<p>5、整合了至科网站最终版本含源码版和部署版</p>
<p>本周达到了预期结果：</p>
<p>1、设计院的网站告一段落，全部完成</p>
<p>2、至科网站前后台全部完成，经测试修改整合也已完成改版</p>
<p>正在进行中的事情：</p>
<p>1、路博特网站</p>
<p>2、<a href="http://www.whdfjs.com/" target="_blank" rel="external">集团网站</a></p>
<p>下周工作计划</p>
<p>1、编写集团网站静态页面</p>
<p>2、后台管理系统</p>
<p>3、路博特网站</p>
<h3 id="2016年6月24日星期五"><a href="#2016年6月24日星期五" class="headerlink" title="2016年6月24日星期五"></a>2016年6月24日星期五</h3><p>1、安排今日任务</p>
<p>① ChenXia：集团网站设计、以第一版为主</p>
<p>② ZouXueXia：设计院网站和至科网站总体测试</p>
<p>③ PengYun：路博特网站前台/后台(从后台开始)</p>
<p>④ MySelf：集团网站前台页面HTML代码，跟进设计，提出建议，修改方案</p>
<p>2、分享完整的富文本框编辑器Demo</p>
<p>3、整理总结文件上传与下载的功能知识点</p>
<p>4、整合至科网站最终版本含源码版和部署版</p>
<p>5、Web前端css工作流，代码技巧，语法糖学习</p>
<p>6、集团网站首页头部logo、右侧搜索、导航栏</p>
<h3 id="2016年6月23日星期四"><a href="#2016年6月23日星期四" class="headerlink" title="2016年6月23日星期四"></a>2016年6月23日星期四</h3><p>1、修改至科测试所提交的Bug</p>
<p>2、发布最新版本提供测试人员进行反测</p>
<p>3、反测bug修改，测试完成，发布服务器，至科网站到达一个节点</p>
<p>4、修复文件下载模块，文件下载无法打开问题。</p>
<h3 id="2016年6月22日星期三"><a href="#2016年6月22日星期三" class="headerlink" title="2016年6月22日星期三"></a>2016年6月22日星期三</h3><p>1、协助网站备案，邮寄核验单</p>
<p>2、整合设计院网站最终版本含源码版和部署版</p>
<p>3、修改至科网站测试所存在的bug</p>
<p>4、更改至科网站所有时间统一为年月日形式</p>
<p>5、报告查询中修改报告信息时显示所有信息</p>
<p>6、报告查询添加日志管理模块，协同完成</p>
<h3 id="2016年6月21日星期二"><a href="#2016年6月21日星期二" class="headerlink" title="2016年6月21日星期二"></a>2016年6月21日星期二</h3><p>1、报告查询之增加查询码功能模块</p>
<p>① 增加查询码字段，修改3层数据</p>
<p>② 完成带有查询码功能的增删改查</p>
<p>③ 依据报告编号使用不可逆算法MD5加密截取其中5位字符串保存至数据库</p>
<p>④ 前台报告查询功能初步实现</p>
<p>2、至科网站整体调试修改，总体功能需求全部实现</p>
<p>3、部署至科网站提交给测试人员进行测试</p>
<p>4、设计院网站域名备案信息等若干问题</p>
<h3 id="2016年6月20日星期一"><a href="#2016年6月20日星期一" class="headerlink" title="2016年6月20日星期一"></a>2016年6月20日星期一</h3><p>1、申诉路博特域名账号密码相关信息，找出问题所在</p>
<p>2、联系花生壳官方客服，找到修改账号密码解决办法</p>
<p>3、至科网站任务规划</p>
<p>4、至科网站后台报告查询模块增删改查</p>
<p>5、至科网站前后报告查询模块查询功能</p>
<p>① 依据报告编号精确查询</p>
<p>② 为空提示</p>
<p>③ 不存在给出提示</p>
<p>④ 正确显示查询信息</p>
<p>⑤ 依据后台填写报告内容，填多少信息，查出来就是多少信息</p>
<p>6、接收路博特设计网页设计方案，分析效果，实现难度，不合理之处…</p>
<p>7、至科后台部分修改</p>
<p>① 友情链接模块修改</p>
<p>② 所有页面防止不登录直接访问</p>
<h3 id="第九周总结"><a href="#第九周总结" class="headerlink" title="第九周总结"></a>第九周总结</h3><p>写总结，坚持的也有两个月了，收货颇多。</p>
<p>这周同学聚餐了，喝的酩酊大醉，还记得大一那会，懵懵懂懂，一转眼大学都已经快要结束了。</p>
<p>这周写了美工设计的所有psd页面，写完前端继续协助做后端。改了测试给的上个网站的bug。希望在下周完结手头上的所有事。因为报考了驾校一直没时间去练车，准备在忙完手上的项目请假一个星期回学校去练车，一直拖下去也不是办法。</p>
<p>今天父亲节，突然想家了，半年多了还没回去过，等待下一个小长假，我想回家看看。</p>
<p>…不想写了，烦！</p>
<h3 id="2016年6月17日星期五"><a href="#2016年6月17日星期五" class="headerlink" title="2016年6月17日星期五"></a>2016年6月17日星期五</h3><p>1、至科网站页面修改，添加新功能</p>
<p>2、后台主页添加时钟</p>
<p>3、修改密码功能</p>
<p>4、后台查询报告模块</p>
<p>5、动态添加检测参数信息</p>
<p>6、查询报告模块添加功能</p>
<p>7、至科待办事项分配</p>
<h3 id="2016年6月16日星期四"><a href="#2016年6月16日星期四" class="headerlink" title="2016年6月16日星期四"></a>2016年6月16日星期四</h3><p>1、查看提交的测试缺陷报告</p>
<p>2、分析缺陷报告中的bug</p>
<p>3、修改设计院网站bug及规避bug</p>
<p>4、合并整合至科网站代码</p>
<p>5、报告查询页面</p>
<p>6、报告查询表数据库设计</p>
<p>7、数据字典整理</p>
<p>8、至科后台图片替换，页面添加修改美化</p>
<h3 id="2016年6月15日星期三"><a href="#2016年6月15日星期三" class="headerlink" title="2016年6月15日星期三"></a>2016年6月15日星期三</h3><p>1、装系统</p>
<p>2、搭建论坛</p>
<p>3、创建设计院网站下载中心、友情链接两个表</p>
<p>4、根据需求手写model、dal、bll三层代码</p>
<p>5、完成后台下载中心之上传文件功能</p>
<p>6、后台下载中心文件管理功能</p>
<p>7、文件信息列表分页、删除功能</p>
<p>8、前台所有页面转换为aspx页面</p>
<h3 id="2016年6月14日星期二"><a href="#2016年6月14日星期二" class="headerlink" title="2016年6月14日星期二"></a>2016年6月14日星期二</h3><p>1、人力资源模块完成</p>
<p>2、联系我们模块完成</p>
<p>3、添加禁止选中页面内容脚本(可选)</p>
<p>4、添加禁止鼠标右键脚本(可选)</p>
<p>5、至科页面全部实现完成</p>
<p>6、至科页面思维导向图</p>
<p>7、服务器中配置MVC项目</p>
<p>8、和PengYun交流后台页面搭建及代码实现</p>
<p>9、至科后台代码，文件上传与下载Demo</p>
<h3 id="2016年6月13日星期一"><a href="#2016年6月13日星期一" class="headerlink" title="2016年6月13日星期一"></a>2016年6月13日星期一</h3><p>1、修复设计院网站bug</p>
<p>2、至科网站</p>
<p>1.关于至科模块，公司简介、荣誉资质、试验室、工程业绩4个页面完成</p>
<p>① 图片瀑布流布局</p>
<p>② 图片大图弹窗浏览</p>
<p>2.服务项目模块，地基基础工程检测、建筑幕墙工程检测、钢结构工程检测、主体结构检测、节能检测、工程设备检测6大页面完成</p>
<p>3.下载中心模块，委托单下载、规范下载2个页面完成</p>
<p>4.新闻中心模块，公司新闻、行业新闻、新闻详情3个页面完成</p>
<p>5.整个网站禁止复制内容</p>
<h3 id="第八周总结"><a href="#第八周总结" class="headerlink" title="第八周总结"></a>第八周总结</h3><p>刚刚过完端午，相信大家都有吃粽子吧，呃…反正我没吃。</p>
<p>这一周，总感觉是上一周，可能是玩了三天，糊涂了，这一周完成了一个项目。</p>
<p>整个项目的一大半由我一人完成，其中包括：前台静态页面，利用HTML5+CSS+JavaScript编写、提供一套后台UI、后台6)    三层框架搭建、整体优化布局、登录模块、新闻资讯、招聘英才、数据库三个表的设计。。。</p>
<p>今天周日，因为放了三天假，所以今天正常上班，又接手了一个新的项目，和上一个项目类似，可又不类似，总之是多了很多细节，看似简单的页面，却要调试很久。各种特效，用户交互效果也很多。写了一天多一共写了三个页面，第三个页面还没有完全完成。有点吃不消了，作为一共.Net开发，却被公司用来写前端页面，写完前端页面又要继续跟踪后台代码。。。一个网站十几个页面，全由我一个人完成，没日没夜的写。</p>
<p>是不是应该和经理提出…嗯，我需要一个助手，页面太多了吃不消。希望有人能帮我分担一下。这样我也不用那么累。是吧？</p>
<h3 id="2016年6月12日星期日"><a href="#2016年6月12日星期日" class="headerlink" title="2016年6月12日星期日"></a>2016年6月12日星期日</h3><p>1、至科网站 – 首页</p>
<p>① 首页总体代码完成</p>
<p>② 至科集团简介、热点检测项目、新闻资讯三大小模块完成</p>
<p>③ 底部二维码/公司信息/友链</p>
<p>2、关于至科/公司简介页面完成</p>
<p>3、荣誉资质页面 – 难点</p>
<p>4、查看设计院网站测试bug并修改</p>
<p>5、和PengYun对接至科网站后台功能</p>
<p>6、对至科网站图片内容、大小提出疑问并让美工修改</p>
<h3 id="2016年6月9日星期四-2016年6月11日星期六-端午节放假"><a href="#2016年6月9日星期四-2016年6月11日星期六-端午节放假" class="headerlink" title="2016年6月9日星期四 - 2016年6月11日星期六 - 端午节放假"></a>2016年6月9日星期四 - 2016年6月11日星期六 - 端午节放假</h3><h3 id="2016年6月8日星期三"><a href="#2016年6月8日星期三" class="headerlink" title="2016年6月8日星期三"></a>2016年6月8日星期三</h3><p>1、修改设计院网站遗留Bug</p>
<p>① 后台上传图片给出建议像素提示</p>
<p>② 服务项目模块每页显示12条数据</p>
<p>③ 修改翻页无效问题</p>
<p>④ 修复上传图片重名的弊端</p>
<p>2、至科网站 – 首页</p>
<p>① 首页总体设计</p>
<p>② 头部加入收藏JS效果</p>
<p>③ 炫酷3D导航栏</p>
<p>④ 首页banner图轮播</p>
<p>⑤ 首页内容区布局</p>
<h3 id="2016年6月7日星期二"><a href="#2016年6月7日星期二" class="headerlink" title="2016年6月7日星期二"></a>2016年6月7日星期二</h3><p>1、整合设计院网站</p>
<p>2、开发文档编写</p>
<p>3、设计院后台图片处理</p>
<p>4、所有代码整理，美化</p>
<p>5、至科网页样式交涉分析</p>
<h3 id="2016年6月6日星期一"><a href="#2016年6月6日星期一" class="headerlink" title="2016年6月6日星期一"></a>2016年6月6日星期一</h3><p>1、设计院网站</p>
<p>2、修改密码功能</p>
<p>3、后台页面修改</p>
<p>4、快捷编辑</p>
<p>5、存储过程分页</p>
<h3 id="第七周总结"><a href="#第七周总结" class="headerlink" title="第七周总结"></a>第七周总结</h3><p>七七四十九了。本周接手了公司的一个项目，相对来说比较忙，今天还加了一整天班。</p>
<p>这一周完成了美工所设计的第二版设计院PSD，整整十几个页面加部分JS特效，修修补补总算完成。然后写完页面继续跟着做后台。截至周日，我所负责的两个模块，新闻信息发布和招聘英才后台增删改查，前台显示，分页查询等等已圆满完成。</p>
<p>期间，遇到好几个坑，然后又自己填坑，所有数据访问都是自己手写，以往都是添加和显示在不同的页面，这一次这个后台添加和显示在同一个页面，是一个Tab切换效果。涉及到修改传值到添加那里显示出来。久久不能解决，最后静下心来想了想解决方案，然后成功解决。</p>
<p>然后就是利用了存储过程，写了一个数字分页查询。现在，对于我来说，一个项目的增删改查已经不是问题了。从前台到后台，都能信手拈来，这种感觉很好。不过还是有些不足，很多技术还是不会，希望能继续接触一些前沿的技术，达到.net行业的标准。今天很累，在公司写了一天代码。天气热加上上火，真是难受。</p>
<p>就先总结到这里吧，2016年6月5日22:33分。</p>
<h3 id="2016年6月3日星期五"><a href="#2016年6月3日星期五" class="headerlink" title="2016年6月3日星期五"></a>2016年6月3日星期五</h3><p>设计院网站第二版终结</p>
<p>学习网页相关知识</p>
<p>设计院后台招聘信息模块</p>
<h3 id="2016年6月2日星期四"><a href="#2016年6月2日星期四" class="headerlink" title="2016年6月2日星期四"></a>2016年6月2日星期四</h3><p>设计院网站设计</p>
<h3 id="2016年6月1日星期三"><a href="#2016年6月1日星期三" class="headerlink" title="2016年6月1日星期三"></a>2016年6月1日星期三</h3><p>1、设计院网站</p>
<p>2、近期工作总结</p>
<p>3、开会内容</p>
<p>① 教育局项目</p>
<p>② Lims项目</p>
<p>③ OA</p>
<p>④ 设计院网站</p>
<p>⑤ 手提袋</p>
<p>⑥ 至科网站改版升级(报告查询)</p>
<p>⑦ Lbt网站改版升级</p>
<h3 id="2016年5月31日星期二"><a href="#2016年5月31日星期二" class="headerlink" title="2016年5月31日星期二"></a>2016年5月31日星期二</h3><p>1、设计院网站数据库</p>
<p>2、设计院网站页面</p>
<p>3、设计院网站后台</p>
<h3 id="2016年5月30日星期一"><a href="#2016年5月30日星期一" class="headerlink" title="2016年5月30日星期一"></a>2016年5月30日星期一</h3><p>1、SQL架构+数据导入导出</p>
<p>2、学习JS解析json</p>
<p>3、C#.Net解析json</p>
<p>4、响应式Web设计 HTML5和CSS3实战</p>
<p>5、H5全新语义化元素整理总结</p>
<h3 id="第六周总结"><a href="#第六周总结" class="headerlink" title="第六周总结"></a>第六周总结</h3><p>这周过得比较快，只上了三天班，请假了两天。周一完成了设计院网站的第一个html版本，周二周三回学校去了。</p>
<p>转眼间，马上就要毕业了。回学校照了个毕业照，然后毕业证头像采集，让室友陪我打了几把LOL，哈哈，原来我是真的很坑。</p>
<p>这周接触了一个新的UI，FineUI。基于 jQuery / ExtJS 的 ASP.NET 一个控件库，由来自中国的程序员 三生石上 和 RingoDing 创建并维护。在博客园中看到的，然后一路跟随到FineUI官网，并瞅了瞅，感觉还不错。利用其拖拖拽拽就完成了一个demo。不过好归好，在其华丽的背后总有那么些不足之处，这还是服务器端控件，严重的拖慢了网页加载速度，而且异常的臃肿。就不与其它UI作比较了，毕竟各有各的优势。</p>
<p>嗯，还有就是我在腾讯云买了一个服务器。最低配置的那种，不过对我来说可以用了。我将自己做过的项目都挂上去了，拿来测试、瞎折腾还是可以的。</p>
<p>马上第七周了，这一周应该会很忙，设计院的网站开始做了，框架已经搭建好，只等数据库设计完成了。然后我还要更改网站样式，因为第一版略显丑态，不太合适，美工又重新设计了新的样式。黑暗的世界马上来临。</p>
<h3 id="2016年5月27日星期五"><a href="#2016年5月27日星期五" class="headerlink" title="2016年5月27日星期五"></a>2016年5月27日星期五</h3><p>1、搭建设计院后台3+层框架</p>
<p>2、数据库搭建分析</p>
<p>3、后台UI修改</p>
<p>4、折腾服务器，将自己的项目上传至服务器</p>
<h3 id="2016年5月26日星期四"><a href="#2016年5月26日星期四" class="headerlink" title="2016年5月26日星期四"></a>2016年5月26日星期四</h3><p>1、分析设计院网页实现方法</p>
<p>2、学习FineUI</p>
<p>3、利用FineUI完成登录Demo</p>
<h3 id="2016年5月25日星期三"><a href="#2016年5月25日星期三" class="headerlink" title="2016年5月25日星期三"></a>2016年5月25日星期三</h3><p>上午毕业证头像采集，下午照了毕业照</p>
<h3 id="2016年5月24日星期二"><a href="#2016年5月24日星期二" class="headerlink" title="2016年5月24日星期二"></a>2016年5月24日星期二</h3><p>请假的第一天，今天返校了</p>
<h3 id="2016年5月23日星期一"><a href="#2016年5月23日星期一" class="headerlink" title="2016年5月23日星期一"></a>2016年5月23日星期一</h3><p>1、完成设计院网站的设计</p>
<p>2、响应式Web设计学习</p>
<p>3、看书《H5和CSS3实战》</p>
<h3 id="第五周总结"><a href="#第五周总结" class="headerlink" title="第五周总结"></a>第五周总结</h3><p>第五周了，公司走了个同事，是我在第一周总结中提到的一个学长。在之前，他就跟我说过，他干不长，不喜欢公司的这种模式，他认为学不到东西。所以他告诉我，他忍不住了，要辞职了。两个字，呵呵~</p>
<p>这周，感觉过得蛮快，周一跟经理一起出去了一趟，早早地起了床，真正体验到了一把，客户就是上帝。对，没错，我们去见客户了，本来是去部署项目的，可是，压根不是我想的那样，被打回来了，客户的随便一句话，可能在他认为就一个小小的东西，我们都要修改半天。…后来还好，虽然还有不少问题，但是第二天如期上线了。</p>
<p>不知不觉，已经到五月下旬了，来这个公司是4月18号到今天也有一个月零4天了。差不多什么也都摸清楚了，鉴于第一份实习工作，还是老老实实待下去，既呆之则安之。</p>
<p>最近老是忧心忡忡的，也不知道怎么回事，仔细想想，也就那回事，每天上班下班挤公交，回到小窝睡大觉。</p>
<p>可能是报考了驾校的原因，因为是之前没工作在学校报的，考了科一，直到现在车碰都没碰过。两个字：惆怅。现在也没时间回去学，不知道什么时候能拿到驾照！</p>
<p>明天又是星期一，是我最不喜欢的一天，因为明天早上的车有个特点，那就是特别堵特别堵特别堵。。。</p>
<h3 id="2016年5月20日星期五"><a href="#2016年5月20日星期五" class="headerlink" title="2016年5月20日星期五"></a>2016年5月20日星期五</h3><p>1、继续编写页面</p>
<p>2、开会总结</p>
<p>① 教育局登记系统成效及不足</p>
<p>2016年5月22日星期天</p>
<p>1、下午公司加班写了个页面</p>
<p>2、开会</p>
<p>① GuoHongYu，教育局登记系统</p>
<p>② JiDaoMiao，至科检测工作流平台</p>
<p>③ Me，设计院网站</p>
<h3 id="2016年5月19日星期四"><a href="#2016年5月19日星期四" class="headerlink" title="2016年5月19日星期四"></a>2016年5月19日星期四</h3><p>1、OA debug</p>
<p>2、编写信义东方网页</p>
<h3 id="2016年5月18日星期三"><a href="#2016年5月18日星期三" class="headerlink" title="2016年5月18日星期三"></a>2016年5月18日星期三</h3><p>1、JS特效学习</p>
<p>2、幼儿园系统后台界面美化</p>
<p>3、提交一个月工作感受</p>
<p>4、晚上会议</p>
<p>① 月度总结</p>
<p>② 工作日志，计划性</p>
<p>③ 设计图定稿</p>
<p>④ Lims系统</p>
<p>⑤ OA</p>
<h3 id="2016年5月17日星期二"><a href="#2016年5月17日星期二" class="headerlink" title="2016年5月17日星期二"></a>2016年5月17日星期二</h3><p>1、解决幼儿园系统时间转换问题</p>
<p>2、电脑死机蓝屏进不了系统，重装系统</p>
<p>3、学习前端知识</p>
<p>4、和ChenXia沟通设计样式，分析实现效果</p>
<p>5、晚上会议</p>
<p>①项目部署完成，教育局报名系统告一段落</p>
<p>②测试人员~</p>
<p>③多浏览器的兼容性</p>
<p>④敏捷开发</p>
<p>⑤接下来重点Lims产品、设计院网站</p>
<p>⑥每天的工作日志、工作状态、工作计划</p>
<p>⑦需求分析…</p>
<h3 id="2016年5月16日星期一"><a href="#2016年5月16日星期一" class="headerlink" title="2016年5月16日星期一"></a>2016年5月16日星期一</h3><p>1、跟随外出学习</p>
<p>2、帮助中心</p>
<p>3、引导页面窗口调整</p>
<p>4、报名页面弹窗提示</p>
<p>5、服务到期功能</p>
<h3 id="第四周总结"><a href="#第四周总结" class="headerlink" title="第四周总结"></a>第四周总结</h3><p>差不多也一个月了，第四周也结束了。本周主要围绕公司两大项目走，事情特别多，加了很多班，周日加了一整天班，周六陪女朋友一天。</p>
<p>报名系统周一上线，希望能够完美通关。不然又要苦了我们这些实习生，一个多星期的修修补补，功能完善，测试，改bug…乐此不疲。</p>
<p>还有就是公司内部的工作流项目，确立了新的需求，利用开源框架roadflow二次开发，个人感觉虽然节省了很多时间，但是来改人家的框架是多么不容易的一件事，有种生拽硬拉的感觉。特别不爽。不过，对于实习生的我来说，只能处理项目的边边角角。啦啦啦~</p>
<p>本周公司发了我第一个月为期10天的实习工资，中间出了很多小波折，希望下个月发工资的时候可以解决。</p>
<h3 id="2016年5月15日星期日"><a href="#2016年5月15日星期日" class="headerlink" title="2016年5月15日星期日"></a>2016年5月15日星期日</h3><p>1、帮助中心页面</p>
<p>2、报名改登记</p>
<p>3、修改图片文字</p>
<p>4、测试…</p>
<h3 id="2016年5月13日星期五"><a href="#2016年5月13日星期五" class="headerlink" title="2016年5月13日星期五"></a>2016年5月13日星期五</h3><p>1、教育局报名系统代码</p>
<p>2、学会填写报销单，报销加班打车费用！</p>
<p>3、测试教育局报名系统</p>
<p>4、至科代码</p>
<p>5、编写两个html页面</p>
<h3 id="2016年5月12日星期四"><a href="#2016年5月12日星期四" class="headerlink" title="2016年5月12日星期四"></a>2016年5月12日星期四</h3><p>1、处理图片显示逻辑，房产证和购房合同上传了哪张就显示哪张，没上传显示默认图</p>
<p>2、增加居住证图片显示，没上传显示默认图</p>
<p>3、教育局和学校各页面图片显示，默认图片的处理</p>
<p>4、教育局报名系统2016年秋季小学起始报名登记工作开始啦展示框</p>
<p>5、教育局报名系统沌口片区和汉南片区登记入口页面</p>
<h3 id="2016年5月11日星期三"><a href="#2016年5月11日星期三" class="headerlink" title="2016年5月11日星期三"></a>2016年5月11日星期三</h3><p>1、至科系统的上传与下载</p>
<p>2、iis不安全端口解决方案</p>
<p>3、学习教育局报名系统</p>
<p>4、晚上会议</p>
<p>① 针对教育局报名系统的bug做出任务划分</p>
<p>② 教育局报名系统的逻辑梳理</p>
<p>③ 图片显示问题</p>
<h3 id="2016年5月10日星期二"><a href="#2016年5月10日星期二" class="headerlink" title="2016年5月10日星期二"></a>2016年5月10日星期二</h3><p>1、弹窗获取当前所选中radio的值</p>
<p>2、文件的上传与下载</p>
<p>3、数据绑定案例</p>
<p>4、教育局报名系统测试</p>
<p>5、Cookie之登录页面记住我</p>
<h3 id="2016年5月9日星期一"><a href="#2016年5月9日星期一" class="headerlink" title="2016年5月9日星期一"></a>2016年5月9日星期一</h3><p>1、熟悉教育局报名系统代码</p>
<p>2、至科代码</p>
<p>3、JS控制table点击按钮增加行</p>
<p>4、子窗体的子窗体给父窗体传值问题</p>
<h3 id="第三周总结"><a href="#第三周总结" class="headerlink" title="第三周总结"></a>第三周总结</h3><p>好快，实习第三周结束了。</p>
<p>这周主要是针对公司的一个教育报名系统进行整改，测试。本周加了两天班，这是我第一次加班，不打卡，不记考勤，周六早早地到了公司，等了半个多小时才进去。中午经理和我们一起吃了饭，当然是他买单。</p>
<p>本来周末两天是想要回学校的，但是计划赶不上变化，时间都奉献了。</p>
<p>每天都在和那个特别烂的报名系统打交道，感觉好烦躁。</p>
<p>嗯，今天是母亲节，祝全天下伟大的母亲节日快乐。</p>
<p>这周就先这样把，明天又是一个新的开始，接下来，要给经理提交一份有关福利待遇的建议方案。</p>
<p>打算在本月18号之前写一份“满月”体验报告。</p>
<p>从上月18号到今天是第20天。</p>
<p>漫漫职场程序路，何时才能到尽头？</p>
<h3 id="2016年5月8日星期日"><a href="#2016年5月8日星期日" class="headerlink" title="2016年5月8日星期日"></a>2016年5月8日星期日</h3><p>1、教育局报名系统测试</p>
<p>2、修改教育局报名系统存在的bug</p>
<p>3、撰写有关福利待遇的建议方案</p>
<p>4、浏览博客园网站，收听.NET FM，聆听时下前沿技术</p>
<p>5、加班加到21:35，没什么想说的了</p>
<h3 id="2016年5月7日星期六"><a href="#2016年5月7日星期六" class="headerlink" title="2016年5月7日星期六"></a>2016年5月7日星期六</h3><p>1、今天加班</p>
<p>2、鼓捣OCR图像文字识别技术，demo案例</p>
<p>3、教育局报名系统整合，界面美化</p>
<p>4、整理教育局报名系统测试账号</p>
<h3 id="2016年5月6日星期五"><a href="#2016年5月6日星期五" class="headerlink" title="2016年5月6日星期五"></a>2016年5月6日星期五</h3><p>1、去掉上传按钮，统一进行上传</p>
<p>2、上传图片采用GUID+文件名命名，避免重名</p>
<p>3、学会目录分离算法，避免和解决大量文件保存在同一个目录下的问题，通过目录分离算法来保证在不同的图片保存在不同的目录下。</p>
<p>4、界面美化</p>
<p>5、研究“以图搜图”技术,现有两种方案，具体实现有待研究</p>
<p>① 感知哈希算法</p>
<p>⑴ 缩小图片尺寸<br>将图片缩小到8x8的尺寸, 总共64个像素. 这一步的作用是去除各种图片尺寸和图片比例的差异, 只保留结构、明暗等基本信息.</p>
<p>⑵ 转为灰度图片<br>将缩小后的图片, 转为64级灰度图片</p>
<p>⑶ 计算灰度平均值<br>计算图片中所有像素的灰度平均值</p>
<p>⑷ 比较像素的灰度<br>将每个像素的灰度与平均值进行比较, 如果大于或等于平均值记为1, 小于平均值记为0.</p>
<p>⑸ 计算哈希值<br>将上一步的比较结果, 组合在一起, 就构成了一个64位的二进制整数, 这就是这张图片的指纹.</p>
<p>⑹ 比图片指纹<br>得到图片的指纹后, 就可以对比不同的图片的指纹, 计算出64位中有多少位是不一样的. 如果不相同的数据位数不超过5, 就说明两张图片很相似, 如果大于10, 说明它们是两张不同的图片.</p>
<p>② OCR图像文字识别技术</p>
<p>因为户口本、房产证、出生证明等图片上的文字是固定的，所以可以获取户口本、房产证、出生证明等图片上的文字信息来验证图片正确与否。</p>
<h3 id="2016年5月5日星期四"><a href="#2016年5月5日星期四" class="headerlink" title="2016年5月5日星期四"></a>2016年5月5日星期四</h3><p>1、上午会议</p>
<p>① ChenZong对公司做介绍，现状，规划</p>
<p>② 上市，产品</p>
<p>③ 绩效问题</p>
<p>④ 研发大楼</p>
<p>⑤ 千万级智能建筑项目</p>
<p>⑥ 分公司(十堰、宜昌~)</p>
<p>⑦ 待遇问题</p>
<p>2、完成GuoHongYu安排的任务，整合修改的代码</p>
<p>3、测试教育局报名系统</p>
<p>4、报名系统存在问题</p>
<p>① 获取片区信息，有部分小区显示不存在</p>
<p>② 选择特定小区“万科金域蓝湾小区”下面不隐藏</p>
<p>③ 特定小区“滨湖小区”下一步没反应</p>
<p>④ 所有选择房产证和购房合同页面，选择房产证没问题，选择购房合同，则会弹出提示输入门牌号和房产证</p>
<h3 id="2016年5月4日星期三"><a href="#2016年5月4日星期三" class="headerlink" title="2016年5月4日星期三"></a>2016年5月4日星期三</h3><p>1、整个上午开会</p>
<p>① 主题分享之图文技术点应用解析</p>
<p>② 确定无特别情况，每周四晚组织《学习会》</p>
<p>③ 近期的工作重点：两个系统</p>
<p>④ 绩效考核办法讲解</p>
<p>⑤ 教育局需求分析</p>
<p>⑥ 公司娱乐活动建议型方案</p>
<p>⑦ 现有问题总结，解决方案</p>
<p>2、图片修改“报名”改“登记”</p>
<p>3、图片上传问题异常解决</p>
<p>4、下拉框上传不刷新</p>
<p>5、教育局报名系统页面微调，兼容性</p>
<h3 id="2016年5月3日星期二"><a href="#2016年5月3日星期二" class="headerlink" title="2016年5月3日星期二"></a>2016年5月3日星期二</h3><p>1、至科检测工作流平台</p>
<p>2、搭建多层结构的博客项目</p>
<p>3、前台登录页面</p>
<p>4、后台登录模块</p>
<p>5、联系人列表aspx版增删改查</p>
<p>6、晚上会议</p>
<p>① 教育局报名系统测试报告点评</p>
<p>② 教育局报名系统bug修改，需求分析</p>
<p>③ LoadRunner压力测试</p>
<p>④ 以图搜图技术</p>
<h3 id="2016年5月2日星期一"><a href="#2016年5月2日星期一" class="headerlink" title="2016年5月2日星期一"></a>2016年5月2日星期一</h3><p>今天是休假最后一天，(^o^)/YES!</p>
<h3 id="第二周总结"><a href="#第二周总结" class="headerlink" title="第二周总结"></a>第二周总结</h3><p>一晃半个月就这样过去了，第二周过的是那样的快，今天是五一劳动节，按国家规定我们放假三天。在紧凑的工作生活中又带来些许的放松，我刚从学校回到住处。对的，自己一个人太无聊，我跑到学校去了，去见见我那室友们。</p>
<p>看看上面的每日任务，这周说真的，并没有学到什么，这周下发的任务很少基本上没有，所有就选择了自己安排，总的来说，学了点jQueryEasyUI、搞了一个用一般处理程序+HTML+ajax完成的增删改查小案例，哦！还有那个SQL的存储过程分页，跟进了公司的一个教育局管理系统，完成了其中的两个小模块。其它的小事就不往上面写了，大概就是这样把！</p>
<p>渐渐地天气热了起来，夏天给人的感觉总是那么浮躁。不知为何，现在的我根本静不下心来了，没有了在学校的那种拼劲，慢慢的我感觉到自己松懈了，偏偏上班了却又没有那种特别明确的目标了。在学校的时候就想着找个公司好好实习，好好学技术，努力提升自己的价值。反而现在到了公司却有种迷茫的感觉。是自己的问题？抑或是公司的问题？</p>
<p>仔细想了想，应该还是个人原因，就拿目前的我和之前的我对比一下：现在晚上早早地上了床，大概每晚10点多左右，就算睡不着也躺在床上。之前在学校，基本上都是12点过后才上床睡觉的，不是在敲代码，就是在看视频。</p>
<p>不能因为现在有了一个落脚地，就因此松懈啊！还是要不断的学习才可以，既然选择了程序员这条路，就要不遗余力的去编码，去学习，学习如逆水行舟不进则退啊！除非你想一直只拿2K的薪水。这不是我想要生活，我要过上高质量的生活水平，现在的我还是远远不够的，埋头苦干才是硬道理，技术才是王道，奔跑吧，阿星！</p>
<p>不在沉默中暴发，就在沉默中灭亡！</p>
<h3 id="2016年4月29日星期五"><a href="#2016年4月29日星期五" class="headerlink" title="2016年4月29日星期五"></a>2016年4月29日星期五</h3><p>1、教育局报名系统测试</p>
<p>2、教育局报名系统完善图片上传功能</p>
<p>3、一般处理程序联系人列表的增删改查案例</p>
<p>4、分页展示信息列表</p>
<p>5、至科检测工作流平台表单、流程设计</p>
<h3 id="2016年4月28日星期四"><a href="#2016年4月28日星期四" class="headerlink" title="2016年4月28日星期四"></a>2016年4月28日星期四</h3><p>1、至科检测工作流平台表单、流程设计</p>
<p>2、Html页面+ 一般处理程序留言评论案例</p>
<p>3、一般处理程序联系人列表的增删改查案例</p>
<p>4、存储过程分页</p>
<h3 id="2016年4月27日星期三"><a href="#2016年4月27日星期三" class="headerlink" title="2016年4月27日星期三"></a>2016年4月27日星期三</h3><p>1、教育局系统遮罩层图片显示功能模块</p>
<p>2、至科检测工作流平台表单、流程设计</p>
<p>3、ajax异步请求实现注册</p>
<h3 id="2016年4月26日星期二"><a href="#2016年4月26日星期二" class="headerlink" title="2016年4月26日星期二"></a>2016年4月26日星期二</h3><p>1、修改网站流量统计页面代码</p>
<p>2、学习在线投票功能案例</p>
<p>3、学习jQueryEasyUI，搭建页面，进行增删改查操作</p>
<p>4、晚上会议</p>
<p>①教育局报名系统业务流程，项目介绍等</p>
<p>②Lims产品介绍</p>
<h3 id="2016年4月25日星期一"><a href="#2016年4月25日星期一" class="headerlink" title="2016年4月25日星期一"></a>2016年4月25日星期一</h3><p>1、观看WebApp相关资料和视频</p>
<p>2、学习登录注册Demo后台逻辑</p>
<p>3、学习观看新闻管理系统Demo</p>
<p>4、学习文件上传下载Demo</p>
<p>5、晚上会议</p>
<p>①针对自己的学习情况，谈谈对公司上司及自己的一些看法</p>
<p>②Boss对我们存在的一些问题进行讲解答疑</p>
<p>③对教育局管理系统和至科实验室信息管理系统的切入、学习</p>
<p>④教育局管理系统项目转化为产品的打算、预想</p>
<p>⑤观看《青春代码》微电影</p>
<h3 id="第一周总结"><a href="#第一周总结" class="headerlink" title="第一周总结"></a>第一周总结</h3><p>这是我的第一次正式工作，我现在是一名大二的学生。这个时间段应该是在学校无忧无虑的过着安稳的日子的，可是我却已经出来实习了。至于为什么这么早出来找工作其实有很多原因的，有个人原因也有学校的原因，总之吧，在学校我感觉我已经学不到东西了，所以还不如早点出来锻炼锻炼自己。这个过程真的蛮艰难的，对于一个初入职场的小白来说是这样的。2016年4月15日，我的3个舍友牺牲了自己的时间帮我提行李到我所租房子的地方，打扫卫生，整理房间…真的很感谢他们，东西比较多，如果是我一个人拿的话，估计会更艰难，为表感谢，我请他们去饭店吃了一顿。</p>
<p>我住的这个地方，距离我工作的地方，不堵车的话大概半小时的公交路程。接下来的两天，我熟悉了这里的环境，合租房，公共卫生间，真的有很多的不方便。我找的这个地方地段比较好，但是这也恰恰增加了我的经济负担，往往地段比较好的位置，消费都是比较高的。</p>
<p>每天上班都要走很远的路程，武汉这个地方，这两年到处都在修路，真是非常的不方便。第一天上班的前一晚我特别兴奋，大晚上的在床上翻来覆去一直睡不着，早上提前了一个小时到公司，非常尴尬，因为是打卡式的，我进不去，只好在外边转了几圈直到8点左右我才上去进行一系列的入职流程。公司的上班时间是8:30–5:30，有了第一天的经验，我早上一般都是6点半起床，进行洗漱后7点准时出发，走到公交站大概7:30左右，不管堵不堵车，一个小时的缓冲时间是肯定可以到公司的。</p>
<p>在公司按部就班的进行实习学习，我的领导个人感觉还是蛮nice的，比较人性化，喜欢和我们交流，有好几次中午都是和我们几个实习生一起走路去吃饭。一起和我实习的是我的一个学长，当时也是蛮诧异的，他和我是同一天进入这个公司的，当时还感叹了一下，这个世界其实有时候还是蛮小的。</p>
<p>不管怎么样，这是我的第一份工作，我希望自己能够做好，不断增强自己，早日达到标准。</p>
<h3 id="2016年4月22日星期五"><a href="#2016年4月22日星期五" class="headerlink" title="2016年4月22日星期五"></a>2016年4月22日星期五</h3><p>1、熟悉教育局报名管理系统后台逻辑</p>
<p>2、完成GuoHongYu分配的任务</p>
<p>3、学习三层架构</p>
<h3 id="2016年4月21日星期四"><a href="#2016年4月21日星期四" class="headerlink" title="2016年4月21日星期四"></a>2016年4月21日星期四</h3><p>1、完成图片上传之前本地预览功能</p>
<p>2、上午会议</p>
<p>① Jin日里程碑提交规范</p>
<p>② Lims观后感或者测试报告点评</p>
<p>③ 近期任务：配合GuoHongYu安排的任务、学习</p>
<p>④ C#开发编码规范</p>
<p>3、学习RoadFlow工作流引擎，教育局报名管理系统</p>
<p>4、来游戏•复盘设计方案分析</p>
<p>5、研究H5 APP开发 - WeX5</p>
<h3 id="2016年4月20日星期三"><a href="#2016年4月20日星期三" class="headerlink" title="2016年4月20日星期三"></a>2016年4月20日星期三</h3><p>1、继续观看信息系统，并写观后感</p>
<p>2、仿淘宝图片大图显示js代码特效</p>
<p>3、图片上传之前本地预览功能</p>
<h3 id="2016年4月19日星期二"><a href="#2016年4月19日星期二" class="headerlink" title="2016年4月19日星期二"></a>2016年4月19日星期二</h3><p>1、登陆系统练习</p>
<p>2、在线观看至科实验室信息管理系统</p>
<h3 id="2016年4月18日星期一"><a href="#2016年4月18日星期一" class="headerlink" title="2016年4月18日星期一"></a>2016年4月18日星期一</h3><p>1、第一天上班，配置电脑，熟悉环境</p>
<p>2、登录系统练习</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2017年7月&quot;&gt;&lt;a href=&quot;#2017年7月&quot; class=&quot;headerlink&quot; title=&quot;2017年7月&quot;&gt;&lt;/a&gt;2017年7月&lt;/h3&gt;&lt;p&gt;1、签订劳动合同，转正，实习期结束&lt;/p&gt;
&lt;p&gt;2、React-Native 学习研究&lt;/p&gt;
&lt;h3 id=&quot;2017年6月19日星期一-—-2017年6月23日星期五&quot;&gt;&lt;a href=&quot;#2017年6月19日星期一-—-2017年6月23日星期五&quot; class=&quot;headerlink&quot; title=&quot;2017年6月19日星期一 — 2017年6月23日星期五&quot;&gt;&lt;/a&gt;2017年6月19日星期一 — 2017年6月23日星期五&lt;/h3&gt;&lt;p&gt;1、重装系统/开发环境&lt;/p&gt;
&lt;p&gt;2、动态表单设计开发完成&lt;/p&gt;
&lt;p&gt;3、请假两天回武汉领毕业证、办理党员组织关系手续&lt;/p&gt;
&lt;p&gt;4、表单Bootstrap美化&lt;br&gt;
    
    </summary>
    
    
      <category term="实习" scheme="http://xj8c.cc/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>毕业答辩汇报材料</title>
    <link href="http://xj8c.cc/2017/03/30/graduation-report-material/"/>
    <id>http://xj8c.cc/2017/03/30/graduation-report-material/</id>
    <published>2017-03-30T04:47:00.000Z</published>
    <updated>2017-05-26T07:48:34.603Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-实习公司："><a href="#1-实习公司：" class="headerlink" title="1.实习公司："></a>1.实习公司：</h2><p>　① 武汉路博特工程科技有限公司 — 2016.4.18 — 2017.2.10</p>
<p>　② 上海盖世网络技术有限公司 — 2017.2.27 — 至今</p>
<h2 id="2-公司简介："><a href="#2-公司简介：" class="headerlink" title="2.公司简介："></a>2.公司简介：</h2><p>　① 武汉路博特工程科技有限公司是一家专注于海量信息处理的专业技术服务公司，致力于将先进信息技术和管理手段应用到工程管理、企业管理、政务及商务管理中，为各行业用户提供系统集成软件和IT服务，能为企事业单位提供系统的管理软件产品和软、硬件整体解决方案，能提供专业开发系统、产品并含有特殊复杂算法需求的专业软件…</p>
<p>　② 上海盖世网络技术有限公司是一家全球领先的汽车产业综合服务提供商，致力于促进全球汽车供应链的有序良性健康发展，帮助中国企业提升竞争力，进入国际舞台；促进中国汽车供应链的产业升级，从加工制造到智能智造。通过盖世在汽车行业的与业理解、产业深度和整合资源的能力，为企业发展提供一站式服务。<br><a id="more"></a></p>
<h2 id="3-项目："><a href="#3-项目：" class="headerlink" title="3.项目："></a>3.项目：</h2><p>　武汉东方建设集团有限公司(whdfjs.com)</p>
<p>　武汉东方建设集团建筑设计院(dfjssj.com)</p>
<p>　武汉至科检测技术有限公司(zktit.com)</p>
<p>　武汉路博特工程科技有限公司(lubok.cn)</p>
<p>　武汉市江汉区交通大队公安局(公安专线,外网无法访问)</p>
<p>　武汉优仕德教育发展有限公司(61.183.201.164:85)</p>
<p>　武汉麦都教育咨询有限公司(61.183.201.164:86)</p>
<p>　武汉至科检测技术有限公司检测人员资格查询系统(61.183.201.164:83)</p>
<p>　至科试验室信息管理系统(61.183.201.164:82)</p>
<p>　程序员版2048、当然我在瞎扯(Android App)</p>
<h2 id="4-收获："><a href="#4-收获：" class="headerlink" title="4.收获："></a>4.收获：</h2><p>　C#高级编程知识(IO操作、设计模式、委托、多线程、反射…)</p>
<p>　数据库开发(存储过程、触发器、视图、离线数据集、数据安全…)</p>
<p>　DotNet(Lucence.Net、Log4Net、Dapper、页面静态化、高效缓存、URL重写、RSS、无刷新上传、微信页面开发、微信手机商城、WebApi、Asp.Net MVC、EF、Nuget…)</p>
<p>　前端(H5+CSS3、Http协议、JavaScript、jQuery、Vue.js、Node.js、Npm、网站部署、web调优…)</p>
<p>　版本管理工具(Git、SVN、GitHub)</p>
<h2 id="5-遇到的问题："><a href="#5-遇到的问题：" class="headerlink" title="5.遇到的问题："></a>5.遇到的问题：</h2><p>　举例1：个性化Ueditor(百度编辑器)</p>
<p>　修改外观皮肤、定制组件、插入视频实现预览功能、上传图片实现自动存入CDN域名、上传图片实现等比例缩放。</p>
<p>　举例2：Web端上传文件转换PDF功能</p>
<p>　用户上传的文件有：txt、Word、Excel、PPT、图片、PDF。自动转换用户上传的文件为PDF(难点)，在后台管理中进行审核(通过与不通过)，进而在前台显示转换的PDF内容。</p>
<h2 id="6-打算："><a href="#6-打算：" class="headerlink" title="6.打算："></a>6.打算：</h2><p>　顺利毕业，早日拿到毕业证和公司申请转正，完成每日工作内容的同时不断学习不断进步。作为一名软件开发人员，应该时刻关注互联网的新技术、新产品、新方向。现如今主要是学好技术，提升自己的能力，为公司工作的同时充实自己。接下来准备学习项目架构方面的知识，接触ASP.NET CORE，慢慢向云计算、大数据方面发展。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-实习公司：&quot;&gt;&lt;a href=&quot;#1-实习公司：&quot; class=&quot;headerlink&quot; title=&quot;1.实习公司：&quot;&gt;&lt;/a&gt;1.实习公司：&lt;/h2&gt;&lt;p&gt;　① 武汉路博特工程科技有限公司 — 2016.4.18 — 2017.2.10&lt;/p&gt;
&lt;p&gt;　② 上海盖世网络技术有限公司 — 2017.2.27 — 至今&lt;/p&gt;
&lt;h2 id=&quot;2-公司简介：&quot;&gt;&lt;a href=&quot;#2-公司简介：&quot; class=&quot;headerlink&quot; title=&quot;2.公司简介：&quot;&gt;&lt;/a&gt;2.公司简介：&lt;/h2&gt;&lt;p&gt;　① 武汉路博特工程科技有限公司是一家专注于海量信息处理的专业技术服务公司，致力于将先进信息技术和管理手段应用到工程管理、企业管理、政务及商务管理中，为各行业用户提供系统集成软件和IT服务，能为企事业单位提供系统的管理软件产品和软、硬件整体解决方案，能提供专业开发系统、产品并含有特殊复杂算法需求的专业软件…&lt;/p&gt;
&lt;p&gt;　② 上海盖世网络技术有限公司是一家全球领先的汽车产业综合服务提供商，致力于促进全球汽车供应链的有序良性健康发展，帮助中国企业提升竞争力，进入国际舞台；促进中国汽车供应链的产业升级，从加工制造到智能智造。通过盖世在汽车行业的与业理解、产业深度和整合资源的能力，为企业发展提供一站式服务。&lt;br&gt;
    
    </summary>
    
    
      <category term="毕业答辩" scheme="http://xj8c.cc/tags/%E6%AF%95%E4%B8%9A%E7%AD%94%E8%BE%A9/"/>
    
  </entry>
  
  <entry>
    <title>2016年终总结</title>
    <link href="http://xj8c.cc/2017/01/04/2016-year-end-summary/"/>
    <id>http://xj8c.cc/2017/01/04/2016-year-end-summary/</id>
    <published>2017-01-04T01:59:56.000Z</published>
    <updated>2017-05-26T07:48:39.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、工作总结"><a href="#一、工作总结" class="headerlink" title="一、工作总结"></a>一、工作总结</h2><p>2016年对我来说意义非凡，结束掉学生生涯正式步入职场，进入“路博特”，开始我的编码生活。这一年不仅学到了更多的专业知识同时也长了不少见识。从入职到现在已有八个多月的时间，在公司担任.Net研发一职。<br><a id="more"></a></p>
<h3 id="总的来说2016年实现了个人的预期目标，以下是2016年预期目标一览。"><a href="#总的来说2016年实现了个人的预期目标，以下是2016年预期目标一览。" class="headerlink" title="总的来说2016年实现了个人的预期目标，以下是2016年预期目标一览。"></a>总的来说2016年实现了个人的预期目标，以下是2016年预期目标一览。</h3><p>1.2016年4月18日入职“武汉路博特工程科技有限公司”</p>
<p>2.2016年6月熟练掌握三层架构开发网站</p>
<p>3.2016年9月ASP.NET MVC学习并入门</p>
<p>4.2016年10月25日结束驾考生涯，驾驶证到手</p>
<p>5.2016年11月可利用Entity Framework开发简单网站</p>
<p>6.2016年12月对前端有了新的认识可开发自适应PC和手机屏幕的网页</p>
<p>下面重点总结在公司开发过的网站以及参与过的项目。刚进公司主要是熟悉环境，了解行情，快速进行学习，适应公司的发展需要。最开始参与了一个教育局报名管理系统，负责了其部分JS特效及一些后台功能的实现。然后客串测试直至项目顺利上线。在这个小小的项目中，体会到了团队协同、效率、编码能力、测试等的至关重要。</p>
<p>由于个人前端能力突出，紧接着便被安排编写设计院网站，在完成前端所有页面之后协同开发后台在短短不到一周的时间完成该项目。但是遗留下的问题却有很多，因为经验不足导致Bug众多。深深体会到维护一个项目远远比开发一个项目要难得多。从这个项目过渡，接下来的时间开发了至科网站、集团网站、路博特网站、至科检测人员资格查询系统前台、优仕德项目网站、江汉区交警大队网站、麦都教育网站等等公司一系列有关前台的页面。并且主导了域名的注册、备案、上线以及后期的维护工作。</p>
<p>以上便是我2016入职以来的工作总结。</p>
<h2 id="二、自我评价"><a href="#二、自我评价" class="headerlink" title="二、自我评价"></a>二、自我评价</h2><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><p>1.环境适应能力强，能够很快适应新的工作环境</p>
<p>2.具备团队合作意识，善于协调团队分工合作</p>
<p>3.能够虚心接受他人的意见与建议，对符合的予以采纳</p>
<p>4.各方面的知识都有涉猎，学习能力较快，接受新事物能力强</p>
<p>5.能够在最短时间内完成Leader下发的任务，并自由合理分配时间</p>
<p>6.在编程开发过程中，对项目有自己的见解以及问题解决方案</p>
<h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><p>1.后半年积极度不高，比较懒散</p>
<p>2.涉猎知识较多，但是都不精通</p>
<p>3.个人能力和团队能力有限，不能更加完美的解决现有项目问题</p>
<p>4.情绪化比较严重，不能合理控制自己的心情</p>
<h3 id="对自己的要求："><a href="#对自己的要求：" class="headerlink" title="对自己的要求："></a>对自己的要求：</h3><p>1.合理控制自己的时间</p>
<p>2.在现有项目的基础上，完善不足之处</p>
<p>3.学而知不足，专一研究DotNet技术，由此进行发散学习</p>
<h2 id="三、建议意见"><a href="#三、建议意见" class="headerlink" title="三、建议意见"></a>三、建议意见</h2><p>1.员工归属感需增强，实行奖惩制度，提高福利待遇</p>
<p>2.希望公司可以大幅度提供住宿，家较远的员工可以给予公交补贴</p>
<p>3.技术方面，向框架式开发渐进，框架开发速度快，效率高。急需一套属于公司内部的网站开发框架。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、工作总结&quot;&gt;&lt;a href=&quot;#一、工作总结&quot; class=&quot;headerlink&quot; title=&quot;一、工作总结&quot;&gt;&lt;/a&gt;一、工作总结&lt;/h2&gt;&lt;p&gt;2016年对我来说意义非凡，结束掉学生生涯正式步入职场，进入“路博特”，开始我的编码生活。这一年不仅学到了更多的专业知识同时也长了不少见识。从入职到现在已有八个多月的时间，在公司担任.Net研发一职。&lt;br&gt;
    
    </summary>
    
    
      <category term="年终总结" scheme="http://xj8c.cc/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C＃7.0中有哪些新特性？</title>
    <link href="http://xj8c.cc/2016/08/31/csharp7/"/>
    <id>http://xj8c.cc/2016/08/31/csharp7/</id>
    <published>2016-08-31T02:19:57.000Z</published>
    <updated>2017-05-26T06:29:50.340Z</updated>
    
    <content type="html"><![CDATA[<h3 id="以下将是-C-7-0-中所有计划的语言特性的描述。随着-Visual-Studio-“15”-Preview-4-版本的发布，这些特性中的大部分将活跃起来。现在是时候来展示这些特性，你也告诉借此告诉我们你的想法！"><a href="#以下将是-C-7-0-中所有计划的语言特性的描述。随着-Visual-Studio-“15”-Preview-4-版本的发布，这些特性中的大部分将活跃起来。现在是时候来展示这些特性，你也告诉借此告诉我们你的想法！" class="headerlink" title="以下将是 C# 7.0 中所有计划的语言特性的描述。随着 Visual Studio “15” Preview 4 版本的发布，这些特性中的大部分将活跃起来。现在是时候来展示这些特性，你也告诉借此告诉我们你的想法！"></a>以下将是 C# 7.0 中所有计划的语言特性的描述。随着 Visual Studio “15” Preview 4 版本的发布，这些特性中的大部分将活跃起来。现在是时候来展示这些特性，你也告诉借此告诉我们你的想法！</h3><h3 id="C＃7-0-增加了许多新功能，并专注于数据消费，简化代码和性能的改善。或许最大的特性就是元祖和模式匹配，元祖可以很容易地拥有多个返回结果，而模型匹配可以根据数据的“形”的不同来简化代码。我们希望，将它们结合起来，从而使你的代码更加简洁高效，也可以使你更加快乐并富有成效。"><a href="#C＃7-0-增加了许多新功能，并专注于数据消费，简化代码和性能的改善。或许最大的特性就是元祖和模式匹配，元祖可以很容易地拥有多个返回结果，而模型匹配可以根据数据的“形”的不同来简化代码。我们希望，将它们结合起来，从而使你的代码更加简洁高效，也可以使你更加快乐并富有成效。" class="headerlink" title="C＃7.0 增加了许多新功能，并专注于数据消费，简化代码和性能的改善。或许最大的特性就是元祖和模式匹配，元祖可以很容易地拥有多个返回结果，而模型匹配可以根据数据的“形”的不同来简化代码。我们希望，将它们结合起来，从而使你的代码更加简洁高效，也可以使你更加快乐并富有成效。"></a>C＃7.0 增加了许多新功能，并专注于数据消费，简化代码和性能的改善。或许最大的特性就是元祖和模式匹配，元祖可以很容易地拥有多个返回结果，而模型匹配可以根据数据的“形”的不同来简化代码。我们希望，将它们结合起来，从而使你的代码更加简洁高效，也可以使你更加快乐并富有成效。</h3><h3 id="请点击-Visual-Studio-窗口顶部的反馈按钮，告诉我们哪些是你不期待的特性或者你关于提升这些特性的思考。还有许多功能没有在-Preview-4-版本中实现。接下来我会描述一些我们发布的最终版本里将会起作用的特性，和一些一旦不起作用机即会删除掉的特性。我也是支持对这些计划作出改变，尤其是作为我们从你那儿得到反馈的结果。当最终版本发布时，这些特性中的一些将会改变或者删除。"><a href="#请点击-Visual-Studio-窗口顶部的反馈按钮，告诉我们哪些是你不期待的特性或者你关于提升这些特性的思考。还有许多功能没有在-Preview-4-版本中实现。接下来我会描述一些我们发布的最终版本里将会起作用的特性，和一些一旦不起作用机即会删除掉的特性。我也是支持对这些计划作出改变，尤其是作为我们从你那儿得到反馈的结果。当最终版本发布时，这些特性中的一些将会改变或者删除。" class="headerlink" title="请点击 Visual Studio 窗口顶部的反馈按钮，告诉我们哪些是你不期待的特性或者你关于提升这些特性的思考。还有许多功能没有在 Preview 4 版本中实现。接下来我会描述一些我们发布的最终版本里将会起作用的特性，和一些一旦不起作用机即会删除掉的特性。我也是支持对这些计划作出改变，尤其是作为我们从你那儿得到反馈的结果。当最终版本发布时，这些特性中的一些将会改变或者删除。"></a>请点击 Visual Studio 窗口顶部的反馈按钮，告诉我们哪些是你不期待的特性或者你关于提升这些特性的思考。还有许多功能没有在 Preview 4 版本中实现。接下来我会描述一些我们发布的最终版本里将会起作用的特性，和一些一旦不起作用机即会删除掉的特性。我也是支持对这些计划作出改变，尤其是作为我们从你那儿得到反馈的结果。当最终版本发布时，这些特性中的一些将会改变或者删除。</h3><a id="more"></a>
<h3 id="如果你好奇这些特性的设计过程，你可以在-Roslyn-GitHub-site-上找到很多设计笔记和讨论。"><a href="#如果你好奇这些特性的设计过程，你可以在-Roslyn-GitHub-site-上找到很多设计笔记和讨论。" class="headerlink" title="如果你好奇这些特性的设计过程，你可以在 Roslyn GitHub site 上找到很多设计笔记和讨论。"></a>如果你好奇这些特性的设计过程，你可以在 Roslyn GitHub site 上找到很多设计笔记和讨论。</h3><h3 id="希望-C＃7-0-能带给你快乐！"><a href="#希望-C＃7-0-能带给你快乐！" class="headerlink" title="希望 C＃7.0 能带给你快乐！"></a>希望 C＃7.0 能带给你快乐！</h3><h2 id="输出变量"><a href="#输出变量" class="headerlink" title="输出变量"></a>输出变量</h2><h3 id="在当前的-C＃-中，使用输出参数并不像我们想的那样方便。在你调用一个无输出参数的方法之前，首先必须声明一个变量并传递给它。如果你没有初始化这些变量，你就无法使用-var-来声明它们，除非先指定完整的类型："><a href="#在当前的-C＃-中，使用输出参数并不像我们想的那样方便。在你调用一个无输出参数的方法之前，首先必须声明一个变量并传递给它。如果你没有初始化这些变量，你就无法使用-var-来声明它们，除非先指定完整的类型：" class="headerlink" title="在当前的 C＃ 中，使用输出参数并不像我们想的那样方便。在你调用一个无输出参数的方法之前，首先必须声明一个变量并传递给它。如果你没有初始化这些变量，你就无法使用 var 来声明它们，除非先指定完整的类型："></a>在当前的 C＃ 中，使用输出参数并不像我们想的那样方便。在你调用一个无输出参数的方法之前，首先必须声明一个变量并传递给它。如果你没有初始化这些变量，你就无法使用 var 来声明它们，除非先指定完整的类型：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public void PrintCoordinates(Point p)</div><div class="line">&#123;    int x, y; // have to &quot;predeclare&quot;</div><div class="line">    p.GetCoordinates(out x, out y);</div><div class="line">    WriteLine($&quot;(&#123;x&#125;, &#123;y&#125;)&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在-C＃7-0-中，我们正在增加输出变量和声明一个作为能够被传递的输出实参的变量的能力："><a href="#在-C＃7-0-中，我们正在增加输出变量和声明一个作为能够被传递的输出实参的变量的能力：" class="headerlink" title="在 C＃7.0 中，我们正在增加输出变量和声明一个作为能够被传递的输出实参的变量的能力："></a>在 C＃7.0 中，我们正在增加输出变量和声明一个作为能够被传递的输出实参的变量的能力：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public void PrintCoordinates(Point p)</div><div class="line">&#123;</div><div class="line">    p.GetCoordinates(out int x, out int y);</div><div class="line">    WriteLine($&quot;(&#123;x&#125;, &#123;y&#125;)&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="注意，变量是在封闭块的范围内，所以后续也可以使用它们。大多数类型的声明不建立自己的范围，因此在他们中声明的变量通常会被引入到封闭范围。"><a href="#注意，变量是在封闭块的范围内，所以后续也可以使用它们。大多数类型的声明不建立自己的范围，因此在他们中声明的变量通常会被引入到封闭范围。" class="headerlink" title="注意，变量是在封闭块的范围内，所以后续也可以使用它们。大多数类型的声明不建立自己的范围，因此在他们中声明的变量通常会被引入到封闭范围。"></a>注意，变量是在封闭块的范围内，所以后续也可以使用它们。大多数类型的声明不建立自己的范围，因此在他们中声明的变量通常会被引入到封闭范围。</h3><h3 id="Note：在-Preview-4-中，适用范围规则更为严格：输出变量的作用域是声明它们的语句，因此直到下个版本发布时，上面的示例才会起作用。"><a href="#Note：在-Preview-4-中，适用范围规则更为严格：输出变量的作用域是声明它们的语句，因此直到下个版本发布时，上面的示例才会起作用。" class="headerlink" title="Note：在 Preview 4 中，适用范围规则更为严格：输出变量的作用域是声明它们的语句，因此直到下个版本发布时，上面的示例才会起作用。"></a>Note：在 Preview 4 中，适用范围规则更为严格：输出变量的作用域是声明它们的语句，因此直到下个版本发布时，上面的示例才会起作用。</h3><h3 id="由于输出变量直接被声明为实参传递给输出形参，编译器通常会告诉他们应该是的类型（除非有冲突过载），所以使用-var-来代替声明它们的方式是比较好的："><a href="#由于输出变量直接被声明为实参传递给输出形参，编译器通常会告诉他们应该是的类型（除非有冲突过载），所以使用-var-来代替声明它们的方式是比较好的：" class="headerlink" title="由于输出变量直接被声明为实参传递给输出形参，编译器通常会告诉他们应该是的类型（除非有冲突过载），所以使用 var 来代替声明它们的方式是比较好的："></a>由于输出变量直接被声明为实参传递给输出形参，编译器通常会告诉他们应该是的类型（除非有冲突过载），所以使用 var 来代替声明它们的方式是比较好的：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p.GetCoordinates(out var x, out var y);</div></pre></td></tr></table></figure>
<h3 id="输出参数的一种常见用法是Try模式，其中一个布尔返回值表示成功，输出参数就会携带所获的结果："><a href="#输出参数的一种常见用法是Try模式，其中一个布尔返回值表示成功，输出参数就会携带所获的结果：" class="headerlink" title="输出参数的一种常见用法是Try模式，其中一个布尔返回值表示成功，输出参数就会携带所获的结果："></a>输出参数的一种常见用法是Try模式，其中一个布尔返回值表示成功，输出参数就会携带所获的结果：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public void PrintStars(string s)</div><div class="line">&#123;  </div><div class="line"> if (int.TryParse(s, out var i))</div><div class="line">&#123;</div><div class="line">WriteLine(new string(&apos;*&apos;, i));</div><div class="line">&#125;  </div><div class="line"> else</div><div class="line">&#123;</div><div class="line">WriteLine(&quot;Cloudy - no stars tonight!&quot;);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="注意：这里i只用在-if-语句来定义它，所以-Preview-4-可以将这个处理的很好。"><a href="#注意：这里i只用在-if-语句来定义它，所以-Preview-4-可以将这个处理的很好。" class="headerlink" title="注意：这里i只用在 if 语句来定义它，所以 Preview 4 可以将这个处理的很好。"></a>注意：这里i只用在 if 语句来定义它，所以 Preview 4 可以将这个处理的很好。</h3><h3 id="我们计划允许以-a-为形式的“通配符”作为输出参数，这会让你忽略了你不关心参数："><a href="#我们计划允许以-a-为形式的“通配符”作为输出参数，这会让你忽略了你不关心参数：" class="headerlink" title="我们计划允许以 a* 为形式的“通配符”作为输出参数，这会让你忽略了你不关心参数："></a>我们计划允许以 a* 为形式的“通配符”作为输出参数，这会让你忽略了你不关心参数：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p.GetCoordinates(out int x, out *); // I only care about x</div></pre></td></tr></table></figure>
<h3 id="Note：在-C-7-0-中是否会包含通配符还不确定。"><a href="#Note：在-C-7-0-中是否会包含通配符还不确定。" class="headerlink" title="Note：在 C#7.0 中是否会包含通配符还不确定。"></a>Note：在 C#7.0 中是否会包含通配符还不确定。</h3><h2 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h2><h3 id="C＃-7-0-引入了模式概念。抽象地讲，模式是句法元素，能用来测试一个数据是否具有某种“形”，并在被应用时，从值中提取有效信息。"><a href="#C＃-7-0-引入了模式概念。抽象地讲，模式是句法元素，能用来测试一个数据是否具有某种“形”，并在被应用时，从值中提取有效信息。" class="headerlink" title="C＃ 7.0 引入了模式概念。抽象地讲，模式是句法元素，能用来测试一个数据是否具有某种“形”，并在被应用时，从值中提取有效信息。"></a>C＃ 7.0 引入了模式概念。抽象地讲，模式是句法元素，能用来测试一个数据是否具有某种“形”，并在被应用时，从值中提取有效信息。</h3><h3 id="C＃7-0-中的模式示例："><a href="#C＃7-0-中的模式示例：" class="headerlink" title="C＃7.0 中的模式示例："></a>C＃7.0 中的模式示例：</h3><ul>
<li>C 形式的常量模式（C是C#中的常量表达式），可以测试输入是否等于C</li>
<li>T X 形式的类型模式（T是一种类型、X是一个标识符），可以测试输入是否是T类型，如果是，会将输入值提取成T类型的新变量X</li>
<li>Var x 形式的 Var 模式（x是一个标识符），它总是匹配的，并简单地将输入值以它原本的类型存入一个新变量X中。</li>
</ul>
<h3 id="这仅仅是个开始-模式是一种新型的-C＃-中的语言元素。未来，我们希望增加更多的模式到-C-中。"><a href="#这仅仅是个开始-模式是一种新型的-C＃-中的语言元素。未来，我们希望增加更多的模式到-C-中。" class="headerlink" title="这仅仅是个开始 - 模式是一种新型的 C＃ 中的语言元素。未来，我们希望增加更多的模式到 C# 中。"></a>这仅仅是个开始 - 模式是一种新型的 C＃ 中的语言元素。未来，我们希望增加更多的模式到 C# 中。</h3><h3 id="在-C＃7-0，我们正在加强两个现有的具有模式的语言结构："><a href="#在-C＃7-0，我们正在加强两个现有的具有模式的语言结构：" class="headerlink" title="在 C＃7.0，我们正在加强两个现有的具有模式的语言结构："></a>在 C＃7.0，我们正在加强两个现有的具有模式的语言结构：</h3><ul>
<li>is 表达式现在具有一种右手侧的模式，而不仅仅是一种类型</li>
<li>switch 语句中的 case 语句现在可以使用匹配模式，不只是常数值在 C＃的未来版本中，我们可能会增加更多的被用到的模式。</li>
</ul>
<h3 id="具有模式的-IS-表达式"><a href="#具有模式的-IS-表达式" class="headerlink" title="具有模式的 IS 表达式"></a>具有模式的 IS 表达式</h3><h3 id="下面是使用-is-表达式的示例，其中利用了常量模式和类型模式："><a href="#下面是使用-is-表达式的示例，其中利用了常量模式和类型模式：" class="headerlink" title="下面是使用 is 表达式的示例，其中利用了常量模式和类型模式："></a>下面是使用 is 表达式的示例，其中利用了常量模式和类型模式：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public void PrintStars(object o)</div><div class="line">&#123;    if (o is null)</div><div class="line">return;     // constant pattern &quot;null&quot;</div><div class="line">    if (!(o is int i))</div><div class="line">return; // type pattern &quot;int i&quot;</div><div class="line">    WriteLine(new string(&apos;*&apos;, i));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="正如你们看到，模式变量（模式引入的变量）和早前描述的输出变量比较类似，它们可以在表达式中间声明，并在最近的范围内使用。就像输出变量一样，模式变量是可变的。"><a href="#正如你们看到，模式变量（模式引入的变量）和早前描述的输出变量比较类似，它们可以在表达式中间声明，并在最近的范围内使用。就像输出变量一样，模式变量是可变的。" class="headerlink" title="正如你们看到，模式变量（模式引入的变量）和早前描述的输出变量比较类似，它们可以在表达式中间声明，并在最近的范围内使用。就像输出变量一样，模式变量是可变的。"></a>正如你们看到，模式变量（模式引入的变量）和早前描述的输出变量比较类似，它们可以在表达式中间声明，并在最近的范围内使用。就像输出变量一样，模式变量是可变的。</h3><h3 id="注：就像输出变量一样，严格范围规则适用于Preview-4。"><a href="#注：就像输出变量一样，严格范围规则适用于Preview-4。" class="headerlink" title="注：就像输出变量一样，严格范围规则适用于Preview 4。"></a>注：就像输出变量一样，严格范围规则适用于Preview 4。</h3><h3 id="模式和-Try方法可以很好地协同："><a href="#模式和-Try方法可以很好地协同：" class="headerlink" title="模式和 Try方法可以很好地协同："></a>模式和 Try方法可以很好地协同：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if (o is int i || (o is string s &amp;&amp; int.TryParse(s, out i)) &#123; /* use i */ &#125;</div></pre></td></tr></table></figure>
<h2 id="具有模式的-Switch-语句"><a href="#具有模式的-Switch-语句" class="headerlink" title="具有模式的 Switch 语句"></a>具有模式的 Switch 语句</h2><h3 id="我们正在归纳-Switch-语句："><a href="#我们正在归纳-Switch-语句：" class="headerlink" title="我们正在归纳 Switch 语句："></a>我们正在归纳 Switch 语句：</h3><h3 id="可以设定任何类型的-Switch-语句（不只是原始类型）"><a href="#可以设定任何类型的-Switch-语句（不只是原始类型）" class="headerlink" title="可以设定任何类型的 Switch 语句（不只是原始类型）"></a>可以设定任何类型的 Switch 语句（不只是原始类型）</h3><h3 id="模式可以用在-case-语句中"><a href="#模式可以用在-case-语句中" class="headerlink" title="模式可以用在 case 语句中"></a>模式可以用在 case 语句中</h3><h3 id="Case-语句可以有特殊的条件"><a href="#Case-语句可以有特殊的条件" class="headerlink" title="Case 语句可以有特殊的条件"></a>Case 语句可以有特殊的条件</h3><h3 id="下面是一个简单的例子："><a href="#下面是一个简单的例子：" class="headerlink" title="下面是一个简单的例子："></a>下面是一个简单的例子：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">switch(shape)</div><div class="line">&#123;    case Circle c:</div><div class="line">              WriteLine($&quot;circle with radius &#123;c.Radius&#125;&quot;);    </div><div class="line">   break;  </div><div class="line"> case Rectangle s when (s.Length == s.Height):</div><div class="line">               WriteLine($&quot;&#123;s.Length&#125; x &#123;s.Height&#125; square&quot;);        </div><div class="line">break;    </div><div class="line">case Rectangle r:</div><div class="line">                WriteLine($&quot;&#123;r.Length&#125; x &#123;r.Height&#125; rectangle&quot;);  </div><div class="line">     break;  </div><div class="line"> default:</div><div class="line">        WriteLine(&quot;&lt;unknown shape&gt;&quot;);      </div><div class="line"> break;</div><div class="line"> case null:    </div><div class="line">   throw new ArgumentNullException(nameof(shape));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="关于新扩展的-switch-语句，有几点需要注意："><a href="#关于新扩展的-switch-语句，有几点需要注意：" class="headerlink" title="关于新扩展的 switch 语句，有几点需要注意："></a>关于新扩展的 switch 语句，有几点需要注意：</h3><h3 id="Case-语句的顺序现在变得重要：就像-catch-语句一样，case-语句的范围现在可以相交，第一个匹配上的会被选中。此外，就像-catch-语句一样，编译器通过去除明显不会进入的-case-来帮助你。在此之前，你甚至不需要告诉判断的顺序，所以这并不是一个使用-case-语句的巨大的改变。"><a href="#Case-语句的顺序现在变得重要：就像-catch-语句一样，case-语句的范围现在可以相交，第一个匹配上的会被选中。此外，就像-catch-语句一样，编译器通过去除明显不会进入的-case-来帮助你。在此之前，你甚至不需要告诉判断的顺序，所以这并不是一个使用-case-语句的巨大的改变。" class="headerlink" title="Case 语句的顺序现在变得重要：就像 catch 语句一样，case 语句的范围现在可以相交，第一个匹配上的会被选中。此外，就像 catch 语句一样，编译器通过去除明显不会进入的 case 来帮助你。在此之前，你甚至不需要告诉判断的顺序，所以这并不是一个使用 case 语句的巨大的改变。"></a>Case 语句的顺序现在变得重要：就像 catch 语句一样，case 语句的范围现在可以相交，第一个匹配上的会被选中。此外，就像 catch 语句一样，编译器通过去除明显不会进入的 case 来帮助你。在此之前，你甚至不需要告诉判断的顺序，所以这并不是一个使用 case 语句的巨大的改变。</h3><h3 id="默认的语句还是最后被判断：尽管-null-的-case-语句在最后语句之前出现，它也会在默认语句被选中之前被测试。这是与现有-Switch-语义兼容的。然而，好的做法通常会将默认语句放到最后。"><a href="#默认的语句还是最后被判断：尽管-null-的-case-语句在最后语句之前出现，它也会在默认语句被选中之前被测试。这是与现有-Switch-语义兼容的。然而，好的做法通常会将默认语句放到最后。" class="headerlink" title="默认的语句还是最后被判断：尽管 null 的 case 语句在最后语句之前出现，它也会在默认语句被选中之前被测试。这是与现有 Switch 语义兼容的。然而，好的做法通常会将默认语句放到最后。"></a>默认的语句还是最后被判断：尽管 null 的 case 语句在最后语句之前出现，它也会在默认语句被选中之前被测试。这是与现有 Switch 语义兼容的。然而，好的做法通常会将默认语句放到最后。</h3><h3 id="Switch-不会到最后的-null-语句：这是因为当前-IS-表达式的例子具有类型匹配，不会匹配到-null。这保证了空值不会不小心被任何的类型模式匹配上的情况-你必须更明确如何处理它们（或放弃它而使用默认语句）。"><a href="#Switch-不会到最后的-null-语句：这是因为当前-IS-表达式的例子具有类型匹配，不会匹配到-null。这保证了空值不会不小心被任何的类型模式匹配上的情况-你必须更明确如何处理它们（或放弃它而使用默认语句）。" class="headerlink" title="Switch 不会到最后的 null 语句：这是因为当前 IS 表达式的例子具有类型匹配，不会匹配到 null。这保证了空值不会不小心被任何的类型模式匹配上的情况;你必须更明确如何处理它们（或放弃它而使用默认语句）。"></a>Switch 不会到最后的 null 语句：这是因为当前 IS 表达式的例子具有类型匹配，不会匹配到 null。这保证了空值不会不小心被任何的类型模式匹配上的情况;你必须更明确如何处理它们（或放弃它而使用默认语句）。</h3><h3 id="通过一个-case-引入模式变量-标签仅在相应的-Switch-范围内。"><a href="#通过一个-case-引入模式变量-标签仅在相应的-Switch-范围内。" class="headerlink" title="通过一个 case 引入模式变量:标签仅在相应的 Switch 范围内。"></a>通过一个 case 引入模式变量:标签仅在相应的 Switch 范围内。</h3><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><h3 id="这是一个从方法中返回多个值的常见模式。目前可选用的选项并非是最佳的："><a href="#这是一个从方法中返回多个值的常见模式。目前可选用的选项并非是最佳的：" class="headerlink" title="这是一个从方法中返回多个值的常见模式。目前可选用的选项并非是最佳的："></a>这是一个从方法中返回多个值的常见模式。目前可选用的选项并非是最佳的：</h3><h3 id="输出参数：使用起来比较笨拙（即使有上述的改进），他们在使用异步方法是不起作用的。"><a href="#输出参数：使用起来比较笨拙（即使有上述的改进），他们在使用异步方法是不起作用的。" class="headerlink" title="输出参数：使用起来比较笨拙（即使有上述的改进），他们在使用异步方法是不起作用的。"></a>输出参数：使用起来比较笨拙（即使有上述的改进），他们在使用异步方法是不起作用的。</h3><h3 id="System-Tuple-lt-…-gt-返回类型：冗余使用和请求一个元组对象的分配。"><a href="#System-Tuple-lt-…-gt-返回类型：冗余使用和请求一个元组对象的分配。" class="headerlink" title="System.Tuple&lt;…&gt; 返回类型：冗余使用和请求一个元组对象的分配。"></a>System.Tuple&lt;…&gt; 返回类型：冗余使用和请求一个元组对象的分配。</h3><h3 id="方法的定制传输类型：对于类型，具有大量的代码开销，其目的只是暂时将一些值组合起来。"><a href="#方法的定制传输类型：对于类型，具有大量的代码开销，其目的只是暂时将一些值组合起来。" class="headerlink" title="方法的定制传输类型：对于类型，具有大量的代码开销，其目的只是暂时将一些值组合起来。"></a>方法的定制传输类型：对于类型，具有大量的代码开销，其目的只是暂时将一些值组合起来。</h3><h3 id="通过动态返回类型返回匿名类型：很高的性能开销，没有静态类型检查。"><a href="#通过动态返回类型返回匿名类型：很高的性能开销，没有静态类型检查。" class="headerlink" title="通过动态返回类型返回匿名类型：很高的性能开销，没有静态类型检查。"></a>通过动态返回类型返回匿名类型：很高的性能开销，没有静态类型检查。</h3><h3 id="在这点要做到更好，C＃7-0-增加的元组类型和元组文字："><a href="#在这点要做到更好，C＃7-0-增加的元组类型和元组文字：" class="headerlink" title="在这点要做到更好，C＃7.0 增加的元组类型和元组文字："></a>在这点要做到更好，C＃7.0 增加的元组类型和元组文字：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(string, string, string) LookupName(long id) // tuple return type&#123;</div><div class="line">    ... // retrieve first, middle and last from data storage</div><div class="line">    return (first, middle, last); // tuple literal</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="这个方法可以有效地返回三个字符串，以元素的形式包含在一个元组值里。"><a href="#这个方法可以有效地返回三个字符串，以元素的形式包含在一个元组值里。" class="headerlink" title="这个方法可以有效地返回三个字符串，以元素的形式包含在一个元组值里。"></a>这个方法可以有效地返回三个字符串，以元素的形式包含在一个元组值里。</h3><h3 id="这种方法的调用将会收到一个元组，并且可以单独地访问其中的元素："><a href="#这种方法的调用将会收到一个元组，并且可以单独地访问其中的元素：" class="headerlink" title="这种方法的调用将会收到一个元组，并且可以单独地访问其中的元素："></a>这种方法的调用将会收到一个元组，并且可以单独地访问其中的元素：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var names = LookupName(id);</div><div class="line">WriteLine($&quot;found &#123;names.Item1&#125; &#123;names.Item3&#125;.&quot;);</div></pre></td></tr></table></figure>
<h3 id="Item1-等是元组元素的默认名称，也可以被一直使用。但他们不具有描述性，所以你可以选择添加更好的："><a href="#Item1-等是元组元素的默认名称，也可以被一直使用。但他们不具有描述性，所以你可以选择添加更好的：" class="headerlink" title="Item1 等是元组元素的默认名称，也可以被一直使用。但他们不具有描述性，所以你可以选择添加更好的："></a>Item1 等是元组元素的默认名称，也可以被一直使用。但他们不具有描述性，所以你可以选择添加更好的：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(string first, string middle, string last) LookupName(long id) // tuple elements have names</div></pre></td></tr></table></figure>
<h3 id="现在元组的接收者有多个具有描述性的名称可用："><a href="#现在元组的接收者有多个具有描述性的名称可用：" class="headerlink" title="现在元组的接收者有多个具有描述性的名称可用："></a>现在元组的接收者有多个具有描述性的名称可用：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var names = LookupName(id);</div><div class="line">WriteLine($&quot;found &#123;names.first&#125; &#123;names.last&#125;.&quot;);</div></pre></td></tr></table></figure>
<h3 id="你也可以直接在元组文字指定元素名称："><a href="#你也可以直接在元组文字指定元素名称：" class="headerlink" title="你也可以直接在元组文字指定元素名称："></a>你也可以直接在元组文字指定元素名称：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">return (first: first, middle: middle, last: last); // named tuple elements in a literal</div></pre></td></tr></table></figure>
<h3 id="一般可以给元组类型分配一些彼此无关的名称：只要各个元素是可分配的，元组类型就可以自如地转换为其他的元组类型。也有一些限制，特别是对元组文字，即常见的和告警错误，如不慎交换元素名称的情况下，就会出现错误。"><a href="#一般可以给元组类型分配一些彼此无关的名称：只要各个元素是可分配的，元组类型就可以自如地转换为其他的元组类型。也有一些限制，特别是对元组文字，即常见的和告警错误，如不慎交换元素名称的情况下，就会出现错误。" class="headerlink" title="一般可以给元组类型分配一些彼此无关的名称：只要各个元素是可分配的，元组类型就可以自如地转换为其他的元组类型。也有一些限制，特别是对元组文字，即常见的和告警错误，如不慎交换元素名称的情况下，就会出现错误。"></a>一般可以给元组类型分配一些彼此无关的名称：只要各个元素是可分配的，元组类型就可以自如地转换为其他的元组类型。也有一些限制，特别是对元组文字，即常见的和告警错误，如不慎交换元素名称的情况下，就会出现错误。</h3><h3 id="Note：这些限制尚未在-Preview-4-中实现。"><a href="#Note：这些限制尚未在-Preview-4-中实现。" class="headerlink" title="Note：这些限制尚未在 Preview 4 中实现。"></a>Note：这些限制尚未在 Preview 4 中实现。</h3><h3 id="元组是值类型的，它们的元素是公开的，可变的。他们有值相等，如果所有的元素都是成对相等的（并且具有相同的哈希值），那么这两个元组也是相等的（并且具有相同的哈希值）。"><a href="#元组是值类型的，它们的元素是公开的，可变的。他们有值相等，如果所有的元素都是成对相等的（并且具有相同的哈希值），那么这两个元组也是相等的（并且具有相同的哈希值）。" class="headerlink" title="元组是值类型的，它们的元素是公开的，可变的。他们有值相等，如果所有的元素都是成对相等的（并且具有相同的哈希值），那么这两个元组也是相等的（并且具有相同的哈希值）。"></a>元组是值类型的，它们的元素是公开的，可变的。他们有值相等，如果所有的元素都是成对相等的（并且具有相同的哈希值），那么这两个元组也是相等的（并且具有相同的哈希值）。</h3><h3 id="这使得在需要返回多个值的情况下，元组会非常有用。举例来说，如果你需要多个-key-值的字典，使用元组作为你的-key-值，一切会非常顺利。如果你需要在每个位置都具有多个值的列表，使用元组进行列表搜索，会工作的很好。"><a href="#这使得在需要返回多个值的情况下，元组会非常有用。举例来说，如果你需要多个-key-值的字典，使用元组作为你的-key-值，一切会非常顺利。如果你需要在每个位置都具有多个值的列表，使用元组进行列表搜索，会工作的很好。" class="headerlink" title="这使得在需要返回多个值的情况下，元组会非常有用。举例来说，如果你需要多个 key 值的字典，使用元组作为你的 key 值，一切会非常顺利。如果你需要在每个位置都具有多个值的列表，使用元组进行列表搜索，会工作的很好。"></a>这使得在需要返回多个值的情况下，元组会非常有用。举例来说，如果你需要多个 key 值的字典，使用元组作为你的 key 值，一切会非常顺利。如果你需要在每个位置都具有多个值的列表，使用元组进行列表搜索，会工作的很好。</h3><h3 id="Note：元组依赖于一组基本类型，却不包括在-Preview-4-中。为了使该特性工作，你可以通过-NuGet-获取它们："><a href="#Note：元组依赖于一组基本类型，却不包括在-Preview-4-中。为了使该特性工作，你可以通过-NuGet-获取它们：" class="headerlink" title="Note：元组依赖于一组基本类型，却不包括在 Preview 4 中。为了使该特性工作，你可以通过 NuGet 获取它们："></a>Note：元组依赖于一组基本类型，却不包括在 Preview 4 中。为了使该特性工作，你可以通过 NuGet 获取它们：</h3><h3 id="右键单击-Solution-Explorer-中的项目，然后选择“管理的NuGet包……”"><a href="#右键单击-Solution-Explorer-中的项目，然后选择“管理的NuGet包……”" class="headerlink" title="右键单击 Solution Explorer 中的项目，然后选择“管理的NuGet包……”"></a>右键单击 Solution Explorer 中的项目，然后选择“管理的NuGet包……”</h3><h3 id="选择“Browse”选项卡，选中“Include-prerelease”，选择“nuget-org”作为“Package-source”"><a href="#选择“Browse”选项卡，选中“Include-prerelease”，选择“nuget-org”作为“Package-source”" class="headerlink" title="选择“Browse”选项卡，选中“Include prerelease”，选择“nuget.org”作为“Package source”"></a>选择“Browse”选项卡，选中“Include prerelease”，选择“nuget.org”作为“Package source”</h3><h3 id="搜索“System-ValueTuple”并安装它。"><a href="#搜索“System-ValueTuple”并安装它。" class="headerlink" title="搜索“System.ValueTuple”并安装它。"></a>搜索“System.ValueTuple”并安装它。</h3><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><h3 id="消耗元组的另一种方法是将解构它们。一个解构声明是一个将元组（或其他值）分割成部分并单独分配到新变量的语法："><a href="#消耗元组的另一种方法是将解构它们。一个解构声明是一个将元组（或其他值）分割成部分并单独分配到新变量的语法：" class="headerlink" title="消耗元组的另一种方法是将解构它们。一个解构声明是一个将元组（或其他值）分割成部分并单独分配到新变量的语法："></a>消耗元组的另一种方法是将解构它们。一个解构声明是一个将元组（或其他值）分割成部分并单独分配到新变量的语法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(string first, string middle, string last) = LookupName(id1);</div><div class="line">// deconstructing declaration</div><div class="line">WriteLine($&quot;found &#123;first&#125; &#123;last&#125;.&quot;);</div></pre></td></tr></table></figure>
<h3 id="在解构声明中，您可以使用-var-来声明单独的变量："><a href="#在解构声明中，您可以使用-var-来声明单独的变量：" class="headerlink" title="在解构声明中，您可以使用 var 来声明单独的变量："></a>在解构声明中，您可以使用 var 来声明单独的变量：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(var first, var middle, var last) = LookupName(id1); // var inside</div></pre></td></tr></table></figure>
<p>或者将一个单独的 var 作为一个缩写放入圆括号外面：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var (first, middle, last) = LookupName(id1); // var outside</div></pre></td></tr></table></figure>
<p>你也可以使用解构任务来解构成现有的变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(first, middle, last) = LookupName(id2); // deconstructing assignment</div></pre></td></tr></table></figure>
<h3 id="解构不只是应用于元组。任何的类型都可以被解构，只要它具有（实例或扩展）的解构方法："><a href="#解构不只是应用于元组。任何的类型都可以被解构，只要它具有（实例或扩展）的解构方法：" class="headerlink" title="解构不只是应用于元组。任何的类型都可以被解构，只要它具有（实例或扩展）的解构方法："></a>解构不只是应用于元组。任何的类型都可以被解构，只要它具有（实例或扩展）的解构方法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public void Deconstruct(out T1 x1, ..., out Tn xn) &#123; ... &#125;</div></pre></td></tr></table></figure>
<h3 id="输出参数构成了解构结果中的值。"><a href="#输出参数构成了解构结果中的值。" class="headerlink" title="输出参数构成了解构结果中的值。"></a>输出参数构成了解构结果中的值。</h3><h3 id="（为什么它使用了参数，而不是返回一个元组？这是为了让你针对不同的值拥有多个重载）。"><a href="#（为什么它使用了参数，而不是返回一个元组？这是为了让你针对不同的值拥有多个重载）。" class="headerlink" title="（为什么它使用了参数，而不是返回一个元组？这是为了让你针对不同的值拥有多个重载）。"></a>（为什么它使用了参数，而不是返回一个元组？这是为了让你针对不同的值拥有多个重载）。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class Point</div><div class="line">&#123;  </div><div class="line"> public int X &#123; get; &#125;    public int Y &#123; get; &#125; </div><div class="line">    public Point(int x, int y) &#123; X = x; Y = y; &#125;  </div><div class="line"> public void Deconstruct(out int x, out int y) &#123; x = X; y = Y; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">(var myX, var myY) = GetPoint(); // calls Deconstruct(out myX, out myY);</div></pre></td></tr></table></figure>
<h3 id="这是一种常见的模式，以一种对称的方式包含了构建和解构。"><a href="#这是一种常见的模式，以一种对称的方式包含了构建和解构。" class="headerlink" title="这是一种常见的模式，以一种对称的方式包含了构建和解构。"></a>这是一种常见的模式，以一种对称的方式包含了构建和解构。</h3><h3 id="对于输出变量，我们计划在解构中加入通配符，来化简你不关心的变量："><a href="#对于输出变量，我们计划在解构中加入通配符，来化简你不关心的变量：" class="headerlink" title="对于输出变量，我们计划在解构中加入通配符，来化简你不关心的变量："></a>对于输出变量，我们计划在解构中加入通配符，来化简你不关心的变量：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(var myX, *) = GetPoint(); // I only care about myX</div></pre></td></tr></table></figure>
<h3 id="Note：通配符是否会出现在C＃7-0中，这仍是未知数。"><a href="#Note：通配符是否会出现在C＃7-0中，这仍是未知数。" class="headerlink" title="Note：通配符是否会出现在C＃7.0中，这仍是未知数。"></a>Note：通配符是否会出现在C＃7.0中，这仍是未知数。</h3><h2 id="局部函数"><a href="#局部函数" class="headerlink" title="局部函数"></a>局部函数</h2><h3 id="有时候，一个辅助函数可以在一个独立函数内部起作用。现在，你可以以一个局部函数的方式在其它函数内部声明这样的函数："><a href="#有时候，一个辅助函数可以在一个独立函数内部起作用。现在，你可以以一个局部函数的方式在其它函数内部声明这样的函数：" class="headerlink" title="有时候，一个辅助函数可以在一个独立函数内部起作用。现在，你可以以一个局部函数的方式在其它函数内部声明这样的函数："></a>有时候，一个辅助函数可以在一个独立函数内部起作用。现在，你可以以一个局部函数的方式在其它函数内部声明这样的函数：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public int Fibonacci(int x)</div><div class="line">&#123;    if (x &lt; 0)</div><div class="line">throw new ArgumentException(&quot;Less negativity please!&quot;, nameof(x));  </div><div class="line"> return Fib(x).current;</div><div class="line"></div><div class="line">    (int current, int previous) Fib(int i)</div><div class="line">    &#123;      </div><div class="line"> if (i == 0)</div><div class="line">return (1, 0);      </div><div class="line"> var (p, pp) = Fib(i - 1);    </div><div class="line">   return (p + pp, p);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="闭合范围内的参数和局部变量在局部函数的内部是可用的，就如同它们在-lambda-表达式中一样。"><a href="#闭合范围内的参数和局部变量在局部函数的内部是可用的，就如同它们在-lambda-表达式中一样。" class="headerlink" title="闭合范围内的参数和局部变量在局部函数的内部是可用的，就如同它们在 lambda 表达式中一样。"></a>闭合范围内的参数和局部变量在局部函数的内部是可用的，就如同它们在 lambda 表达式中一样。</h3><h3 id="举一个例子，迭代的方法实现通常需要一个非迭代的封装方法，以便在调用时检查实参。（迭代器本身不启动运行，直到-MoveNext-被调用）。局部函数非常适合这样的场景："><a href="#举一个例子，迭代的方法实现通常需要一个非迭代的封装方法，以便在调用时检查实参。（迭代器本身不启动运行，直到-MoveNext-被调用）。局部函数非常适合这样的场景：" class="headerlink" title="举一个例子，迭代的方法实现通常需要一个非迭代的封装方法，以便在调用时检查实参。（迭代器本身不启动运行，直到 MoveNext 被调用）。局部函数非常适合这样的场景："></a>举一个例子，迭代的方法实现通常需要一个非迭代的封装方法，以便在调用时检查实参。（迭代器本身不启动运行，直到 MoveNext 被调用）。局部函数非常适合这样的场景：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public IEnumerable&lt;T&gt; Filter&lt;T&gt;(IEnumerable&lt;T&gt; source, Func&lt;T, bool&gt; filter)</div><div class="line">&#123;  </div><div class="line"> if (source == null)</div><div class="line">throw new ArgumentNullException(nameof(source));  </div><div class="line"> if (filter == null)</div><div class="line">throw new ArgumentNullException(nameof(filter)); </div><div class="line">    return Iterator();</div><div class="line"></div><div class="line">    IEnumerable&lt;T&gt; Iterator()</div><div class="line">    &#123;    </div><div class="line">   foreach (var element in source) </div><div class="line">        &#123;          </div><div class="line"> if (filter(element)) &#123; yield return element; &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="如果迭代器有一个私有方法传递给过滤器，那么当其它成员意外的使用迭代器时，迭代器也变得可用（即使没有参数检查）。此外，还会采取相同的实参作为过滤器，以便替换范围内的参数。"><a href="#如果迭代器有一个私有方法传递给过滤器，那么当其它成员意外的使用迭代器时，迭代器也变得可用（即使没有参数检查）。此外，还会采取相同的实参作为过滤器，以便替换范围内的参数。" class="headerlink" title="如果迭代器有一个私有方法传递给过滤器，那么当其它成员意外的使用迭代器时，迭代器也变得可用（即使没有参数检查）。此外，还会采取相同的实参作为过滤器，以便替换范围内的参数。"></a>如果迭代器有一个私有方法传递给过滤器，那么当其它成员意外的使用迭代器时，迭代器也变得可用（即使没有参数检查）。此外，还会采取相同的实参作为过滤器，以便替换范围内的参数。</h3><h3 id="注意：在-Preview-4，局部函数在调用之前，必须被声明。这个限制将会被松开，以便使得局部函数从定义分配中读取时，能够被调用。"><a href="#注意：在-Preview-4，局部函数在调用之前，必须被声明。这个限制将会被松开，以便使得局部函数从定义分配中读取时，能够被调用。" class="headerlink" title="注意：在 Preview 4，局部函数在调用之前，必须被声明。这个限制将会被松开，以便使得局部函数从定义分配中读取时，能够被调用。"></a>注意：在 Preview 4，局部函数在调用之前，必须被声明。这个限制将会被松开，以便使得局部函数从定义分配中读取时，能够被调用。</h3><h2 id="文字改进"><a href="#文字改进" class="headerlink" title="文字改进"></a>文字改进</h2><h3 id="C＃7-0-允许-出现，作为数字分隔号："><a href="#C＃7-0-允许-出现，作为数字分隔号：" class="headerlink" title="C＃7.0 允许 _ 出现，作为数字分隔号："></a>C＃7.0 允许 _ 出现，作为数字分隔号：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var d = 123_456;</div><div class="line">var x = 0xAB_CD_EF;</div></pre></td></tr></table></figure>
<h3 id="你可以将-放入任意的数字之间，以提高可读性，它们对值没有影响。"><a href="#你可以将-放入任意的数字之间，以提高可读性，它们对值没有影响。" class="headerlink" title="你可以将 _ 放入任意的数字之间，以提高可读性，它们对值没有影响。"></a>你可以将 _ 放入任意的数字之间，以提高可读性，它们对值没有影响。</h3><h3 id="此外，C＃7-0-引入了二进制文字，这样你就可以指定二进制模式而不用去了解十六进制。"><a href="#此外，C＃7-0-引入了二进制文字，这样你就可以指定二进制模式而不用去了解十六进制。" class="headerlink" title="此外，C＃7.0 引入了二进制文字，这样你就可以指定二进制模式而不用去了解十六进制。"></a>此外，C＃7.0 引入了二进制文字，这样你就可以指定二进制模式而不用去了解十六进制。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var b = 0b1010_1011_1100_1101_1110_1111;</div></pre></td></tr></table></figure>
<h3 id="引用返回和局部引用"><a href="#引用返回和局部引用" class="headerlink" title="引用返回和局部引用"></a>引用返回和局部引用</h3><h3 id="就像在-C-中通过引用来传递参数（使用引用修改器），你现在也可以通过引用来返回参数，同样也可以以局部变量的方式存储参数。"><a href="#就像在-C-中通过引用来传递参数（使用引用修改器），你现在也可以通过引用来返回参数，同样也可以以局部变量的方式存储参数。" class="headerlink" title="就像在 C# 中通过引用来传递参数（使用引用修改器），你现在也可以通过引用来返回参数，同样也可以以局部变量的方式存储参数。"></a>就像在 C# 中通过引用来传递参数（使用引用修改器），你现在也可以通过引用来返回参数，同样也可以以局部变量的方式存储参数。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public ref int Find(int number, int[] numbers)</div><div class="line">&#123;    </div><div class="line">for (int i = 0; i &lt; numbers.Length; i++)</div><div class="line">     &#123;    </div><div class="line">   if (numbers[i] == number) </div><div class="line">            &#123;    </div><div class="line">       return ref numbers[i];</div><div class="line">// return the storage location, not the value    &#125;</div><div class="line">        &#125;  </div><div class="line"> throw new IndexOutOfRangeException($&quot;&#123;nameof(number)&#125; not found&quot;);</div><div class="line">&#125; </div><div class="line">int[] array = &#123; 1, 15, -39, 0, 7, 14, -12 &#125;;</div><div class="line">ref int place = ref Find(7, array); // aliases 7&apos;s place in the arrayplace = 9; // replaces 7 with 9 in the arrayWriteLine(array[4]); // prints 9</div></pre></td></tr></table></figure>
<h3 id="这是绕过占位符进入大数据结构的好方法。例如，一个游戏也许会将它的数据保存在大型预分配的阵列结构中（为了避免垃圾回收机制暂停）。方法可以将直接引用返回成一个结构，通过它的调用者可以读取和修改它。"><a href="#这是绕过占位符进入大数据结构的好方法。例如，一个游戏也许会将它的数据保存在大型预分配的阵列结构中（为了避免垃圾回收机制暂停）。方法可以将直接引用返回成一个结构，通过它的调用者可以读取和修改它。" class="headerlink" title="这是绕过占位符进入大数据结构的好方法。例如，一个游戏也许会将它的数据保存在大型预分配的阵列结构中（为了避免垃圾回收机制暂停）。方法可以将直接引用返回成一个结构，通过它的调用者可以读取和修改它。"></a>这是绕过占位符进入大数据结构的好方法。例如，一个游戏也许会将它的数据保存在大型预分配的阵列结构中（为了避免垃圾回收机制暂停）。方法可以将直接引用返回成一个结构，通过它的调用者可以读取和修改它。</h3><h3 id="也有一些限制，以确保安全："><a href="#也有一些限制，以确保安全：" class="headerlink" title="也有一些限制，以确保安全："></a>也有一些限制，以确保安全：</h3><h3 id="你只能返回“安全返回”的引用：一个是传递给你的引用，一个是指向对象中的引用。"><a href="#你只能返回“安全返回”的引用：一个是传递给你的引用，一个是指向对象中的引用。" class="headerlink" title="你只能返回“安全返回”的引用：一个是传递给你的引用，一个是指向对象中的引用。"></a>你只能返回“安全返回”的引用：一个是传递给你的引用，一个是指向对象中的引用。</h3><h3 id="本地引用会被初始化成一个本地存储，并且不能指向另一个存储。"><a href="#本地引用会被初始化成一个本地存储，并且不能指向另一个存储。" class="headerlink" title="本地引用会被初始化成一个本地存储，并且不能指向另一个存储。"></a>本地引用会被初始化成一个本地存储，并且不能指向另一个存储。</h3><h2 id="异步返回类型"><a href="#异步返回类型" class="headerlink" title="异步返回类型"></a>异步返回类型</h2><h3 id="到现在为止，C＃-的异步方法必须返回-void，Task-或-Task。C＃7-0-允许其它类型以这种能从一个方法中返回的方式被定义，因为它们可以以异步方法被返回的方式来定义其它类型。"><a href="#到现在为止，C＃-的异步方法必须返回-void，Task-或-Task。C＃7-0-允许其它类型以这种能从一个方法中返回的方式被定义，因为它们可以以异步方法被返回的方式来定义其它类型。" class="headerlink" title="到现在为止，C＃ 的异步方法必须返回 void，Task 或 Task。C＃7.0 允许其它类型以这种能从一个方法中返回的方式被定义，因为它们可以以异步方法被返回的方式来定义其它类型。"></a>到现在为止，C＃ 的异步方法必须返回 void，Task 或 Task<t>。C＃7.0 允许其它类型以这种能从一个方法中返回的方式被定义，因为它们可以以异步方法被返回的方式来定义其它类型。</t></h3><h3 id="例如我们计划建立一个-ValueTask-结构类型的数据。建立它是为了防止异步运行的结果在等待时已可用的情境下，对-Task-进行分配。对于许多实例中设计缓冲的异步场景，这可以大大减少分配的数量并显著地提升性能。"><a href="#例如我们计划建立一个-ValueTask-结构类型的数据。建立它是为了防止异步运行的结果在等待时已可用的情境下，对-Task-进行分配。对于许多实例中设计缓冲的异步场景，这可以大大减少分配的数量并显著地提升性能。" class="headerlink" title="例如我们计划建立一个 ValueTask 结构类型的数据。建立它是为了防止异步运行的结果在等待时已可用的情境下，对 Task 进行分配。对于许多实例中设计缓冲的异步场景，这可以大大减少分配的数量并显著地提升性能。"></a>例如我们计划建立一个 ValueTask<t> 结构类型的数据。建立它是为了防止异步运行的结果在等待时已可用的情境下，对 Task<t> 进行分配。对于许多实例中设计缓冲的异步场景，这可以大大减少分配的数量并显著地提升性能。</t></t></h3><h3 id="Note：异步返回类型尚未在-Preview-4-中提供。"><a href="#Note：异步返回类型尚未在-Preview-4-中提供。" class="headerlink" title="Note：异步返回类型尚未在 Preview 4 中提供。"></a>Note：异步返回类型尚未在 Preview 4 中提供。</h3><h3 id="更多的-expression-bodied-成员："><a href="#更多的-expression-bodied-成员：" class="headerlink" title="更多的 expression bodied 成员："></a>更多的 expression bodied 成员：</h3><h3 id="expression-bodied-的方法和属性是对-C-6-0-的巨大提升。C-7-0-为-expression-bodied-事件列表增加了访问器，结构器和终结器。"><a href="#expression-bodied-的方法和属性是对-C-6-0-的巨大提升。C-7-0-为-expression-bodied-事件列表增加了访问器，结构器和终结器。" class="headerlink" title="expression bodied 的方法和属性是对 C# 6.0 的巨大提升。C# 7.0 为 expression bodied 事件列表增加了访问器，结构器和终结器。"></a>expression bodied 的方法和属性是对 C# 6.0 的巨大提升。C# 7.0 为 expression bodied 事件列表增加了访问器，结构器和终结器。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class Person</div><div class="line">&#123;  </div><div class="line"> private static ConcurrentDictionary&lt;int, string&gt; names = new ConcurrentDictionary&lt;int, string&gt;();  </div><div class="line"></div><div class="line"> private int id = GetId(); </div><div class="line">    public Person(string name) =&gt; names.TryAdd(id, name); // constructors</div><div class="line">    ~Person() =&gt; names.TryRemove(id, out *);              // destructors</div><div class="line">    public string Name</div><div class="line">    &#123;        get =&gt; names[id];                                 // getters</div><div class="line">        set =&gt; names[id] = value;                         // setters    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Note：这些额外增加的-expression-bodied-的成员尚未在-Preview-4-中提供。"><a href="#Note：这些额外增加的-expression-bodied-的成员尚未在-Preview-4-中提供。" class="headerlink" title="Note：这些额外增加的 expression bodied 的成员尚未在 Preview 4 中提供。"></a>Note：这些额外增加的 expression bodied 的成员尚未在 Preview 4 中提供。</h3><h3 id="这是社区共享的示例，而不是-Microsoft-C-编译团队提供的，还是开源的！"><a href="#这是社区共享的示例，而不是-Microsoft-C-编译团队提供的，还是开源的！" class="headerlink" title="这是社区共享的示例，而不是 Microsoft C# 编译团队提供的，还是开源的！"></a>这是社区共享的示例，而不是 Microsoft C# 编译团队提供的，还是开源的！</h3><h2 id="Throw-表达式"><a href="#Throw-表达式" class="headerlink" title="Throw 表达式"></a>Throw 表达式</h2><h3 id="在表达式中间抛出一个异常是很容易的：只需为自己的代码调用一个方法！但在-C＃7-0-中，我们允许在任意地方抛出一个表达式："><a href="#在表达式中间抛出一个异常是很容易的：只需为自己的代码调用一个方法！但在-C＃7-0-中，我们允许在任意地方抛出一个表达式：" class="headerlink" title="在表达式中间抛出一个异常是很容易的：只需为自己的代码调用一个方法！但在 C＃7.0 中，我们允许在任意地方抛出一个表达式："></a>在表达式中间抛出一个异常是很容易的：只需为自己的代码调用一个方法！但在 C＃7.0 中，我们允许在任意地方抛出一个表达式：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class Person</div><div class="line">&#123;  </div><div class="line"> public string Name &#123; get; &#125;    </div><div class="line">public Person(string name) =&gt; Name = name ?? throw new ArgumentNullException(name);  </div><div class="line"></div><div class="line"> public string GetFirstName()</div><div class="line">            &#123;        </div><div class="line">var parts = Name.Split(&quot; &quot;);  </div><div class="line">     return (parts.Length &gt; 0) ? parts[0] : throw new InvalidOperationException(&quot;No name!&quot;);</div><div class="line">             &#125;    </div><div class="line"></div><div class="line">public string GetLastName() =&gt; throw new NotImplementedException();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Note：Throw-表达式尚未在Preview-4中提供。"><a href="#Note：Throw-表达式尚未在Preview-4中提供。" class="headerlink" title="Note：Throw 表达式尚未在Preview 4中提供。"></a>Note：Throw 表达式尚未在Preview 4中提供。</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;以下将是-C-7-0-中所有计划的语言特性的描述。随着-Visual-Studio-“15”-Preview-4-版本的发布，这些特性中的大部分将活跃起来。现在是时候来展示这些特性，你也告诉借此告诉我们你的想法！&quot;&gt;&lt;a href=&quot;#以下将是-C-7-0-中所有计划的语言特性的描述。随着-Visual-Studio-“15”-Preview-4-版本的发布，这些特性中的大部分将活跃起来。现在是时候来展示这些特性，你也告诉借此告诉我们你的想法！&quot; class=&quot;headerlink&quot; title=&quot;以下将是 C# 7.0 中所有计划的语言特性的描述。随着 Visual Studio “15” Preview 4 版本的发布，这些特性中的大部分将活跃起来。现在是时候来展示这些特性，你也告诉借此告诉我们你的想法！&quot;&gt;&lt;/a&gt;以下将是 C# 7.0 中所有计划的语言特性的描述。随着 Visual Studio “15” Preview 4 版本的发布，这些特性中的大部分将活跃起来。现在是时候来展示这些特性，你也告诉借此告诉我们你的想法！&lt;/h3&gt;&lt;h3 id=&quot;C＃7-0-增加了许多新功能，并专注于数据消费，简化代码和性能的改善。或许最大的特性就是元祖和模式匹配，元祖可以很容易地拥有多个返回结果，而模型匹配可以根据数据的“形”的不同来简化代码。我们希望，将它们结合起来，从而使你的代码更加简洁高效，也可以使你更加快乐并富有成效。&quot;&gt;&lt;a href=&quot;#C＃7-0-增加了许多新功能，并专注于数据消费，简化代码和性能的改善。或许最大的特性就是元祖和模式匹配，元祖可以很容易地拥有多个返回结果，而模型匹配可以根据数据的“形”的不同来简化代码。我们希望，将它们结合起来，从而使你的代码更加简洁高效，也可以使你更加快乐并富有成效。&quot; class=&quot;headerlink&quot; title=&quot;C＃7.0 增加了许多新功能，并专注于数据消费，简化代码和性能的改善。或许最大的特性就是元祖和模式匹配，元祖可以很容易地拥有多个返回结果，而模型匹配可以根据数据的“形”的不同来简化代码。我们希望，将它们结合起来，从而使你的代码更加简洁高效，也可以使你更加快乐并富有成效。&quot;&gt;&lt;/a&gt;C＃7.0 增加了许多新功能，并专注于数据消费，简化代码和性能的改善。或许最大的特性就是元祖和模式匹配，元祖可以很容易地拥有多个返回结果，而模型匹配可以根据数据的“形”的不同来简化代码。我们希望，将它们结合起来，从而使你的代码更加简洁高效，也可以使你更加快乐并富有成效。&lt;/h3&gt;&lt;h3 id=&quot;请点击-Visual-Studio-窗口顶部的反馈按钮，告诉我们哪些是你不期待的特性或者你关于提升这些特性的思考。还有许多功能没有在-Preview-4-版本中实现。接下来我会描述一些我们发布的最终版本里将会起作用的特性，和一些一旦不起作用机即会删除掉的特性。我也是支持对这些计划作出改变，尤其是作为我们从你那儿得到反馈的结果。当最终版本发布时，这些特性中的一些将会改变或者删除。&quot;&gt;&lt;a href=&quot;#请点击-Visual-Studio-窗口顶部的反馈按钮，告诉我们哪些是你不期待的特性或者你关于提升这些特性的思考。还有许多功能没有在-Preview-4-版本中实现。接下来我会描述一些我们发布的最终版本里将会起作用的特性，和一些一旦不起作用机即会删除掉的特性。我也是支持对这些计划作出改变，尤其是作为我们从你那儿得到反馈的结果。当最终版本发布时，这些特性中的一些将会改变或者删除。&quot; class=&quot;headerlink&quot; title=&quot;请点击 Visual Studio 窗口顶部的反馈按钮，告诉我们哪些是你不期待的特性或者你关于提升这些特性的思考。还有许多功能没有在 Preview 4 版本中实现。接下来我会描述一些我们发布的最终版本里将会起作用的特性，和一些一旦不起作用机即会删除掉的特性。我也是支持对这些计划作出改变，尤其是作为我们从你那儿得到反馈的结果。当最终版本发布时，这些特性中的一些将会改变或者删除。&quot;&gt;&lt;/a&gt;请点击 Visual Studio 窗口顶部的反馈按钮，告诉我们哪些是你不期待的特性或者你关于提升这些特性的思考。还有许多功能没有在 Preview 4 版本中实现。接下来我会描述一些我们发布的最终版本里将会起作用的特性，和一些一旦不起作用机即会删除掉的特性。我也是支持对这些计划作出改变，尤其是作为我们从你那儿得到反馈的结果。当最终版本发布时，这些特性中的一些将会改变或者删除。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="C#" scheme="http://xj8c.cc/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>武汉路博特工程科技有限公司实习“满月”工作感受</title>
    <link href="http://xj8c.cc/2016/05/18/internship-experience/"/>
    <id>http://xj8c.cc/2016/05/18/internship-experience/</id>
    <published>2016-05-18T07:27:30.000Z</published>
    <updated>2017-05-26T06:29:50.451Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今天是2016年5月18日，时间过得真快，自上个月18号到今天来公司刚好一个月。这一个月的学习生活，让我学到了很多，不管是技术上还是生活阅历上都得到了很大的提升。"><a href="#今天是2016年5月18日，时间过得真快，自上个月18号到今天来公司刚好一个月。这一个月的学习生活，让我学到了很多，不管是技术上还是生活阅历上都得到了很大的提升。" class="headerlink" title="今天是2016年5月18日，时间过得真快，自上个月18号到今天来公司刚好一个月。这一个月的学习生活，让我学到了很多，不管是技术上还是生活阅历上都得到了很大的提升。"></a>今天是2016年5月18日，时间过得真快，自上个月18号到今天来公司刚好一个月。这一个月的学习生活，让我学到了很多，不管是技术上还是生活阅历上都得到了很大的提升。</h3><h3 id="在公司，和大家相处的都很融洽，大家一起吃饭，一起加班，一起讨论技术。在团队中，有高学历，有低学历，但是大家并不会因为学历的原因而疏远。刚进公司什么都不懂，慢慢的适应了现有的环境，每天上班下班加班，乐此不疲。"><a href="#在公司，和大家相处的都很融洽，大家一起吃饭，一起加班，一起讨论技术。在团队中，有高学历，有低学历，但是大家并不会因为学历的原因而疏远。刚进公司什么都不懂，慢慢的适应了现有的环境，每天上班下班加班，乐此不疲。" class="headerlink" title="在公司，和大家相处的都很融洽，大家一起吃饭，一起加班，一起讨论技术。在团队中，有高学历，有低学历，但是大家并不会因为学历的原因而疏远。刚进公司什么都不懂，慢慢的适应了现有的环境，每天上班下班加班，乐此不疲。"></a>在公司，和大家相处的都很融洽，大家一起吃饭，一起加班，一起讨论技术。在团队中，有高学历，有低学历，但是大家并不会因为学历的原因而疏远。刚进公司什么都不懂，慢慢的适应了现有的环境，每天上班下班加班，乐此不疲。</h3><a id="more"></a>
<h3 id="祝经理，人很随性，对上班工作没有具体的硬性要求，弹性工作，正是我想要的。刚到公司的第一个星期，感觉很轻松，每天到点下班，有很多空余的时间，随着时间的推移，慢慢的有任务了，变得忙起来，每天要加班完成任务。正是这样，才让我得到了提升。从前端到后端再到测试，全接触。"><a href="#祝经理，人很随性，对上班工作没有具体的硬性要求，弹性工作，正是我想要的。刚到公司的第一个星期，感觉很轻松，每天到点下班，有很多空余的时间，随着时间的推移，慢慢的有任务了，变得忙起来，每天要加班完成任务。正是这样，才让我得到了提升。从前端到后端再到测试，全接触。" class="headerlink" title="祝经理，人很随性，对上班工作没有具体的硬性要求，弹性工作，正是我想要的。刚到公司的第一个星期，感觉很轻松，每天到点下班，有很多空余的时间，随着时间的推移，慢慢的有任务了，变得忙起来，每天要加班完成任务。正是这样，才让我得到了提升。从前端到后端再到测试，全接触。"></a>祝经理，人很随性，对上班工作没有具体的硬性要求，弹性工作，正是我想要的。刚到公司的第一个星期，感觉很轻松，每天到点下班，有很多空余的时间，随着时间的推移，慢慢的有任务了，变得忙起来，每天要加班完成任务。正是这样，才让我得到了提升。从前端到后端再到测试，全接触。</h3><h3 id="在我来XXX面试的时候，我已经收到其他公司的offer，之所以选择XXX，我主要从公司环境和公司氛围以及面试者-祝经理-来判定的。我当初既然选择了这里，我就会一如既往的在这里继续学习下去。我对公司的第一印象还是不错的，那么在这里不仅可以得到技能上的提升，还能收获身心的愉悦。"><a href="#在我来XXX面试的时候，我已经收到其他公司的offer，之所以选择XXX，我主要从公司环境和公司氛围以及面试者-祝经理-来判定的。我当初既然选择了这里，我就会一如既往的在这里继续学习下去。我对公司的第一印象还是不错的，那么在这里不仅可以得到技能上的提升，还能收获身心的愉悦。" class="headerlink" title="在我来XXX面试的时候，我已经收到其他公司的offer，之所以选择XXX，我主要从公司环境和公司氛围以及面试者(祝经理)来判定的。我当初既然选择了这里，我就会一如既往的在这里继续学习下去。我对公司的第一印象还是不错的，那么在这里不仅可以得到技能上的提升，还能收获身心的愉悦。"></a>在我来XXX面试的时候，我已经收到其他公司的offer，之所以选择XXX，我主要从公司环境和公司氛围以及面试者(祝经理)来判定的。我当初既然选择了这里，我就会一如既往的在这里继续学习下去。我对公司的第一印象还是不错的，那么在这里不仅可以得到技能上的提升，还能收获身心的愉悦。</h3><h3 id="说说这一个月在公司做的事情吧，其实也没什么，每天的工作日报都已经写得很详细了。第一，主要参与了一个教育局登记系统的项目，完成了几个JS的特效，充当了几次测试，熟悉了一下后天逻辑，完成了几个小的功能点。第二，一个公司自主二次开发的工作流平台，这个主要熟悉了一下流程，不做详解，接下来的重点既是这个。第三，学会若干技术点，比如iis安装部署等若干问题，文件的共享、访问，代码调试技巧等等。还有就是，一些非技术性技能，应该叫软技能吧！待人处事啊，处理工作中的问题啊，填写报销单啊之类的。"><a href="#说说这一个月在公司做的事情吧，其实也没什么，每天的工作日报都已经写得很详细了。第一，主要参与了一个教育局登记系统的项目，完成了几个JS的特效，充当了几次测试，熟悉了一下后天逻辑，完成了几个小的功能点。第二，一个公司自主二次开发的工作流平台，这个主要熟悉了一下流程，不做详解，接下来的重点既是这个。第三，学会若干技术点，比如iis安装部署等若干问题，文件的共享、访问，代码调试技巧等等。还有就是，一些非技术性技能，应该叫软技能吧！待人处事啊，处理工作中的问题啊，填写报销单啊之类的。" class="headerlink" title="说说这一个月在公司做的事情吧，其实也没什么，每天的工作日报都已经写得很详细了。第一，主要参与了一个教育局登记系统的项目，完成了几个JS的特效，充当了几次测试，熟悉了一下后天逻辑，完成了几个小的功能点。第二，一个公司自主二次开发的工作流平台，这个主要熟悉了一下流程，不做详解，接下来的重点既是这个。第三，学会若干技术点，比如iis安装部署等若干问题，文件的共享、访问，代码调试技巧等等。还有就是，一些非技术性技能，应该叫软技能吧！待人处事啊，处理工作中的问题啊，填写报销单啊之类的。"></a>说说这一个月在公司做的事情吧，其实也没什么，每天的工作日报都已经写得很详细了。第一，主要参与了一个教育局登记系统的项目，完成了几个JS的特效，充当了几次测试，熟悉了一下后天逻辑，完成了几个小的功能点。第二，一个公司自主二次开发的工作流平台，这个主要熟悉了一下流程，不做详解，接下来的重点既是这个。第三，学会若干技术点，比如iis安装部署等若干问题，文件的共享、访问，代码调试技巧等等。还有就是，一些非技术性技能，应该叫软技能吧！待人处事啊，处理工作中的问题啊，填写报销单啊之类的。</h3><h3 id="最后就总结一下自己的不足和接下来的计划吧。工作上，有些许不足，不完美的地方。比如，在测试教育局登记系统的时候没有充分测试，有时候为了图速度，准确率不高。测试就是一个心细的活，像我这样可能会适得其反。还有比如JS效果的实现，在我本地是实现了，那么在服务器上了？在不同的浏览器上面呢？没有做好相应的兼容性，都是我的问题所在。"><a href="#最后就总结一下自己的不足和接下来的计划吧。工作上，有些许不足，不完美的地方。比如，在测试教育局登记系统的时候没有充分测试，有时候为了图速度，准确率不高。测试就是一个心细的活，像我这样可能会适得其反。还有比如JS效果的实现，在我本地是实现了，那么在服务器上了？在不同的浏览器上面呢？没有做好相应的兼容性，都是我的问题所在。" class="headerlink" title="最后就总结一下自己的不足和接下来的计划吧。工作上，有些许不足，不完美的地方。比如，在测试教育局登记系统的时候没有充分测试，有时候为了图速度，准确率不高。测试就是一个心细的活，像我这样可能会适得其反。还有比如JS效果的实现，在我本地是实现了，那么在服务器上了？在不同的浏览器上面呢？没有做好相应的兼容性，都是我的问题所在。"></a>最后就总结一下自己的不足和接下来的计划吧。工作上，有些许不足，不完美的地方。比如，在测试教育局登记系统的时候没有充分测试，有时候为了图速度，准确率不高。测试就是一个心细的活，像我这样可能会适得其反。还有比如JS效果的实现，在我本地是实现了，那么在服务器上了？在不同的浏览器上面呢？没有做好相应的兼容性，都是我的问题所在。</h3><h3 id="接下来，我首先会完成公司安排下发的任务，在完成任务的同时，考虑更多的后果，不同的情况，做好相应的测试，确保万无一失。在自己完成任务的同时，学会帮助他人。因为帮助他人就是提升自己。还有就是按照自己的学习计划每天学习，不断进步。有不懂先自己研究，研究不出来问问同事。"><a href="#接下来，我首先会完成公司安排下发的任务，在完成任务的同时，考虑更多的后果，不同的情况，做好相应的测试，确保万无一失。在自己完成任务的同时，学会帮助他人。因为帮助他人就是提升自己。还有就是按照自己的学习计划每天学习，不断进步。有不懂先自己研究，研究不出来问问同事。" class="headerlink" title="接下来，我首先会完成公司安排下发的任务，在完成任务的同时，考虑更多的后果，不同的情况，做好相应的测试，确保万无一失。在自己完成任务的同时，学会帮助他人。因为帮助他人就是提升自己。还有就是按照自己的学习计划每天学习，不断进步。有不懂先自己研究，研究不出来问问同事。"></a>接下来，我首先会完成公司安排下发的任务，在完成任务的同时，考虑更多的后果，不同的情况，做好相应的测试，确保万无一失。在自己完成任务的同时，学会帮助他人。因为帮助他人就是提升自己。还有就是按照自己的学习计划每天学习，不断进步。有不懂先自己研究，研究不出来问问同事。</h3><h3 id="希望接下来的日子，能够共同成长进步！"><a href="#希望接下来的日子，能够共同成长进步！" class="headerlink" title="希望接下来的日子，能够共同成长进步！"></a>希望接下来的日子，能够共同成长进步！</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;今天是2016年5月18日，时间过得真快，自上个月18号到今天来公司刚好一个月。这一个月的学习生活，让我学到了很多，不管是技术上还是生活阅历上都得到了很大的提升。&quot;&gt;&lt;a href=&quot;#今天是2016年5月18日，时间过得真快，自上个月18号到今天来公司刚好一个月。这一个月的学习生活，让我学到了很多，不管是技术上还是生活阅历上都得到了很大的提升。&quot; class=&quot;headerlink&quot; title=&quot;今天是2016年5月18日，时间过得真快，自上个月18号到今天来公司刚好一个月。这一个月的学习生活，让我学到了很多，不管是技术上还是生活阅历上都得到了很大的提升。&quot;&gt;&lt;/a&gt;今天是2016年5月18日，时间过得真快，自上个月18号到今天来公司刚好一个月。这一个月的学习生活，让我学到了很多，不管是技术上还是生活阅历上都得到了很大的提升。&lt;/h3&gt;&lt;h3 id=&quot;在公司，和大家相处的都很融洽，大家一起吃饭，一起加班，一起讨论技术。在团队中，有高学历，有低学历，但是大家并不会因为学历的原因而疏远。刚进公司什么都不懂，慢慢的适应了现有的环境，每天上班下班加班，乐此不疲。&quot;&gt;&lt;a href=&quot;#在公司，和大家相处的都很融洽，大家一起吃饭，一起加班，一起讨论技术。在团队中，有高学历，有低学历，但是大家并不会因为学历的原因而疏远。刚进公司什么都不懂，慢慢的适应了现有的环境，每天上班下班加班，乐此不疲。&quot; class=&quot;headerlink&quot; title=&quot;在公司，和大家相处的都很融洽，大家一起吃饭，一起加班，一起讨论技术。在团队中，有高学历，有低学历，但是大家并不会因为学历的原因而疏远。刚进公司什么都不懂，慢慢的适应了现有的环境，每天上班下班加班，乐此不疲。&quot;&gt;&lt;/a&gt;在公司，和大家相处的都很融洽，大家一起吃饭，一起加班，一起讨论技术。在团队中，有高学历，有低学历，但是大家并不会因为学历的原因而疏远。刚进公司什么都不懂，慢慢的适应了现有的环境，每天上班下班加班，乐此不疲。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="实习感受" scheme="http://xj8c.cc/tags/%E5%AE%9E%E4%B9%A0%E6%84%9F%E5%8F%97/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET知识点面试篇</title>
    <link href="http://xj8c.cc/2016/04/16/asp.net-knowledge-point-interview/"/>
    <id>http://xj8c.cc/2016/04/16/asp.net-knowledge-point-interview/</id>
    <published>2016-04-16T09:13:19.000Z</published>
    <updated>2017-05-26T06:29:50.012Z</updated>
    
    <content type="html"><![CDATA[<h2 id="列举ASP-NET页面之间传递值的几种方式？"><a href="#列举ASP-NET页面之间传递值的几种方式？" class="headerlink" title="列举ASP.NET页面之间传递值的几种方式？"></a>列举ASP.NET页面之间传递值的几种方式？</h2><h3 id="1，使用QueryString，如：…Test-id-1-Redirect"><a href="#1，使用QueryString，如：…Test-id-1-Redirect" class="headerlink" title="1，使用QueryString，如：…Test?id=1 Redirect().."></a>1，使用QueryString，如：…Test?id=1 Redirect()..</h3><h3 id="2，使用Session变量"><a href="#2，使用Session变量" class="headerlink" title="2，使用Session变量"></a>2，使用Session变量</h3><h3 id="3，使用Server-Transfer"><a href="#3，使用Server-Transfer" class="headerlink" title="3，使用Server.Transfer"></a>3，使用Server.Transfer</h3><h3 id="4，Cookie传值"><a href="#4，Cookie传值" class="headerlink" title="4，Cookie传值"></a>4，Cookie传值</h3><a id="more"></a>
<h2 id="什么是code-Behind技术"><a href="#什么是code-Behind技术" class="headerlink" title="什么是code-Behind技术"></a>什么是code-Behind技术</h2><h3 id="就是代码隐藏，在ASP-NET中通过ASPX页面指向cs文件的方法实现显示逻辑和处理逻辑的分离，这样有助于web应用程序的创建。比如分工，美工和编程的可以各干各的，不用再像以前asp那样代码和HTML代码混在一起，难以维护。"><a href="#就是代码隐藏，在ASP-NET中通过ASPX页面指向cs文件的方法实现显示逻辑和处理逻辑的分离，这样有助于web应用程序的创建。比如分工，美工和编程的可以各干各的，不用再像以前asp那样代码和HTML代码混在一起，难以维护。" class="headerlink" title="就是代码隐藏，在ASP.NET中通过ASPX页面指向cs文件的方法实现显示逻辑和处理逻辑的分离，这样有助于web应用程序的创建。比如分工，美工和编程的可以各干各的，不用再像以前asp那样代码和HTML代码混在一起，难以维护。"></a>就是代码隐藏，在ASP.NET中通过ASPX页面指向cs文件的方法实现显示逻辑和处理逻辑的分离，这样有助于web应用程序的创建。比如分工，美工和编程的可以各干各的，不用再像以前asp那样代码和HTML代码混在一起，难以维护。</h3><h2 id="请解释ASP-NET中的web页面与其隐藏类之间的关系"><a href="#请解释ASP-NET中的web页面与其隐藏类之间的关系" class="headerlink" title="请解释ASP.NET中的web页面与其隐藏类之间的关系"></a>请解释ASP.NET中的web页面与其隐藏类之间的关系</h2><h3 id="一个ASP-NET页面一般都应对一个隐藏类，一般都在ASP-NET页面的声明中指定了隐藏类例如一个页面Test-aspx的页面声明如下："><a href="#一个ASP-NET页面一般都应对一个隐藏类，一般都在ASP-NET页面的声明中指定了隐藏类例如一个页面Test-aspx的页面声明如下：" class="headerlink" title="一个ASP.NET页面一般都应对一个隐藏类，一般都在ASP.NET页面的声明中指定了隐藏类例如一个页面Test.aspx的页面声明如下："></a>一个ASP.NET页面一般都应对一个隐藏类，一般都在ASP.NET页面的声明中指定了隐藏类例如一个页面Test.aspx的页面声明如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%@ Page language=&quot;c#&quot; Codebehind=&quot;Test.aspx.cs&quot; AutoEventWireup=&quot;false&quot; Inherits=&quot;T1.Test&quot; %&gt;</div></pre></td></tr></table></figure>
<h3 id="Codebehind-”Test-aspx-cs”表明经编译此页面时使用哪一个代码文件"><a href="#Codebehind-”Test-aspx-cs”表明经编译此页面时使用哪一个代码文件" class="headerlink" title="Codebehind=”Test.aspx.cs”表明经编译此页面时使用哪一个代码文件"></a>Codebehind=”Test.aspx.cs”表明经编译此页面时使用哪一个代码文件</h3><h3 id="Inherits-”T1-Test”表示运行时使用哪一个隐藏类"><a href="#Inherits-”T1-Test”表示运行时使用哪一个隐藏类" class="headerlink" title="Inherits=”T1.Test”表示运行时使用哪一个隐藏类"></a>Inherits=”T1.Test”表示运行时使用哪一个隐藏类</h3><h3 id="aspx页面会编译生成一个类，这个类从隐藏类继承"><a href="#aspx页面会编译生成一个类，这个类从隐藏类继承" class="headerlink" title="aspx页面会编译生成一个类，这个类从隐藏类继承"></a>aspx页面会编译生成一个类，这个类从隐藏类继承</h3><h2 id="通过超链接怎样传递中文参数？"><a href="#通过超链接怎样传递中文参数？" class="headerlink" title="通过超链接怎样传递中文参数？"></a>通过超链接怎样传递中文参数？</h2><h3 id="用URL编码，通过QueryString传递，用urlencode编码，urldecode解码"><a href="#用URL编码，通过QueryString传递，用urlencode编码，urldecode解码" class="headerlink" title="用URL编码，通过QueryString传递，用urlencode编码，urldecode解码"></a>用URL编码，通过QueryString传递，用urlencode编码，urldecode解码</h3><h2 id="Server-Transfer和Response-Redirect的区别是什么？"><a href="#Server-Transfer和Response-Redirect的区别是什么？" class="headerlink" title="Server.Transfer和Response.Redirect的区别是什么？"></a>Server.Transfer和Response.Redirect的区别是什么？</h2><h3 id="Server-Transfer仅是服务器中控制权的转向，在客户端浏览器地址栏中不会显示转向后的地址；Response-Redirect则是完全的跳转，浏览器将会得到跳转的地址，并重新发送请求链接。这样，从浏览器的地址栏中看到跳转后的链接地址。"><a href="#Server-Transfer仅是服务器中控制权的转向，在客户端浏览器地址栏中不会显示转向后的地址；Response-Redirect则是完全的跳转，浏览器将会得到跳转的地址，并重新发送请求链接。这样，从浏览器的地址栏中看到跳转后的链接地址。" class="headerlink" title="Server.Transfer仅是服务器中控制权的转向，在客户端浏览器地址栏中不会显示转向后的地址；Response.Redirect则是完全的跳转，浏览器将会得到跳转的地址，并重新发送请求链接。这样，从浏览器的地址栏中看到跳转后的链接地址。"></a>Server.Transfer仅是服务器中控制权的转向，在客户端浏览器地址栏中不会显示转向后的地址；Response.Redirect则是完全的跳转，浏览器将会得到跳转的地址，并重新发送请求链接。这样，从浏览器的地址栏中看到跳转后的链接地址。</h3><h3 id="Server-Transfer是服务器请求资源，服务器直接访问目标地址的URL，把那个URL的相应内容读取过来，然后把这些内容再发给浏览器，浏览器根本不知道服务器发送的内容是从哪里来的，所以它的地址栏还是原来的地址。这个过程中浏览器和web服务器之间经过一次交互。"><a href="#Server-Transfer是服务器请求资源，服务器直接访问目标地址的URL，把那个URL的相应内容读取过来，然后把这些内容再发给浏览器，浏览器根本不知道服务器发送的内容是从哪里来的，所以它的地址栏还是原来的地址。这个过程中浏览器和web服务器之间经过一次交互。" class="headerlink" title="Server.Transfer是服务器请求资源，服务器直接访问目标地址的URL，把那个URL的相应内容读取过来，然后把这些内容再发给浏览器，浏览器根本不知道服务器发送的内容是从哪里来的，所以它的地址栏还是原来的地址。这个过程中浏览器和web服务器之间经过一次交互。"></a>Server.Transfer是服务器请求资源，服务器直接访问目标地址的URL，把那个URL的相应内容读取过来，然后把这些内容再发给浏览器，浏览器根本不知道服务器发送的内容是从哪里来的，所以它的地址栏还是原来的地址。这个过程中浏览器和web服务器之间经过一次交互。</h3><h3 id="Response-Redirect就是服务端根据逻辑，发送一个状态吗，告诉浏览器重新去请求那个地址，一般来说浏览器会用刚才请求的所有参数重新请求。这个过程中浏览器和web服务器之间经过了两次交互。"><a href="#Response-Redirect就是服务端根据逻辑，发送一个状态吗，告诉浏览器重新去请求那个地址，一般来说浏览器会用刚才请求的所有参数重新请求。这个过程中浏览器和web服务器之间经过了两次交互。" class="headerlink" title="Response.Redirect就是服务端根据逻辑，发送一个状态吗，告诉浏览器重新去请求那个地址，一般来说浏览器会用刚才请求的所有参数重新请求。这个过程中浏览器和web服务器之间经过了两次交互。"></a>Response.Redirect就是服务端根据逻辑，发送一个状态吗，告诉浏览器重新去请求那个地址，一般来说浏览器会用刚才请求的所有参数重新请求。这个过程中浏览器和web服务器之间经过了两次交互。</h3><h2 id="说出一些常用的类，接口"><a href="#说出一些常用的类，接口" class="headerlink" title="说出一些常用的类，接口"></a>说出一些常用的类，接口</h2><h3 id="常用的类：StreamReader、WebClient、Dictionary、StringBuilder、SqlConnection、FileStream、File、Regex、List"><a href="#常用的类：StreamReader、WebClient、Dictionary、StringBuilder、SqlConnection、FileStream、File、Regex、List" class="headerlink" title="常用的类：StreamReader、WebClient、Dictionary、StringBuilder、SqlConnection、FileStream、File、Regex、List"></a>常用的类：StreamReader、WebClient、Dictionary<k,v>、StringBuilder、SqlConnection、FileStream、File、Regex、List<t></t></k,v></h3><h3 id="常用的接口：IDisposable、IEnumerable、IDbConnection、IComparable、ICollection、IList、IDictionary"><a href="#常用的接口：IDisposable、IEnumerable、IDbConnection、IComparable、ICollection、IList、IDictionary" class="headerlink" title="常用的接口：IDisposable、IEnumerable、IDbConnection、IComparable、ICollection、IList、IDictionary"></a>常用的接口：IDisposable、IEnumerable、IDbConnection、IComparable、ICollection、IList、IDictionary</h3><h2 id="post、get的区别"><a href="#post、get的区别" class="headerlink" title="post、get的区别"></a>post、get的区别</h2><h3 id="get的参数会显示在浏览器地址栏中，而post的参数不会显示在浏览器地址栏中"><a href="#get的参数会显示在浏览器地址栏中，而post的参数不会显示在浏览器地址栏中" class="headerlink" title="get的参数会显示在浏览器地址栏中，而post的参数不会显示在浏览器地址栏中"></a>get的参数会显示在浏览器地址栏中，而post的参数不会显示在浏览器地址栏中</h3><h3 id="使用post提交的页面再点击刷新按钮的时候浏览器一般会提示“是否重新提交”，而get则不会"><a href="#使用post提交的页面再点击刷新按钮的时候浏览器一般会提示“是否重新提交”，而get则不会" class="headerlink" title="使用post提交的页面再点击刷新按钮的时候浏览器一般会提示“是否重新提交”，而get则不会"></a>使用post提交的页面再点击刷新按钮的时候浏览器一般会提示“是否重新提交”，而get则不会</h3><h3 id="用get的页面可以被搜索引擎抓取，而用post的则不可以"><a href="#用get的页面可以被搜索引擎抓取，而用post的则不可以" class="headerlink" title="用get的页面可以被搜索引擎抓取，而用post的则不可以"></a>用get的页面可以被搜索引擎抓取，而用post的则不可以</h3><h3 id="用post可以进行文件的提交，而用get则不可以"><a href="#用post可以进行文件的提交，而用get则不可以" class="headerlink" title="用post可以进行文件的提交，而用get则不可以"></a>用post可以进行文件的提交，而用get则不可以</h3><h3 id="用post可以提交的数据量非常大，而用get可以提交的数据量则非常小-2K-，受限于网页地址的长度。"><a href="#用post可以提交的数据量非常大，而用get可以提交的数据量则非常小-2K-，受限于网页地址的长度。" class="headerlink" title="用post可以提交的数据量非常大，而用get可以提交的数据量则非常小(2K)，受限于网页地址的长度。"></a>用post可以提交的数据量非常大，而用get可以提交的数据量则非常小(2K)，受限于网页地址的长度。</h3><h2 id="Application、Cookie和Session两种会话有什么不同？"><a href="#Application、Cookie和Session两种会话有什么不同？" class="headerlink" title="Application、Cookie和Session两种会话有什么不同？"></a>Application、Cookie和Session两种会话有什么不同？</h2><h3 id="Application是用来存取整个网站全局的信息，而Session是用来存取与具体某个访问者关联的信息。Cookie是保存在客户端的，机密信息不能保存在Cookie中，只能放小数据；Session是保存在服务器端的，比较安全，可以放大数据。"><a href="#Application是用来存取整个网站全局的信息，而Session是用来存取与具体某个访问者关联的信息。Cookie是保存在客户端的，机密信息不能保存在Cookie中，只能放小数据；Session是保存在服务器端的，比较安全，可以放大数据。" class="headerlink" title="Application是用来存取整个网站全局的信息，而Session是用来存取与具体某个访问者关联的信息。Cookie是保存在客户端的，机密信息不能保存在Cookie中，只能放小数据；Session是保存在服务器端的，比较安全，可以放大数据。"></a>Application是用来存取整个网站全局的信息，而Session是用来存取与具体某个访问者关联的信息。Cookie是保存在客户端的，机密信息不能保存在Cookie中，只能放小数据；Session是保存在服务器端的，比较安全，可以放大数据。</h3><h2 id="http状态吗各是什么意思？"><a href="#http状态吗各是什么意思？" class="headerlink" title="http状态吗各是什么意思？"></a>http状态吗各是什么意思？</h2><h3 id="302：重定向"><a href="#302：重定向" class="headerlink" title="302：重定向"></a>302：重定向</h3><h3 id="301：永久重定向"><a href="#301：永久重定向" class="headerlink" title="301：永久重定向"></a>301：永久重定向</h3><h3 id="404：页面不存在"><a href="#404：页面不存在" class="headerlink" title="404：页面不存在"></a>404：页面不存在</h3><h3 id="500：服务器内部错误"><a href="#500：服务器内部错误" class="headerlink" title="500：服务器内部错误"></a>500：服务器内部错误</h3><h2 id="Session有什么重大的BUG，微软提出了什么方法加以解决？"><a href="#Session有什么重大的BUG，微软提出了什么方法加以解决？" class="headerlink" title="Session有什么重大的BUG，微软提出了什么方法加以解决？"></a>Session有什么重大的BUG，微软提出了什么方法加以解决？</h2><h3 id="iis中有由于有进程回收机制，系统繁忙的话Session会丢失，iis重启也会造成Session丢失。这样用户就要重新登录或者重新添加信息到Session中。可以用StateServer或SqlServer数据库的方式存储Session不过这种方式比较慢，而且无法捕获Session的end事件。但是我认为这不是bug，只能说是In-Proc方式存储Session的缺陷，缺陷和bug是不一样的，In-Proc方式存储Session会由服务器来决定什么时候释放Session，这是By-Design，In-Proc方式不满足要求的话完全可以用StateServer和数据库的方式。"><a href="#iis中有由于有进程回收机制，系统繁忙的话Session会丢失，iis重启也会造成Session丢失。这样用户就要重新登录或者重新添加信息到Session中。可以用StateServer或SqlServer数据库的方式存储Session不过这种方式比较慢，而且无法捕获Session的end事件。但是我认为这不是bug，只能说是In-Proc方式存储Session的缺陷，缺陷和bug是不一样的，In-Proc方式存储Session会由服务器来决定什么时候释放Session，这是By-Design，In-Proc方式不满足要求的话完全可以用StateServer和数据库的方式。" class="headerlink" title="iis中有由于有进程回收机制，系统繁忙的话Session会丢失，iis重启也会造成Session丢失。这样用户就要重新登录或者重新添加信息到Session中。可以用StateServer或SqlServer数据库的方式存储Session不过这种方式比较慢，而且无法捕获Session的end事件。但是我认为这不是bug，只能说是In-Proc方式存储Session的缺陷，缺陷和bug是不一样的，In-Proc方式存储Session会由服务器来决定什么时候释放Session，这是By Design，In-Proc方式不满足要求的话完全可以用StateServer和数据库的方式。"></a>iis中有由于有进程回收机制，系统繁忙的话Session会丢失，iis重启也会造成Session丢失。这样用户就要重新登录或者重新添加信息到Session中。可以用StateServer或SqlServer数据库的方式存储Session不过这种方式比较慢，而且无法捕获Session的end事件。但是我认为这不是bug，只能说是In-Proc方式存储Session的缺陷，缺陷和bug是不一样的，In-Proc方式存储Session会由服务器来决定什么时候释放Session，这是By Design，In-Proc方式不满足要求的话完全可以用StateServer和数据库的方式。</h3><h3 id="StsteServer还可以解决集群Session共享的问题"><a href="#StsteServer还可以解决集群Session共享的问题" class="headerlink" title="StsteServer还可以解决集群Session共享的问题"></a>StsteServer还可以解决集群Session共享的问题</h3><h3 id="配置StateServer的方法：略"><a href="#配置StateServer的方法：略" class="headerlink" title="配置StateServer的方法：略"></a>配置StateServer的方法：略</h3><h2 id="asp-net中-lt-gt-、-lt-gt-、-lt-的区别是什么？-gt"><a href="#asp-net中-lt-gt-、-lt-gt-、-lt-的区别是什么？-gt" class="headerlink" title="asp.net中&lt;% %&gt;、&lt;% = %&gt;、&lt;% # %的区别是什么？&gt;"></a>asp.net中&lt;% %&gt;、&lt;% = %&gt;、&lt;% # %的区别是什么？&gt;</h2><h3 id="lt-gt-是执行-lt-gt-中的C-代码，-lt-gt-是将-后的表达式的值输出到Response中，-lt-gt-是数据绑定，一般用来ListView、GridView、Repeater等控件的绑定中。数据绑定分为，Eval：单向绑定和Bind：双向绑定。"><a href="#lt-gt-是执行-lt-gt-中的C-代码，-lt-gt-是将-后的表达式的值输出到Response中，-lt-gt-是数据绑定，一般用来ListView、GridView、Repeater等控件的绑定中。数据绑定分为，Eval：单向绑定和Bind：双向绑定。" class="headerlink" title="&lt;% %&gt;是执行&lt;% %&gt;中的C#代码，&lt;% = %&gt;是将=后的表达式的值输出到Response中，&lt;% # %&gt;是数据绑定，一般用来ListView、GridView、Repeater等控件的绑定中。数据绑定分为，Eval：单向绑定和Bind：双向绑定。"></a>&lt;% %&gt;是执行&lt;% %&gt;中的C#代码，&lt;% = %&gt;是将=后的表达式的值输出到Response中，&lt;% # %&gt;是数据绑定，一般用来ListView、GridView、Repeater等控件的绑定中。数据绑定分为，Eval：单向绑定和Bind：双向绑定。</h3><h2 id="asp-net中的错误机制"><a href="#asp-net中的错误机制" class="headerlink" title="asp.net中的错误机制"></a>asp.net中的错误机制</h2><h3 id="定制错误页来将显示一个友好的报错页面"><a href="#定制错误页来将显示一个友好的报错页面" class="headerlink" title="定制错误页来将显示一个友好的报错页面"></a>定制错误页来将显示一个友好的报错页面</h3><h3 id="页面中未捕捉一样会触发Page-Error，应用程序中的未捕获异常会触发"><a href="#页面中未捕捉一样会触发Page-Error，应用程序中的未捕获异常会触发" class="headerlink" title="页面中未捕捉一样会触发Page_Error，应用程序中的未捕获异常会触发"></a>页面中未捕捉一样会触发Page_Error，应用程序中的未捕获异常会触发</h3><h3 id="Application-Error。通过HttpContext-Current-Server-GetLastError-拿到未捕捉异常，记录到Log4Net日志中。"><a href="#Application-Error。通过HttpContext-Current-Server-GetLastError-拿到未捕捉异常，记录到Log4Net日志中。" class="headerlink" title="Application_Error。通过HttpContext.Current.Server.GetLastError();拿到未捕捉异常，记录到Log4Net日志中。"></a>Application_Error。通过HttpContext.Current.Server.GetLastError();拿到未捕捉异常，记录到Log4Net日志中。</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;列举ASP-NET页面之间传递值的几种方式？&quot;&gt;&lt;a href=&quot;#列举ASP-NET页面之间传递值的几种方式？&quot; class=&quot;headerlink&quot; title=&quot;列举ASP.NET页面之间传递值的几种方式？&quot;&gt;&lt;/a&gt;列举ASP.NET页面之间传递值的几种方式？&lt;/h2&gt;&lt;h3 id=&quot;1，使用QueryString，如：…Test-id-1-Redirect&quot;&gt;&lt;a href=&quot;#1，使用QueryString，如：…Test-id-1-Redirect&quot; class=&quot;headerlink&quot; title=&quot;1，使用QueryString，如：…Test?id=1 Redirect()..&quot;&gt;&lt;/a&gt;1，使用QueryString，如：…Test?id=1 Redirect()..&lt;/h3&gt;&lt;h3 id=&quot;2，使用Session变量&quot;&gt;&lt;a href=&quot;#2，使用Session变量&quot; class=&quot;headerlink&quot; title=&quot;2，使用Session变量&quot;&gt;&lt;/a&gt;2，使用Session变量&lt;/h3&gt;&lt;h3 id=&quot;3，使用Server-Transfer&quot;&gt;&lt;a href=&quot;#3，使用Server-Transfer&quot; class=&quot;headerlink&quot; title=&quot;3，使用Server.Transfer&quot;&gt;&lt;/a&gt;3，使用Server.Transfer&lt;/h3&gt;&lt;h3 id=&quot;4，Cookie传值&quot;&gt;&lt;a href=&quot;#4，Cookie传值&quot; class=&quot;headerlink&quot; title=&quot;4，Cookie传值&quot;&gt;&lt;/a&gt;4，Cookie传值&lt;/h3&gt;
    
    </summary>
    
    
      <category term="ASP.NET" scheme="http://xj8c.cc/tags/ASP-NET/"/>
    
      <category term="面试" scheme="http://xj8c.cc/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
</feed>
