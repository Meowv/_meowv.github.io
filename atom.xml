<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>当然我在瞎扯</title>
  <subtitle>生命不息，奋斗不止</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xj8c.cc/"/>
  <updated>2017-06-05T08:47:35.469Z</updated>
  <id>http://xj8c.cc/</id>
  
  <author>
    <name>阿星Plus</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我的实习记录</title>
    <link href="http://xj8c.cc/2017/06/01/my-internship-record/"/>
    <id>http://xj8c.cc/2017/06/01/my-internship-record/</id>
    <published>2017-05-31T16:00:00.000Z</published>
    <updated>2017-06-05T08:47:35.469Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2016年4月18日星期一"><a href="#2016年4月18日星期一" class="headerlink" title="2016年4月18日星期一"></a>2016年4月18日星期一</h3><p>1、第一天上班，配置电脑，熟悉环境</p>
<p>2、登录系统练习</p>
<h3 id="2016年4月19日星期二"><a href="#2016年4月19日星期二" class="headerlink" title="2016年4月19日星期二"></a>2016年4月19日星期二</h3><p>1、登陆系统练习</p>
<p>2、在线观看至科实验室信息管理系统</p>
<h3 id="2016年4月20日星期三"><a href="#2016年4月20日星期三" class="headerlink" title="2016年4月20日星期三"></a>2016年4月20日星期三</h3><p>1、继续观看信息系统，并写观后感</p>
<p>2、仿淘宝图片大图显示js代码特效</p>
<p>3、图片上传之前本地预览功能</p>
<a id="more"></a>
<h3 id="2016年4月21日星期四"><a href="#2016年4月21日星期四" class="headerlink" title="2016年4月21日星期四"></a>2016年4月21日星期四</h3><p>1、完成图片上传之前本地预览功能</p>
<p>2、上午会议</p>
<p>① Jin日里程碑提交规范</p>
<p>② Lims观后感或者测试报告点评</p>
<p>③ 近期任务：配合GuoHongYu安排的任务、学习</p>
<p>④ C#开发编码规范</p>
<p>3、学习RoadFlow工作流引擎，教育局报名管理系统</p>
<p>4、来游戏•复盘设计方案分析</p>
<p>5、研究H5 APP开发 - WeX5</p>
<h3 id="2016年4月22日星期五"><a href="#2016年4月22日星期五" class="headerlink" title="2016年4月22日星期五"></a>2016年4月22日星期五</h3><p>1、熟悉教育局报名管理系统后台逻辑</p>
<p>2、完成GuoHongYu分配的任务</p>
<p>3、学习三层架构</p>
<h3 id="第一周总结"><a href="#第一周总结" class="headerlink" title="第一周总结"></a>第一周总结</h3><p>这是我的第一次正式工作，我现在是一名大二的学生。这个时间段应该是在学校无忧无虑的过着安稳的日子的，可是我却已经出来实习了。至于为什么这么早出来找工作其实有很多原因的，有个人原因也有学校的原因，总之吧，在学校我感觉我已经学不到东西了，所以还不如早点出来锻炼锻炼自己。这个过程真的蛮艰难的，对于一个初入职场的小白来说是这样的。2016年4月15日，我的3个舍友牺牲了自己的时间帮我提行李到我所租房子的地方，打扫卫生，整理房间…真的很感谢他们，东西比较多，如果是我一个人拿的话，估计会更艰难，为表感谢，我请他们去饭店吃了一顿。</p>
<p>我住的这个地方，距离我工作的地方，不堵车的话大概半小时的公交路程。接下来的两天，我熟悉了这里的环境，合租房，公共卫生间，真的有很多的不方便。我找的这个地方地段比较好，但是这也恰恰增加了我的经济负担，往往地段比较好的位置，消费都是比较高的。</p>
<p>每天上班都要走很远的路程，武汉这个地方，这两年到处都在修路，真是非常的不方便。第一天上班的前一晚我特别兴奋，大晚上的在床上翻来覆去一直睡不着，早上提前了一个小时到公司，非常尴尬，因为是打卡式的，我进不去，只好在外边转了几圈直到8点左右我才上去进行一系列的入职流程。公司的上班时间是8:30–5:30，有了第一天的经验，我早上一般都是6点半起床，进行洗漱后7点准时出发，走到公交站大概7:30左右，不管堵不堵车，一个小时的缓冲时间是肯定可以到公司的。</p>
<p>在公司按部就班的进行实习学习，我的领导个人感觉还是蛮nice的，比较人性化，喜欢和我们交流，有好几次中午都是和我们几个实习生一起走路去吃饭。一起和我实习的是我的一个学长，当时也是蛮诧异的，他和我是同一天进入这个公司的，当时还感叹了一下，这个世界其实有时候还是蛮小的。</p>
<p>不管怎么样，这是我的第一份工作，我希望自己能够做好，不断增强自己，早日达到标准。</p>
<h3 id="2016年4月25日星期一"><a href="#2016年4月25日星期一" class="headerlink" title="2016年4月25日星期一"></a>2016年4月25日星期一</h3><p>1、观看WebApp相关资料和视频</p>
<p>2、学习登录注册Demo后台逻辑</p>
<p>3、学习观看新闻管理系统Demo</p>
<p>4、学习文件上传下载Demo</p>
<p>5、晚上会议</p>
<p>①针对自己的学习情况，谈谈对公司上司及自己的一些看法</p>
<p>②Boss对我们存在的一些问题进行讲解答疑</p>
<p>③对教育局管理系统和至科实验室信息管理系统的切入、学习</p>
<p>④教育局管理系统项目转化为产品的打算、预想</p>
<p>⑤观看《青春代码》微电影</p>
<h3 id="2016年4月26日星期二"><a href="#2016年4月26日星期二" class="headerlink" title="2016年4月26日星期二"></a>2016年4月26日星期二</h3><p>1、修改网站流量统计页面代码</p>
<p>2、学习在线投票功能案例</p>
<p>3、学习jQueryEasyUI，搭建页面，进行增删改查操作</p>
<p>4、晚上会议</p>
<p>①教育局报名系统业务流程，项目介绍等</p>
<p>②Lims产品介绍</p>
<h3 id="2016年4月27日星期三"><a href="#2016年4月27日星期三" class="headerlink" title="2016年4月27日星期三"></a>2016年4月27日星期三</h3><p>1、教育局系统遮罩层图片显示功能模块</p>
<p>2、至科检测工作流平台表单、流程设计</p>
<p>3、ajax异步请求实现注册</p>
<h3 id="2016年4月28日星期四"><a href="#2016年4月28日星期四" class="headerlink" title="2016年4月28日星期四"></a>2016年4月28日星期四</h3><p>1、至科检测工作流平台表单、流程设计</p>
<p>2、Html页面+ 一般处理程序留言评论案例</p>
<p>3、一般处理程序联系人列表的增删改查案例</p>
<p>4、存储过程分页</p>
<h3 id="2016年4月29日星期五"><a href="#2016年4月29日星期五" class="headerlink" title="2016年4月29日星期五"></a>2016年4月29日星期五</h3><p>1、教育局报名系统测试</p>
<p>2、教育局报名系统完善图片上传功能</p>
<p>3、一般处理程序联系人列表的增删改查案例</p>
<p>4、分页展示信息列表</p>
<p>5、至科检测工作流平台表单、流程设计</p>
<h3 id="第二周总结"><a href="#第二周总结" class="headerlink" title="第二周总结"></a>第二周总结</h3><p>一晃半个月就这样过去了，第二周过的是那样的快，今天是五一劳动节，按国家规定我们放假三天。在紧凑的工作生活中又带来些许的放松，我刚从学校回到住处。对的，自己一个人太无聊，我跑到学校去了，去见见我那室友们。</p>
<p>看看上面的每日任务，这周说真的，并没有学到什么，这周下发的任务很少基本上没有，所有就选择了自己安排，总的来说，学了点jQueryEasyUI、搞了一个用一般处理程序+HTML+ajax完成的增删改查小案例，哦！还有那个SQL的存储过程分页，跟进了公司的一个教育局管理系统，完成了其中的两个小模块。其它的小事就不往上面写了，大概就是这样把！</p>
<p>渐渐地天气热了起来，夏天给人的感觉总是那么浮躁。不知为何，现在的我根本静不下心来了，没有了在学校的那种拼劲，慢慢的我感觉到自己松懈了，偏偏上班了却又没有那种特别明确的目标了。在学校的时候就想着找个公司好好实习，好好学技术，努力提升自己的价值。反而现在到了公司却有种迷茫的感觉。是自己的问题？抑或是公司的问题？</p>
<p>仔细想了想，应该还是个人原因，就拿目前的我和之前的我对比一下：现在晚上早早地上了床，大概每晚10点多左右，就算睡不着也躺在床上。之前在学校，基本上都是12点过后才上床睡觉的，不是在敲代码，就是在看视频。</p>
<p>不能因为现在有了一个落脚地，就因此松懈啊！还是要不断的学习才可以，既然选择了程序员这条路，就要不遗余力的去编码，去学习，学习如逆水行舟不进则退啊！除非你想一直只拿2K的薪水。这不是我想要生活，我要过上高质量的生活水平，现在的我还是远远不够的，埋头苦干才是硬道理，技术才是王道，奔跑吧，阿星！</p>
<p>不在沉默中暴发，就在沉默中灭亡！</p>
<h3 id="2016年5月2日星期一"><a href="#2016年5月2日星期一" class="headerlink" title="2016年5月2日星期一"></a>2016年5月2日星期一</h3><p>今天是休假最后一天，(^o^)/YES!</p>
<h3 id="2016年5月3日星期二"><a href="#2016年5月3日星期二" class="headerlink" title="2016年5月3日星期二"></a>2016年5月3日星期二</h3><p>1、至科检测工作流平台</p>
<p>2、搭建多层结构的博客项目</p>
<p>3、前台登录页面</p>
<p>4、后台登录模块</p>
<p>5、联系人列表aspx版增删改查</p>
<p>6、晚上会议</p>
<p>① 教育局报名系统测试报告点评</p>
<p>② 教育局报名系统bug修改，需求分析</p>
<p>③ LoadRunner压力测试</p>
<p>④ 以图搜图技术</p>
<h3 id="2016年5月4日星期三"><a href="#2016年5月4日星期三" class="headerlink" title="2016年5月4日星期三"></a>2016年5月4日星期三</h3><p>1、整个上午开会</p>
<p>① 主题分享之图文技术点应用解析</p>
<p>② 确定无特别情况，每周四晚组织《学习会》</p>
<p>③ 近期的工作重点：两个系统</p>
<p>④ 绩效考核办法讲解</p>
<p>⑤ 教育局需求分析</p>
<p>⑥ 公司娱乐活动建议型方案</p>
<p>⑦ 现有问题总结，解决方案</p>
<p>2、图片修改“报名”改“登记”</p>
<p>3、图片上传问题异常解决</p>
<p>4、下拉框上传不刷新</p>
<p>5、教育局报名系统页面微调，兼容性</p>
<h3 id="2016年5月5日星期四"><a href="#2016年5月5日星期四" class="headerlink" title="2016年5月5日星期四"></a>2016年5月5日星期四</h3><p>1、上午会议</p>
<p>① ChenZong对公司做介绍，现状，规划</p>
<p>② 上市，产品</p>
<p>③ 绩效问题</p>
<p>④ 研发大楼</p>
<p>⑤ 千万级智能建筑项目</p>
<p>⑥ 分公司(十堰、宜昌~)</p>
<p>⑦ 待遇问题</p>
<p>2、完成GuoHongYu安排的任务，整合修改的代码</p>
<p>3、测试教育局报名系统</p>
<p>4、报名系统存在问题</p>
<p>① 获取片区信息，有部分小区显示不存在</p>
<p>② 选择特定小区“万科金域蓝湾小区”下面不隐藏</p>
<p>③ 特定小区“滨湖小区”下一步没反应</p>
<p>④ 所有选择房产证和购房合同页面，选择房产证没问题，选择购房合同，则会弹出提示输入门牌号和房产证</p>
<h3 id="2016年5月6日星期五"><a href="#2016年5月6日星期五" class="headerlink" title="2016年5月6日星期五"></a>2016年5月6日星期五</h3><p>1、去掉上传按钮，统一进行上传</p>
<p>2、上传图片采用GUID+文件名命名，避免重名</p>
<p>3、学会目录分离算法，避免和解决大量文件保存在同一个目录下的问题，通过目录分离算法来保证在不同的图片保存在不同的目录下。</p>
<p>4、界面美化</p>
<p>5、研究“以图搜图”技术,现有两种方案，具体实现有待研究</p>
<p>① 感知哈希算法</p>
<p>⑴ 缩小图片尺寸<br>将图片缩小到8x8的尺寸, 总共64个像素. 这一步的作用是去除各种图片尺寸和图片比例的差异, 只保留结构、明暗等基本信息.</p>
<p>⑵ 转为灰度图片<br>将缩小后的图片, 转为64级灰度图片</p>
<p>⑶ 计算灰度平均值<br>计算图片中所有像素的灰度平均值</p>
<p>⑷ 比较像素的灰度<br>将每个像素的灰度与平均值进行比较, 如果大于或等于平均值记为1, 小于平均值记为0.</p>
<p>⑸ 计算哈希值<br>将上一步的比较结果, 组合在一起, 就构成了一个64位的二进制整数, 这就是这张图片的指纹.</p>
<p>⑹ 比图片指纹<br>得到图片的指纹后, 就可以对比不同的图片的指纹, 计算出64位中有多少位是不一样的. 如果不相同的数据位数不超过5, 就说明两张图片很相似, 如果大于10, 说明它们是两张不同的图片.</p>
<p>② OCR图像文字识别技术</p>
<p>因为户口本、房产证、出生证明等图片上的文字是固定的，所以可以获取户口本、房产证、出生证明等图片上的文字信息来验证图片正确与否。</p>
<h3 id="2016年5月7日星期六"><a href="#2016年5月7日星期六" class="headerlink" title="2016年5月7日星期六"></a>2016年5月7日星期六</h3><p>1、今天加班</p>
<p>2、鼓捣OCR图像文字识别技术，demo案例</p>
<p>3、教育局报名系统整合，界面美化</p>
<p>4、整理教育局报名系统测试账号</p>
<h3 id="2016年5月8日星期日"><a href="#2016年5月8日星期日" class="headerlink" title="2016年5月8日星期日"></a>2016年5月8日星期日</h3><p>1、教育局报名系统测试</p>
<p>2、修改教育局报名系统存在的bug</p>
<p>3、撰写有关福利待遇的建议方案</p>
<p>4、浏览博客园网站，收听.NET FM，聆听时下前沿技术</p>
<p>5、加班加到21:35，没什么想说的了</p>
<h3 id="第三周总结"><a href="#第三周总结" class="headerlink" title="第三周总结"></a>第三周总结</h3><p>好快，实习第三周结束了。</p>
<p>这周主要是针对公司的一个教育报名系统进行整改，测试。本周加了两天班，这是我第一次加班，不打卡，不记考勤，周六早早地到了公司，等了半个多小时才进去。中午经理和我们一起吃了饭，当然是他买单。</p>
<p>本来周末两天是想要回学校的，但是计划赶不上变化，时间都奉献了。</p>
<p>每天都在和那个特别烂的报名系统打交道，感觉好烦躁。</p>
<p>嗯，今天是母亲节，祝全天下伟大的母亲节日快乐。</p>
<p>这周就先这样把，明天又是一个新的开始，接下来，要给经理提交一份有关福利待遇的建议方案。</p>
<p>打算在本月18号之前写一份“满月”体验报告。</p>
<p>从上月18号到今天是第20天。</p>
<p>漫漫职场程序路，何时才能到尽头？</p>
<h3 id="2016年5月9日星期一"><a href="#2016年5月9日星期一" class="headerlink" title="2016年5月9日星期一"></a>2016年5月9日星期一</h3><p>1、熟悉教育局报名系统代码</p>
<p>2、至科代码</p>
<p>3、JS控制table点击按钮增加行</p>
<p>4、子窗体的子窗体给父窗体传值问题</p>
<h3 id="2016年5月10日星期二"><a href="#2016年5月10日星期二" class="headerlink" title="2016年5月10日星期二"></a>2016年5月10日星期二</h3><p>1、弹窗获取当前所选中radio的值</p>
<p>2、文件的上传与下载</p>
<p>3、数据绑定案例</p>
<p>4、教育局报名系统测试</p>
<p>5、Cookie之登录页面记住我</p>
<h3 id="2016年5月11日星期三"><a href="#2016年5月11日星期三" class="headerlink" title="2016年5月11日星期三"></a>2016年5月11日星期三</h3><p>1、至科系统的上传与下载</p>
<p>2、iis不安全端口解决方案</p>
<p>3、学习教育局报名系统</p>
<p>4、晚上会议</p>
<p>① 针对教育局报名系统的bug做出任务划分</p>
<p>② 教育局报名系统的逻辑梳理</p>
<p>③ 图片显示问题</p>
<h3 id="2016年5月12日星期四"><a href="#2016年5月12日星期四" class="headerlink" title="2016年5月12日星期四"></a>2016年5月12日星期四</h3><p>1、处理图片显示逻辑，房产证和购房合同上传了哪张就显示哪张，没上传显示默认图</p>
<p>2、增加居住证图片显示，没上传显示默认图</p>
<p>3、教育局和学校各页面图片显示，默认图片的处理</p>
<p>4、教育局报名系统2016年秋季小学起始报名登记工作开始啦展示框</p>
<p>5、教育局报名系统沌口片区和汉南片区登记入口页面</p>
<h3 id="2016年5月13日星期五"><a href="#2016年5月13日星期五" class="headerlink" title="2016年5月13日星期五"></a>2016年5月13日星期五</h3><p>1、教育局报名系统代码</p>
<p>2、学会填写报销单，报销加班打车费用！</p>
<p>3、测试教育局报名系统</p>
<p>4、至科代码</p>
<p>5、编写两个html页面</p>
<h3 id="2016年5月15日星期日"><a href="#2016年5月15日星期日" class="headerlink" title="2016年5月15日星期日"></a>2016年5月15日星期日</h3><p>1、帮助中心页面</p>
<p>2、报名改登记</p>
<p>3、修改图片文字</p>
<p>4、测试…</p>
<h3 id="第四周总结"><a href="#第四周总结" class="headerlink" title="第四周总结"></a>第四周总结</h3><p>差不多也一个月了，第四周也结束了。本周主要围绕公司两大项目走，事情特别多，加了很多班，周日加了一整天班，周六陪女朋友一天。</p>
<p>报名系统周一上线，希望能够完美通关。不然又要苦了我们这些实习生，一个多星期的修修补补，功能完善，测试，改bug…乐此不疲。</p>
<p>还有就是公司内部的工作流项目，确立了新的需求，利用开源框架roadflow二次开发，个人感觉虽然节省了很多时间，但是来改人家的框架是多么不容易的一件事，有种生拽硬拉的感觉。特别不爽。不过，对于实习生的我来说，只能处理项目的边边角角。啦啦啦~</p>
<p>本周公司发了我第一个月为期10天的实习工资，中间出了很多小波折，希望下个月发工资的时候可以解决。</p>
<h3 id="2016年5月16日星期一"><a href="#2016年5月16日星期一" class="headerlink" title="2016年5月16日星期一"></a>2016年5月16日星期一</h3><p>1、跟随外出学习</p>
<p>2、帮助中心</p>
<p>3、引导页面窗口调整</p>
<p>4、报名页面弹窗提示</p>
<p>5、服务到期功能</p>
<h3 id="2016年5月17日星期二"><a href="#2016年5月17日星期二" class="headerlink" title="2016年5月17日星期二"></a>2016年5月17日星期二</h3><p>1、解决幼儿园系统时间转换问题</p>
<p>2、电脑死机蓝屏进不了系统，重装系统</p>
<p>3、学习前端知识</p>
<p>4、和ChenXia沟通设计样式，分析实现效果</p>
<p>5、晚上会议</p>
<p>①项目部署完成，教育局报名系统告一段落</p>
<p>②测试人员~</p>
<p>③多浏览器的兼容性</p>
<p>④敏捷开发</p>
<p>⑤接下来重点Lims产品、设计院网站</p>
<p>⑥每天的工作日志、工作状态、工作计划</p>
<p>⑦需求分析…</p>
<h3 id="2016年5月18日星期三"><a href="#2016年5月18日星期三" class="headerlink" title="2016年5月18日星期三"></a>2016年5月18日星期三</h3><p>1、JS特效学习</p>
<p>2、幼儿园系统后台界面美化</p>
<p>3、提交一个月工作感受</p>
<p>4、晚上会议</p>
<p>① 月度总结</p>
<p>② 工作日志，计划性</p>
<p>③ 设计图定稿</p>
<p>④ Lims系统</p>
<p>⑤ OA</p>
<h3 id="2016年5月19日星期四"><a href="#2016年5月19日星期四" class="headerlink" title="2016年5月19日星期四"></a>2016年5月19日星期四</h3><p>1、OA debug</p>
<p>2、编写信义东方网页</p>
<h3 id="2016年5月20日星期五"><a href="#2016年5月20日星期五" class="headerlink" title="2016年5月20日星期五"></a>2016年5月20日星期五</h3><p>1、继续编写页面</p>
<p>2、开会总结</p>
<p>① 教育局登记系统成效及不足</p>
<p>2016年5月22日星期天</p>
<p>1、下午公司加班写了个页面</p>
<p>2、开会</p>
<p>① GuoHongYu，教育局登记系统</p>
<p>② JiDaoMiao，至科检测工作流平台</p>
<p>③ Me，设计院网站</p>
<h3 id="第五周总结"><a href="#第五周总结" class="headerlink" title="第五周总结"></a>第五周总结</h3><p>第五周了，公司走了个同事，是我在第一周总结中提到的一个学长。在之前，他就跟我说过，他干不长，不喜欢公司的这种模式，他认为学不到东西。所以他告诉我，他忍不住了，要辞职了。两个字，呵呵~</p>
<p>这周，感觉过得蛮快，周一跟经理一起出去了一趟，早早地起了床，真正体验到了一把，客户就是上帝。对，没错，我们去见客户了，本来是去部署项目的，可是，压根不是我想的那样，被打回来了，客户的随便一句话，可能在他认为就一个小小的东西，我们都要修改半天。…后来还好，虽然还有不少问题，但是第二天如期上线了。</p>
<p>不知不觉，已经到五月下旬了，来这个公司是4月18号到今天也有一个月零4天了。差不多什么也都摸清楚了，鉴于第一份实习工作，还是老老实实待下去，既呆之则安之。</p>
<p>最近老是忧心忡忡的，也不知道怎么回事，仔细想想，也就那回事，每天上班下班挤公交，回到小窝睡大觉。</p>
<p>可能是报考了驾校的原因，因为是之前没工作在学校报的，考了科一，直到现在车碰都没碰过。两个字：惆怅。现在也没时间回去学，不知道什么时候能拿到驾照！</p>
<p>明天又是星期一，是我最不喜欢的一天，因为明天早上的车有个特点，那就是特别堵特别堵特别堵。。。</p>
<h3 id="2016年5月23日星期一"><a href="#2016年5月23日星期一" class="headerlink" title="2016年5月23日星期一"></a>2016年5月23日星期一</h3><p>1、完成设计院网站的设计</p>
<p>2、响应式Web设计学习</p>
<p>3、看书《H5和CSS3实战》</p>
<h3 id="2016年5月24日星期二"><a href="#2016年5月24日星期二" class="headerlink" title="2016年5月24日星期二"></a>2016年5月24日星期二</h3><p>请假的第一天，今天返校了</p>
<h3 id="2016年5月25日星期三"><a href="#2016年5月25日星期三" class="headerlink" title="2016年5月25日星期三"></a>2016年5月25日星期三</h3><p>上午毕业证头像采集，下午照了毕业照</p>
<h3 id="2016年5月26日星期四"><a href="#2016年5月26日星期四" class="headerlink" title="2016年5月26日星期四"></a>2016年5月26日星期四</h3><p>1、分析设计院网页实现方法</p>
<p>2、学习FineUI</p>
<p>3、利用FineUI完成登录Demo</p>
<h3 id="2016年5月27日星期五"><a href="#2016年5月27日星期五" class="headerlink" title="2016年5月27日星期五"></a>2016年5月27日星期五</h3><p>1、搭建设计院后台3+层框架</p>
<p>2、数据库搭建分析</p>
<p>3、后台UI修改</p>
<p>4、折腾服务器，将自己的项目上传至服务器</p>
<h3 id="第六周总结"><a href="#第六周总结" class="headerlink" title="第六周总结"></a>第六周总结</h3><p>这周过得比较快，只上了三天班，请假了两天。周一完成了设计院网站的第一个html版本，周二周三回学校去了。</p>
<p>转眼间，马上就要毕业了。回学校照了个毕业照，然后毕业证头像采集，让室友陪我打了几把LOL，哈哈，原来我是真的很坑。</p>
<p>这周接触了一个新的UI，FineUI。基于 jQuery / ExtJS 的 ASP.NET 一个控件库，由来自中国的程序员 三生石上 和 RingoDing 创建并维护。在博客园中看到的，然后一路跟随到FineUI官网，并瞅了瞅，感觉还不错。利用其拖拖拽拽就完成了一个demo。不过好归好，在其华丽的背后总有那么些不足之处，这还是服务器端控件，严重的拖慢了网页加载速度，而且异常的臃肿。就不与其它UI作比较了，毕竟各有各的优势。</p>
<p>嗯，还有就是我在腾讯云买了一个服务器。最低配置的那种，不过对我来说可以用了。我将自己做过的项目都挂上去了，拿来测试、瞎折腾还是可以的。</p>
<p>马上第七周了，这一周应该会很忙，设计院的网站开始做了，框架已经搭建好，只等数据库设计完成了。然后我还要更改网站样式，因为第一版略显丑态，不太合适，美工又重新设计了新的样式。黑暗的世界马上来临。</p>
<h3 id="2016年5月30日星期一"><a href="#2016年5月30日星期一" class="headerlink" title="2016年5月30日星期一"></a>2016年5月30日星期一</h3><p>1、SQL架构+数据导入导出</p>
<p>2、学习JS解析json</p>
<p>3、C#.Net解析json</p>
<p>4、响应式Web设计 HTML5和CSS3实战</p>
<p>5、H5全新语义化元素整理总结</p>
<h3 id="2016年5月31日星期二"><a href="#2016年5月31日星期二" class="headerlink" title="2016年5月31日星期二"></a>2016年5月31日星期二</h3><p>1、设计院网站数据库</p>
<p>2、设计院网站页面</p>
<p>3、设计院网站后台</p>
<h3 id="2016年6月1日星期三"><a href="#2016年6月1日星期三" class="headerlink" title="2016年6月1日星期三"></a>2016年6月1日星期三</h3><p>1、设计院网站</p>
<p>2、近期工作总结</p>
<p>3、开会内容</p>
<p>① 教育局项目</p>
<p>② Lims项目</p>
<p>③ OA</p>
<p>④ 设计院网站</p>
<p>⑤ 手提袋</p>
<p>⑥ 至科网站改版升级(报告查询)</p>
<p>⑦ Lbt网站改版升级</p>
<h3 id="2016年6月2日星期四"><a href="#2016年6月2日星期四" class="headerlink" title="2016年6月2日星期四"></a>2016年6月2日星期四</h3><p>设计院网站设计</p>
<h3 id="2016年6月3日星期五"><a href="#2016年6月3日星期五" class="headerlink" title="2016年6月3日星期五"></a>2016年6月3日星期五</h3><p>设计院网站第二版终结</p>
<p>学习网页相关知识</p>
<p>设计院后台招聘信息模块</p>
<h3 id="第七周总结"><a href="#第七周总结" class="headerlink" title="第七周总结"></a>第七周总结</h3><p>七七四十九了。本周接手了公司的一个项目，相对来说比较忙，今天还加了一整天班。</p>
<p>这一周完成了美工所设计的第二版设计院PSD，整整十几个页面加部分JS特效，修修补补总算完成。然后写完页面继续跟着做后台。截至周日，我所负责的两个模块，新闻信息发布和招聘英才后台增删改查，前台显示，分页查询等等已圆满完成。</p>
<p>期间，遇到好几个坑，然后又自己填坑，所有数据访问都是自己手写，以往都是添加和显示在不同的页面，这一次这个后台添加和显示在同一个页面，是一个Tab切换效果。涉及到修改传值到添加那里显示出来。久久不能解决，最后静下心来想了想解决方案，然后成功解决。</p>
<p>然后就是利用了存储过程，写了一个数字分页查询。现在，对于我来说，一个项目的增删改查已经不是问题了。从前台到后台，都能信手拈来，这种感觉很好。不过还是有些不足，很多技术还是不会，希望能继续接触一些前沿的技术，达到.net行业的标准。今天很累，在公司写了一天代码。天气热加上上火，真是难受。</p>
<p>就先总结到这里吧，2016年6月5日22:33分。</p>
<h3 id="2016年6月6日星期一"><a href="#2016年6月6日星期一" class="headerlink" title="2016年6月6日星期一"></a>2016年6月6日星期一</h3><p>1、设计院网站</p>
<p>2、修改密码功能</p>
<p>3、后台页面修改</p>
<p>4、快捷编辑</p>
<p>5、存储过程分页</p>
<h3 id="2016年6月7日星期二"><a href="#2016年6月7日星期二" class="headerlink" title="2016年6月7日星期二"></a>2016年6月7日星期二</h3><p>1、整合设计院网站</p>
<p>2、开发文档编写</p>
<p>3、设计院后台图片处理</p>
<p>4、所有代码整理，美化</p>
<p>5、至科网页样式交涉分析</p>
<h3 id="2016年6月8日星期三"><a href="#2016年6月8日星期三" class="headerlink" title="2016年6月8日星期三"></a>2016年6月8日星期三</h3><p>1、修改设计院网站遗留Bug</p>
<p>① 后台上传图片给出建议像素提示</p>
<p>② 服务项目模块每页显示12条数据</p>
<p>③ 修改翻页无效问题</p>
<p>④ 修复上传图片重名的弊端</p>
<p>2、至科网站 – 首页</p>
<p>① 首页总体设计</p>
<p>② 头部加入收藏JS效果</p>
<p>③ 炫酷3D导航栏</p>
<p>④ 首页banner图轮播</p>
<p>⑤ 首页内容区布局</p>
<h3 id="2016年6月9日星期四-端午节放假"><a href="#2016年6月9日星期四-端午节放假" class="headerlink" title="2016年6月9日星期四 - 端午节放假"></a>2016年6月9日星期四 - 端午节放假</h3><h3 id="2016年6月10日星期五-端午节放假"><a href="#2016年6月10日星期五-端午节放假" class="headerlink" title="2016年6月10日星期五 - 端午节放假"></a>2016年6月10日星期五 - 端午节放假</h3><h3 id="2016年6月11日星期六-端午节放假"><a href="#2016年6月11日星期六-端午节放假" class="headerlink" title="2016年6月11日星期六 - 端午节放假"></a>2016年6月11日星期六 - 端午节放假</h3><h3 id="2016年6月12日星期日"><a href="#2016年6月12日星期日" class="headerlink" title="2016年6月12日星期日"></a>2016年6月12日星期日</h3><p>1、至科网站 – 首页</p>
<p>① 首页总体代码完成</p>
<p>② 至科集团简介、热点检测项目、新闻资讯三大小模块完成</p>
<p>③ 底部二维码/公司信息/友链</p>
<p>2、关于至科/公司简介页面完成</p>
<p>3、荣誉资质页面 – 难点</p>
<p>4、查看设计院网站测试bug并修改</p>
<p>5、和PengYun对接至科网站后台功能</p>
<p>6、对至科网站图片内容、大小提出疑问并让美工修改</p>
<h3 id="第八周总结"><a href="#第八周总结" class="headerlink" title="第八周总结"></a>第八周总结</h3><p>刚刚过完端午，相信大家都有吃粽子吧，呃…反正我没吃。</p>
<p>这一周，总感觉是上一周，可能是玩了三天，糊涂了，这一周完成了一个项目。</p>
<p>整个项目的一大半由我一人完成，其中包括：前台静态页面，利用HTML5+CSS+JavaScript编写、提供一套后台UI、后台6)    三层框架搭建、整体优化布局、登录模块、新闻资讯、招聘英才、数据库三个表的设计。。。</p>
<p>今天周日，因为放了三天假，所以今天正常上班，又接手了一个新的项目，和上一个项目类似，可又不类似，总之是多了很多细节，看似简单的页面，却要调试很久。各种特效，用户交互效果也很多。写了一天多一共写了三个页面，第三个页面还没有完全完成。有点吃不消了，作为一共.Net开发，却被公司用来写前端页面，写完前端页面又要继续跟踪后台代码。。。一个网站十几个页面，全由我一个人完成，没日没夜的写。</p>
<p>是不是应该和经理提出…嗯，我需要一个助手，页面太多了吃不消。希望有人能帮我分担一下。这样我也不用那么累。是吧？</p>
<h3 id="2016年6月13日星期一"><a href="#2016年6月13日星期一" class="headerlink" title="2016年6月13日星期一"></a>2016年6月13日星期一</h3><p>1、修复设计院网站bug</p>
<p>2、至科网站</p>
<p>1.关于至科模块，公司简介、荣誉资质、试验室、工程业绩4个页面完成</p>
<p>① 图片瀑布流布局</p>
<p>② 图片大图弹窗浏览</p>
<p>2.服务项目模块，地基基础工程检测、建筑幕墙工程检测、钢结构工程检测、主体结构检测、节能检测、工程设备检测6大页面完成</p>
<p>3.下载中心模块，委托单下载、规范下载2个页面完成</p>
<p>4.新闻中心模块，公司新闻、行业新闻、新闻详情3个页面完成</p>
<p>5.整个网站禁止复制内容</p>
<h3 id="2016年6月14日星期二"><a href="#2016年6月14日星期二" class="headerlink" title="2016年6月14日星期二"></a>2016年6月14日星期二</h3><p>1、人力资源模块完成</p>
<p>2、联系我们模块完成</p>
<p>3、添加禁止选中页面内容脚本(可选)</p>
<p>4、添加禁止鼠标右键脚本(可选)</p>
<p>5、至科页面全部实现完成</p>
<p>6、至科页面思维导向图</p>
<p>7、服务器中配置MVC项目</p>
<p>8、和PengYun交流后台页面搭建及代码实现</p>
<p>9、至科后台代码，文件上传与下载Demo</p>
<h3 id="2016年6月15日星期三"><a href="#2016年6月15日星期三" class="headerlink" title="2016年6月15日星期三"></a>2016年6月15日星期三</h3><p>1、装系统</p>
<p>2、搭建论坛</p>
<p>3、创建设计院网站下载中心、友情链接两个表</p>
<p>4、根据需求手写model、dal、bll三层代码</p>
<p>5、完成后台下载中心之上传文件功能</p>
<p>6、后台下载中心文件管理功能</p>
<p>7、文件信息列表分页、删除功能</p>
<p>8、前台所有页面转换为aspx页面</p>
<h3 id="2016年6月16日星期四"><a href="#2016年6月16日星期四" class="headerlink" title="2016年6月16日星期四"></a>2016年6月16日星期四</h3><p>1、查看提交的测试缺陷报告</p>
<p>2、分析缺陷报告中的bug</p>
<p>3、修改设计院网站bug及规避bug</p>
<p>4、合并整合至科网站代码</p>
<p>5、报告查询页面</p>
<p>6、报告查询表数据库设计</p>
<p>7、数据字典整理</p>
<p>8、至科后台图片替换，页面添加修改美化</p>
<h3 id="2016年6月17日星期五"><a href="#2016年6月17日星期五" class="headerlink" title="2016年6月17日星期五"></a>2016年6月17日星期五</h3><p>1、至科网站页面修改，添加新功能</p>
<p>2、后台主页添加时钟</p>
<p>3、修改密码功能</p>
<p>4、后台查询报告模块</p>
<p>5、动态添加检测参数信息</p>
<p>6、查询报告模块添加功能</p>
<p>7、至科待办事项分配</p>
<h3 id="第九周总结"><a href="#第九周总结" class="headerlink" title="第九周总结"></a>第九周总结</h3><p>写总结，坚持的也有两个月了，收货颇多。</p>
<p>这周同学聚餐了，喝的酩酊大醉，还记得大一那会，懵懵懂懂，一转眼大学都已经快要结束了。</p>
<p>这周写了美工设计的所有psd页面，写完前端继续协助做后端。改了测试给的上个网站的bug。希望在下周完结手头上的所有事。因为报考了驾校一直没时间去练车，准备在忙完手上的项目请假一个星期回学校去练车，一直拖下去也不是办法。</p>
<p>今天父亲节，突然想家了，半年多了还没回去过，等待下一个小长假，我想回家看看。</p>
<p>…不想写了，烦！</p>
<h3 id="2016年6月20日星期一"><a href="#2016年6月20日星期一" class="headerlink" title="2016年6月20日星期一"></a>2016年6月20日星期一</h3><p>1、申诉路博特域名账号密码相关信息，找出问题所在</p>
<p>2、联系花生壳官方客服，找到修改账号密码解决办法</p>
<p>3、至科网站任务规划</p>
<p>4、至科网站后台报告查询模块增删改查</p>
<p>5、至科网站前后报告查询模块查询功能</p>
<p>① 依据报告编号精确查询</p>
<p>② 为空提示</p>
<p>③ 不存在给出提示</p>
<p>④ 正确显示查询信息</p>
<p>⑤ 依据后台填写报告内容，填多少信息，查出来就是多少信息</p>
<p>6、接收路博特设计网页设计方案，分析效果，实现难度，不合理之处…</p>
<p>7、至科后台部分修改</p>
<p>① 友情链接模块修改</p>
<p>② 所有页面防止不登录直接访问</p>
<h3 id="2016年6月21日星期二"><a href="#2016年6月21日星期二" class="headerlink" title="2016年6月21日星期二"></a>2016年6月21日星期二</h3><p>1、报告查询之增加查询码功能模块</p>
<p>① 增加查询码字段，修改3层数据</p>
<p>② 完成带有查询码功能的增删改查</p>
<p>③ 依据报告编号使用不可逆算法MD5加密截取其中5位字符串保存至数据库</p>
<p>④ 前台报告查询功能初步实现</p>
<p>2、至科网站整体调试修改，总体功能需求全部实现</p>
<p>3、部署至科网站提交给测试人员进行测试</p>
<p>4、设计院网站域名备案信息等若干问题</p>
<h3 id="2016年6月22日星期三"><a href="#2016年6月22日星期三" class="headerlink" title="2016年6月22日星期三"></a>2016年6月22日星期三</h3><p>1、协助网站备案，邮寄核验单</p>
<p>2、整合设计院网站最终版本含源码版和部署版</p>
<p>3、修改至科网站测试所存在的bug</p>
<p>4、更改至科网站所有时间统一为年月日形式</p>
<p>5、报告查询中修改报告信息时显示所有信息</p>
<p>6、报告查询添加日志管理模块，协同完成</p>
<h3 id="2016年6月23日星期四"><a href="#2016年6月23日星期四" class="headerlink" title="2016年6月23日星期四"></a>2016年6月23日星期四</h3><p>1、修改至科测试所提交的Bug</p>
<p>2、发布最新版本提供测试人员进行反测</p>
<p>3、反测bug修改，测试完成，发布服务器，至科网站到达一个节点</p>
<p>4、修复文件下载模块，文件下载无法打开问题。</p>
<h3 id="2016年6月24日星期五"><a href="#2016年6月24日星期五" class="headerlink" title="2016年6月24日星期五"></a>2016年6月24日星期五</h3><p>1、安排今日任务</p>
<p>① ChenXia：集团网站设计、以第一版为主</p>
<p>② ZouXueXia：设计院网站和至科网站总体测试</p>
<p>③ PengYun：路博特网站前台/后台(从后台开始)</p>
<p>④ MySelf：集团网站前台页面HTML代码，跟进设计，提出建议，修改方案</p>
<p>2、分享完整的富文本框编辑器Demo</p>
<p>3、整理总结文件上传与下载的功能知识点</p>
<p>4、整合至科网站最终版本含源码版和部署版</p>
<p>5、Web前端css工作流，代码技巧，语法糖学习</p>
<p>6、集团网站首页头部logo、右侧搜索、导航栏</p>
<h3 id="第十周总结"><a href="#第十周总结" class="headerlink" title="第十周总结"></a>第十周总结</h3><p>本周完成工作</p>
<p>1、两个网站的bug修改</p>
<p>2、至科网站的后台编码，前台数据绑定，功能模块全部完成</p>
<p>3、提交了设计院网站的最终版本</p>
<p>4、报告查询模块查询报告</p>
<p>5、整合了至科网站最终版本含源码版和部署版</p>
<p>本周达到了预期结果：</p>
<p>1、设计院的网站告一段落，全部完成</p>
<p>2、至科网站前后台全部完成，经测试修改整合也已完成改版</p>
<p>正在进行中的事情：</p>
<p>1、路博特网站</p>
<p>2、<a href="http://www.whdfjs.com/" target="_blank" rel="external">集团网站</a></p>
<p>下周工作计划</p>
<p>1、编写集团网站静态页面</p>
<p>2、后台管理系统</p>
<p>3、路博特网站</p>
<h3 id="2016年6月27日星期一"><a href="#2016年6月27日星期一" class="headerlink" title="2016年6月27日星期一"></a>2016年6月27日星期一</h3><p>1、修改设计院和至科两个网站的bug</p>
<p>2、JS划入划出特效学习</p>
<h3 id="2016年6月28日星期二"><a href="#2016年6月28日星期二" class="headerlink" title="2016年6月28日星期二"></a>2016年6月28日星期二</h3><p>1、联系花生壳办理域名过户…</p>
<p>2、查看，对比后，提供企业邮箱的两种方案</p>
<p>3、寻找Asp.Net版BBS源码</p>
<h3 id="2016年6月29日星期三"><a href="#2016年6月29日星期三" class="headerlink" title="2016年6月29日星期三"></a>2016年6月29日星期三</h3><p>1、跟进花生壳域名过户，填写过户原因</p>
<p>2、修改至科网站导航样式、联系我们页面</p>
<p>3、JS速度动画、透明度动画、缓冲动画、多物体动画、链式动画、同事运动案例，万能运动框架编写</p>
<p>4、集团网站首页代码编写</p>
<h3 id="2016年6月30日星期四"><a href="#2016年6月30日星期四" class="headerlink" title="2016年6月30日星期四"></a>2016年6月30日星期四</h3><p>1、集团网站首页</p>
<p>2、域名注册证书</p>
<h3 id="2016年7月1日星期五"><a href="#2016年7月1日星期五" class="headerlink" title="2016年7月1日星期五"></a>2016年7月1日星期五</h3><p>1、集团网站首页全部完成</p>
<p>2、关于集团模块(集团简介、董事长致辞、组织结构、资质资格、集团荣誉、领导关怀页面)完成</p>
<p>3、工程业绩页面(竣工工程模块)</p>
<p>4、提交工信部域名注销备案申请</p>
<h3 id="第十一周总结"><a href="#第十一周总结" class="headerlink" title="第十一周总结"></a>第十一周总结</h3><p>本月工作内容</p>
<p>1、设计院网站</p>
<p>2、至科网站</p>
<p>3、集团网站</p>
<p>4、路博特网站</p>
<p>5、有关域名备案等相关工作</p>
<p>本月工作总结</p>
<p>1、设计院网站两个版本的前台页面</p>
<p>2、分工合作，完成设计院数据库设计，后台代码编写</p>
<p>3、至科网站前台页面</p>
<p>4、至科网站后台代码编写</p>
<p>5、经测试修改两个网站存在的Bug，达到可以上线的版本</p>
<p>6、正在进行集团网站前台页面的代码编写</p>
<p>7、域名备案等工作</p>
<p>8、工作需求中的自我学习(Asp.Net存储过程、JS各种动画效果、H5+CSS3全新前端代码、寻找论坛BBS源码、Asp.Net富文本框使用案例)</p>
<p>下月工作计划</p>
<p>1、集团网站前端页面</p>
<p>2、集团网站后台代码</p>
<p>3、路博特网站前端页面</p>
<p>4、路博特网站后台代码</p>
<p>5、工作中的其它任务</p>
<p>6、自我学习</p>
<p>4月份来公司，至今也已两个多月了。</p>
<p>马上就是3个月了，学到了很多，也领悟了很多。</p>
<p>7月份想要请假休息几天回家一趟，感觉有点疲惫。</p>
<h3 id="2016年7月4日星期一"><a href="#2016年7月4日星期一" class="headerlink" title="2016年7月4日星期一"></a>2016年7月4日星期一</h3><p>1、集团网站 - html页面</p>
<p>① 新闻中心模块完成</p>
<p>② 科技创新模块完成</p>
<p>③ 人力资源模块完成</p>
<p>④ 企业文化模块完成</p>
<p>⑤ 联系我们模块完成</p>
<p>2、集团网站页面美化</p>
<h3 id="2016年7月5日星期二"><a href="#2016年7月5日星期二" class="headerlink" title="2016年7月5日星期二"></a>2016年7月5日星期二</h3><p>1、集团网站静态页面全部完成</p>
<p>2、放弃之前路博特域名，进行新网站备案</p>
<p>3、网站备案，核减单待打印上传</p>
<p>4、集团网站需修改部分信息</p>
<h3 id="2016年7月6日星期三"><a href="#2016年7月6日星期三" class="headerlink" title="2016年7月6日星期三"></a>2016年7月6日星期三</h3><p>湖北武汉，暴雨，休息一天</p>
<h3 id="2016年7月7日星期四"><a href="#2016年7月7日星期四" class="headerlink" title="2016年7月7日星期四"></a>2016年7月7日星期四</h3><p>1、打印网站备案核验单</p>
<p>2、修改集团网站静态页面</p>
<p>① 工程业绩模块：竣工工程、在建工程修改为图文展示样式</p>
<p>② 工程业绩详情页</p>
<p>3、网站所有信息及联系方式修改</p>
<p>4、数据库：(用户、新闻中心、新闻类型、工程业绩、业绩类型、联系我们-在线留言、联系我们-联系方式）表创建</p>
<h3 id="2016年7月8日星期五"><a href="#2016年7月8日星期五" class="headerlink" title="2016年7月8日星期五"></a>2016年7月8日星期五</h3><p>1、教育局Js代码加密</p>
<p>2、Node.js学习</p>
<p>3、集团网站导航修改</p>
<h3 id="第十二周总结"><a href="#第十二周总结" class="headerlink" title="第十二周总结"></a>第十二周总结</h3><p>这周完成了公司集团网站的所有静态页面，这是我在公司做的第三个项目了。感觉好累，现在有点力不从心，没有刚开始的激情了。</p>
<p>大夏天，好友同学们都回家避暑去了，然而我已经很早就没有暑假可言了。</p>
<p>马上出来实习就三个月了，好想回家，从过年到现在都没有回过家，想回去看看。</p>
<h3 id="2016年7月11日星期一"><a href="#2016年7月11日星期一" class="headerlink" title="2016年7月11日星期一"></a>2016年7月11日星期一</h3><p>1、提交备案信息(管局审核中)，等待审核结果</p>
<p>2、学习Node.js</p>
<p>3、整理有关OA、CRM、ERP…解决方案的展示文字</p>
<p>4、整理路博特网站相关资料</p>
<h3 id="2016年7月12日星期二"><a href="#2016年7月12日星期二" class="headerlink" title="2016年7月12日星期二"></a>2016年7月12日星期二</h3><p>路博特网站</p>
<p>首页、走进路博特、解决方案、解决方案详情页、新闻资讯、加入我们、联系我们-页面完成</p>
<p>新闻资讯详情页，无样式模板</p>
<p>产品与解决方案公用一个页面。暂时没有多余的项目，建议导航目前只放一个解决方案，产品保留，需要的时候可以加上。</p>
<h3 id="2016年7月13日星期三"><a href="#2016年7月13日星期三" class="headerlink" title="2016年7月13日星期三"></a>2016年7月13日星期三</h3><p>1、路博特网站静态页面全部完成</p>
<p>2、至科网站页面信息修改</p>
<p>3、至科后台登录加入UKID数据验证</p>
<p>4、最新版至科网站发布与上传</p>
<h3 id="2016年7月14日星期四"><a href="#2016年7月14日星期四" class="headerlink" title="2016年7月14日星期四"></a>2016年7月14日星期四</h3><p>1、完善路博特网站页面</p>
<p>2、路博特数据库搭建</p>
<p>3、至科网站：新闻中心-至科空间模块完成</p>
<p>4、至科网站：服务项目模块修订整改</p>
<p>5、后台测试数据删除，数据库测试数据清空</p>
<p>6、整合至科网站源码、部署版代码，随时可以上线</p>
<p>7、集团网站：人力资源-添加人才聚集模块、首页-banner图更换…</p>
<h3 id="2016年7月15日星期五"><a href="#2016年7月15日星期五" class="headerlink" title="2016年7月15日星期五"></a>2016年7月15日星期五</h3><p>请假一天…</p>
<h3 id="第十三周总结"><a href="#第十三周总结" class="headerlink" title="第十三周总结"></a>第十三周总结</h3><p>本周有事请假了一天，首先这一周完成了路博特静态网站，PC版和手机版自适应页面</p>
<p>路博特网站备案告一段落，静等管局审核完成</p>
<p>着手至科网站上线任务，修改了至科网站的一些bug和新增了一些功能(登录UKID验证)</p>
<p>集团为网站因需求而进行修改压面，添加页面</p>
<p>计划下周将至科网站上线全部完成，开始集团网站前后台和路博特网站后台代码编写</p>
<h3 id="2016年7月18日星期一"><a href="#2016年7月18日星期一" class="headerlink" title="2016年7月18日星期一"></a>2016年7月18日星期一</h3><p>1、至科网站上线数据填充</p>
<p>2、集团网站页面添加和修改</p>
<p>3、分配至科网站数据填充任务给ZouXueXia</p>
<p>4、jquery插件学习及使用</p>
<h3 id="2016年7月19日星期二"><a href="#2016年7月19日星期二" class="headerlink" title="2016年7月19日星期二"></a>2016年7月19日星期二</h3><p>1、集团网站修改添加页面</p>
<p>① 工法标准改为工法，增加技术规章类型</p>
<p>② 水利建设工程改为园林绿化</p>
<p>③ 工程业绩模块增加设计工程页面</p>
<p>④ 工地整理工程改为土地整理工程</p>
<p>⑤ 后台数据库搭建</p>
<p>2、<a href="http://www.lubok.cn" target="_blank" rel="external">路博特</a> 网站域名备案成功，新增<a href="http://dfjssj.com" target="_blank" rel="external">设计院</a> 网站打印核验单初审通过，待邮寄核验单。</p>
<h3 id="2016年7月20日星期三"><a href="#2016年7月20日星期三" class="headerlink" title="2016年7月20日星期三"></a>2016年7月20日星期三</h3><p>1、集团网站静态页面全部完成</p>
<p>① 领导关怀页面完成</p>
<p>② 技术中心页面完成</p>
<p>③ 活动剪辑详情页完成</p>
<p>④ 公益事业、公益事业详情页完成</p>
<p>⑤ 科研领域完成</p>
<p>⑥ 简历投递完成</p>
<p>⑦ 学习平台、学习平台详情页完成</p>
<p>2、集团网站后台数据库搭建</p>
<h3 id="2016年7月21日星期四"><a href="#2016年7月21日星期四" class="headerlink" title="2016年7月21日星期四"></a>2016年7月21日星期四</h3><p>1、Lbt网站数据库搭建完毕</p>
<p>2、Lbt网站三层框架搭建</p>
<p>3、集团网站项目计划图</p>
<p>4、集团网站数据库搭建完毕</p>
<p>5、集团网站三层框架搭建</p>
<p>6、集团网站后台页面框架搭建</p>
<h3 id="2016年7月22日星期五"><a href="#2016年7月22日星期五" class="headerlink" title="2016年7月22日星期五"></a>2016年7月22日星期五</h3><p>集团网站后台</p>
<p>1、Model层所有代码完成</p>
<p>2、登录模块完成</p>
<p>关于集团模块</p>
<p>1、集团简介、董事长致辞、组织结构三大模块Update完成</p>
<p>2、资格资质、集团荣誉、领导关怀，标题，多图上传，列表展示，存储过程分页查询完成</p>
<p>新闻中心模块—新闻中心模块界面搭建完成，数据访问层(Dal)代码完成</p>
<h3 id="第十四周总结"><a href="#第十四周总结" class="headerlink" title="第十四周总结"></a>第十四周总结</h3><p>本周完成工作</p>
<p>1.至科网站上线工作(代码整理、数据填充…)完成</p>
<p>2.路博特网站所有HTML静态页面完成</p>
<p>3.路博特网站后台数据库搭建完成</p>
<p>4.路博特网站后台3层框架代码搭建完成</p>
<p>5.<a href="http://www.lubok.cn" target="_blank" rel="external">路博特</a> 网站域名备案成功</p>
<p>6.集团网站所有HTML静态页面完成</p>
<p>7.集团网站项目计划流程图</p>
<p>8.集团网站后台数据库搭建完成</p>
<p>9.集团网站后台登录模块、关于集团模块完成</p>
<p>本周工作总结</p>
<p>本周在三个网站之间来回切换，至科网站上线工作完成，只差备案成功，上传代码，算是告一段落。</p>
<p>公司内部网站改版，独立完成了PC版及手机自适应版静态页面路博特网站，一并完成后台数据库的搭建及网站3层框架的搭建。</p>
<p>主要时间还是花在集团网站上，集团网站页面众多，虽说有部分重复页面，但是也还是达到了36个页面。花费了我很多时间来完成，美工多次外出办公回来传达需求，修修改改终于在周四完成了所有页面，然后马不停蹄创建数据库，搭建后台框架进行项目计划安排分析。现已经完成登录模块、关于集团模块的后台代码。</p>
<p>下周工作计划</p>
<p>1.全身心投入到集团网站后台开发当中去，按计划表进行开发，在周末之前完成所有后台逻辑代码</p>
<p>2.配合完成至科网站上线及备案工作…</p>
<h3 id="2016年7月25日星期一"><a href="#2016年7月25日星期一" class="headerlink" title="2016年7月25日星期一"></a>2016年7月25日星期一</h3><p>一、集团网站</p>
<p>1.新闻中心模块</p>
<p>添加、后台列表展示、删除、分页查询、分类型查询完成</p>
<p>2.科技创新模块</p>
<p>① 技术中心、科研领域修改功能完成</p>
<p>② 科技成果添加、后台展示、删除、分页查询、分类型查询完成</p>
<p>3.人力资源模块</p>
<p>① 人才战略修改功能完成</p>
<p>② 人才聚集添加、后台带缩略图展示、删除、分页查询完成</p>
<p>③ 人才招聘添加、后台展示、删除、分页查询完成</p>
<p>二、至科网站</p>
<p>1.整理上线所缺数据文档</p>
<p>2.修改至科网站Logo及导航菜单颜色</p>
<p>三、路博特网站</p>
<p>1.路博特主机域名绑定</p>
<p>2.上线路博特静态页面网站</p>
<h3 id="2016年7月26日星期二"><a href="#2016年7月26日星期二" class="headerlink" title="2016年7月26日星期二"></a>2016年7月26日星期二</h3><p>1.友情链接模块增删改查</p>
<p>2.企业文化模块</p>
<p>① 企业理念Update</p>
<p>② 党团建设增删改查</p>
<p>3.人力资源模块</p>
<p>① 简历投递上传下载</p>
<p>② 学习平台增删改查</p>
<p>4.联系我们页面搭建完毕</p>
<h3 id="2016年7月27日星期三"><a href="#2016年7月27日星期三" class="headerlink" title="2016年7月27日星期三"></a>2016年7月27日星期三</h3><p>1.集团网站联系我们模块</p>
<p>① 在线留言完成</p>
<p>② 联系方式(站点信息)完成</p>
<p>2.友情链接前台数据绑定</p>
<p>3.学习多图上传，实时预览代码</p>
<h3 id="2016年7月28日星期四"><a href="#2016年7月28日星期四" class="headerlink" title="2016年7月28日星期四"></a>2016年7月28日星期四</h3><p>1.集团网站工程业绩模块</p>
<p>① 竣工工程后台增删改查，图片上传，列表显示，分类查询</p>
<p>② 在建工程后台增删改查，图片上传，列表显示，分类查询</p>
<p>③ 设计工程后台增删改查，图片上传，列表显示</p>
<p>2.集团网站企业文化模块</p>
<p>① 公益事业后台增删改查，多图上传并显示</p>
<p>② 活动剪辑页面添加完成</p>
<h3 id="2016年7月29日星期五"><a href="#2016年7月29日星期五" class="headerlink" title="2016年7月29日星期五"></a>2016年7月29日星期五</h3><p>1.工程业绩模块</p>
<p>① 竣工工程 - 增删改查、分页列表、分类查询、前台数据绑定</p>
<p>② 在建工程 - 增删改查、分页列表、分类查询、前台数据绑定</p>
<p>③ 设计工程 - 增删改查、分页列表、前台数据绑定</p>
<p>2.企业文化模块</p>
<p>① 公益事业 - 增删改查、多图上传、前台数据绑定、轮播显示</p>
<p>② 活动剪辑 - 增删改查、多图上传、前台数据绑定、轮播显示</p>
<p>3.联系我们 - 全部完成</p>
<p>4.友情链接 - 全部完成</p>
<p>5.后台首页 - 文字更换、logo修改、页面修改美化优化</p>
<p>6.后台修改密码功能完成</p>
<p>7.后台整体页面搭建完成</p>
<p>8.前台数据绑定完成</p>
<h3 id="第十五周总结"><a href="#第十五周总结" class="headerlink" title="第十五周总结"></a>第十五周总结</h3><p>本周完成工作</p>
<p>1.集团网站后台功能已全部实现</p>
<p>2.前台数据绑定完成90%左右</p>
<p>本周工作总结</p>
<p>集团网站从前台到后台，收获颇多。</p>
<p>本周开始着手写集团网站后台代码，因为是自己写的前台页面，所以对整个页面的架构是一目了然的。</p>
<p>首先根据前台页面创建了网站数据库。让后利用代码生成器生成网站Model层代码，对于代码生成的好处就是可以减轻工作量，因为网站涉及到30来个数据表，如果是手写Model层代码会耗费大量的时间。</p>
<p>根据生成的Model层代码手写Dal与Bll层增删改查的代码。这个耗费了我大量的时间。可以说在三成架构中，网站的Dal层其实就是网站的灵魂，所有的增删改查分页查询等等都离不开Dal层。</p>
<p>分页用的存储过程，存储过程的好处有很多，运行速度快，可以接收参数、输出参数、返回单个值或者多个结果集以及返回值。这样网站相对来说会比较稳定。</p>
<p>然后在后台开发中，用到了多图上传，因为之前没有做过，便在网上学习了一下多图上传的案例，总的来说我有两种解决方案，一种是多图上传的插件，这个比较强大，学习了一下弄懂了其原理，另外一种便是循环上传图片，因为多图上传还是需要一张一张的上传，这个比较简单，由于时间和效率的原因，我采用了循环上传。</p>
<p>最后一个便是缩略图生成，这个在网上找的现成的生成缩略图的一个方法，看了一下代码，可以高按照度或者宽度的比例来生成对应的缩略图，而且也不会对图片造成变形。直接调用，在前台资质资格、集团荣誉、领导关怀三个模块用上了。</p>
<p>一个工作日的时间，完成了集团网站后台所用逻辑代码，以及前台90%的数据绑定。</p>
<p>下周工作计划</p>
<p>1.网站数据添加完毕</p>
<p>2.交由测试人员进行测试</p>
<p>3.配合测试人员进行Bug修改</p>
<p>4.完善手头上的工作，休假一星期</p>
<h3 id="2016年8月1日星期一"><a href="#2016年8月1日星期一" class="headerlink" title="2016年8月1日星期一"></a>2016年8月1日星期一</h3><p>1、集团网站完成</p>
<p>2、上传Lims管理系统</p>
<p>3、Lucene.Net+盘古分词学习</p>
<p>4、Lbt数据库</p>
<p>5、Model代码</p>
<h3 id="2016年8月2日星期二"><a href="#2016年8月2日星期二" class="headerlink" title="2016年8月2日星期二"></a>2016年8月2日星期二</h3><p>1、集团网站Bug修改</p>
<p>2、Lbt网站简介模块完成</p>
<p>3、各种琐事…</p>
<h3 id="2016年8月3日星期三"><a href="#2016年8月3日星期三" class="headerlink" title="2016年8月3日星期三"></a>2016年8月3日星期三</h3><p>1.集团网站Bug修改</p>
<p>2.Lbt网站3层代码完成</p>
<p>3.后台解决方案模块完成</p>
<h3 id="2016年8月4日星期四"><a href="#2016年8月4日星期四" class="headerlink" title="2016年8月4日星期四"></a>2016年8月4日星期四</h3><p>1.容联短信接口文档学习</p>
<p>2.Demo,暂时只可以实现接收收短信，未进行验证。</p>
<p>2.集团网站Bug修改</p>
<h3 id="2016年8月5日星期五"><a href="#2016年8月5日星期五" class="headerlink" title="2016年8月5日星期五"></a>2016年8月5日星期五</h3><p>1.集团网站后台公益事业、活动剪辑详情页面</p>
<p>2.容联短信验证接口代码实现、文档说明</p>
<p>3.事业单位等培训机构网站</p>
<p>4.路博特网站交接、后台页面图标logo、链接更换</p>
<p>5.集团网站Bug修改完毕</p>
<p>6.至科、集团网站源码发送</p>
<h3 id="第十六周总结"><a href="#第十六周总结" class="headerlink" title="第十六周总结"></a>第十六周总结</h3><p>本周完成工作</p>
<p>1.集团网站Bug修改</p>
<p>2.路博特网站框架、数据库搭建</p>
<p>3.三层代码以及解决方案模块</p>
<p>4.容联短信验证接口代码实现、文档说明</p>
<p>5.各个版本代码整理、备份管理…</p>
<p>本周工作总结</p>
<p>本周主要完成了集团网站的Bug修改，经过测试之手，网站存在很多Bug，都是在开发过程中疏忽的。软件测试这个环节在软件行业中是至关重要的，很多人认为软件开发中贡献最大的人是开发人员，这个观点不能否认，但是软件测试人员也扮演着非常重要的角色。经此次开发过程遇到的一些问题，学到了不少经验。在填充数据的时候遇到一个SQL错误，.Net SqlClient Data Provider，经过查阅资料，分析原因，最后得以解决并且进行记录(SQL错误：.Net SqlClient Data Provider)…</p>
<p>下周工作计划</p>
<p>下周请假，回家好好休息，上班后好好工作。</p>
<h3 id="2016年8月8日—2016年8月11日请假回家休息"><a href="#2016年8月8日—2016年8月11日请假回家休息" class="headerlink" title="2016年8月8日—2016年8月11日请假回家休息"></a>2016年8月8日—2016年8月11日请假回家休息</h3><h3 id="2016年8月12日星期五"><a href="#2016年8月12日星期五" class="headerlink" title="2016年8月12日星期五"></a>2016年8月12日星期五</h3><p>1、学习node.js</p>
<p>2、至科、集团、路博特网站代码修改整理</p>
<p>3、转达任务至团队人员，转发邮件</p>
<p>4、上传代码，上线网站</p>
<p>5、至科资格检测信息管理系统对接</p>
<h3 id="2016年8月15日星期一"><a href="#2016年8月15日星期一" class="headerlink" title="2016年8月15日星期一"></a>2016年8月15日星期一</h3><p>1、至科检测资格信息查询系统静态页面完成</p>
<p>2、表单验证js完成</p>
<p>3、后台用户查询登录三层代码完成</p>
<p>4、登录页面保存用户信息至数据库完成</p>
<p>5、手机验证码发送并校验完成</p>
<p>6、点击弹窗显示和关闭</p>
<p>7、修改路博特页面文字错误</p>
<p>8、美化至科检测资格信息查询系统后台</p>
<p>9、至科检测资格信息查询系统前后台完成，可接入容联短信平台进入测试阶段</p>
<h3 id="2016年8月16日星期二"><a href="#2016年8月16日星期二" class="headerlink" title="2016年8月16日星期二"></a>2016年8月16日星期二</h3><p>1、至科检测资格信息查询系统本地发布进行后台测试</p>
<p>2、检测资格查询系统Bug修改</p>
<p>3、H5 &amp; CSS3 实战书看完</p>
<h3 id="2016年8月17日星期三"><a href="#2016年8月17日星期三" class="headerlink" title="2016年8月17日星期三"></a>2016年8月17日星期三</h3><p>1、至科人员资格查询系统上线</p>
<p>2、至科、设计院、路博特网站更新需求、Bug修改</p>
<p>3、至科、设计院网站后台增加上传新闻图片功能</p>
<p>4、极验验证码</p>
<h3 id="2016年8月18日星期四"><a href="#2016年8月18日星期四" class="headerlink" title="2016年8月18日星期四"></a>2016年8月18日星期四</h3><p>1、设计院网站Bug修改，信息替换，导航调整，招聘英才列表显示调整</p>
<p>2、至科网站Bug修改，热点检测项目滚动特效，图片修改，添加试验室信息管理系统链接，查询系统下报告查询添加验证码限制查询功能</p>
<p>3、至科检测人员资格信息管理系统页面修改，增加图片验证码限制功能</p>
<h3 id="2016年8月19日星期五"><a href="#2016年8月19日星期五" class="headerlink" title="2016年8月19日星期五"></a>2016年8月19日星期五</h3><p>1、集团网站、设计院网站、至科网站维护</p>
<p>2、至科检测人员资格信息管理系统</p>
<p>3、.Net Ajax应用与学习</p>
<h3 id="2016年8月22日星期一"><a href="#2016年8月22日星期一" class="headerlink" title="2016年8月22日星期一"></a>2016年8月22日星期一</h3><p>1、至科网站导航检测报告真伪查询修改</p>
<p>2、检测人员资格查询后台界面修改调整</p>
<p>3、短信验证提交容联审核通过，根据审核通过模板Id修改短信验证，现都可查询</p>
<p>4、添加无验证查询页面用于二维码扫描查询</p>
<p>5、集团网站接入阿里云备案</p>
<h3 id="2016年8月23日星期二"><a href="#2016年8月23日星期二" class="headerlink" title="2016年8月23日星期二"></a>2016年8月23日星期二</h3><p>1、继续集团网站备案</p>
<p>2、QR-Code二维码生成</p>
<p>3、至科检测资格信息管理系统</p>
<p>4、工作室网站美化调整</p>
<h3 id="2016年8月24日星期三"><a href="#2016年8月24日星期三" class="headerlink" title="2016年8月24日星期三"></a>2016年8月24日星期三</h3><p>1、检测单位上岗人员检测资格查询系统完善</p>
<p>2、Node.js</p>
<p>3、集团网站新闻时间修改、维护</p>
<h3 id="2016年8月25日星期四"><a href="#2016年8月25日星期四" class="headerlink" title="2016年8月25日星期四"></a>2016年8月25日星期四</h3><p>1、集团网站维护、时间修改</p>
<p>2、至科网站维护、文字修改</p>
<p>3、电子宣传册</p>
<h3 id="2016年8月26日星期五"><a href="#2016年8月26日星期五" class="headerlink" title="2016年8月26日星期五"></a>2016年8月26日星期五</h3><p>1、Hadoop核心架构研究抄录</p>
<p>2、C#语法糖(自动属性、隐式类型、匿名类型、Lambad表达式…)</p>
<p>3、C#，T4模板学习</p>
<h3 id="2016年8月29日星期一"><a href="#2016年8月29日星期一" class="headerlink" title="2016年8月29日星期一"></a>2016年8月29日星期一</h3><p>1、电子宣传册</p>
<p>2、网站维护</p>
<p>3、ASP.NET MVC学习</p>
<h3 id="2016年8月30日星期二"><a href="#2016年8月30日星期二" class="headerlink" title="2016年8月30日星期二"></a>2016年8月30日星期二</h3><p>1、WebApp方案</p>
<p>2、WeX5开源移动开发框架</p>
<p>3、Entity Framework了解学习</p>
<h3 id="2016年8月31日星期三"><a href="#2016年8月31日星期三" class="headerlink" title="2016年8月31日星期三"></a>2016年8月31日星期三</h3><p>1、电子宣传册</p>
<p>2、集团网站Bug修改、维护</p>
<p>3、Entity Framework学习、EF三层搭建，增删改查案例</p>
<h3 id="2016年9月1日星期四"><a href="#2016年9月1日星期四" class="headerlink" title="2016年9月1日星期四"></a>2016年9月1日星期四</h3><p>1、Asp.Net MVC 学习</p>
<p>2、电子宣传册在线制作</p>
<h3 id="2016年9月2日星期五"><a href="#2016年9月2日星期五" class="headerlink" title="2016年9月2日星期五"></a>2016年9月2日星期五</h3><p>1、源码整理归档，数据库备份</p>
<p>2、Asp.Net Mvc学习</p>
<h3 id="2016年9月5日—2016年9月14日请假练车考试科目二"><a href="#2016年9月5日—2016年9月14日请假练车考试科目二" class="headerlink" title="2016年9月5日—2016年9月14日请假练车考试科目二"></a>2016年9月5日—2016年9月14日请假练车考试科目二</h3><h3 id="2016年9月18日星期日"><a href="#2016年9月18日星期日" class="headerlink" title="2016年9月18日星期日"></a>2016年9月18日星期日</h3><p>1、上线集团网站</p>
<p>2、至科网站维护</p>
<h3 id="2016年9月19日星期一"><a href="#2016年9月19日星期一" class="headerlink" title="2016年9月19日星期一"></a>2016年9月19日星期一</h3><p>1、WebAPP学习</p>
<p>2、移动端框架jquery.mobil</p>
<p>3、网站维护</p>
<p>4、WebAPP 火车票查询案例</p>
<h3 id="2016年9月20日星期二"><a href="#2016年9月20日星期二" class="headerlink" title="2016年9月20日星期二"></a>2016年9月20日星期二</h3><p>1、WeX5 hybrid APP开发学习</p>
<p>2、WeX5 Baas.Net环境部署，需要VS2015最新版本</p>
<p>3、本地应用打包学习、观看WeX5 在线学习文档</p>
<p>4、2048 APP案例</p>
<h3 id="2016年9月21日星期三"><a href="#2016年9月21日星期三" class="headerlink" title="2016年9月21日星期三"></a>2016年9月21日星期三</h3><p>1、WeX5 Baas.Net环境部署完成</p>
<p>2、Base.Net后端开发学习</p>
<p>3、研究微信公众号开发</p>
<p>4、 微擎平台搭建学习</p>
<h3 id="2016年9月22日星期四"><a href="#2016年9月22日星期四" class="headerlink" title="2016年9月22日星期四"></a>2016年9月22日星期四</h3><p>1、WeX5 App 打包</p>
<p>2、Oracle 基础学习</p>
<p>3、.Net 奇淫巧技</p>
<h3 id="2016年9月23日星期五"><a href="#2016年9月23日星期五" class="headerlink" title="2016年9月23日星期五"></a>2016年9月23日星期五</h3><p>1、ASPOSE.WORD 操作Word Demo</p>
<p>2、PHP基础语法学习</p>
<p>3、微信公众号开发学习</p>
<p>4、文档，文件，项目整理</p>
<h3 id="2016年9月26日星期一"><a href="#2016年9月26日星期一" class="headerlink" title="2016年9月26日星期一"></a>2016年9月26日星期一</h3><p>1、至科微信公众号菜单添加</p>
<p>2、后台UI框架</p>
<h3 id="2016年9月27日星期二"><a href="#2016年9月27日星期二" class="headerlink" title="2016年9月27日星期二"></a>2016年9月27日星期二</h3><p>1、地图标注研究以及案例</p>
<p>2、至科报告查询代添加</p>
<h3 id="2016年9月28日星期三"><a href="#2016年9月28日星期三" class="headerlink" title="2016年9月28日星期三"></a>2016年9月28日星期三</h3><p>1、百度地图自定义标注研究</p>
<p>2、结合数据库动态添加标注案例</p>
<p>3、动态解析数组学习</p>
<h3 id="2016年9月29日星期四"><a href="#2016年9月29日星期四" class="headerlink" title="2016年9月29日星期四"></a>2016年9月29日星期四</h3><p>1、百度地图标注接入数据库、本地查询案例</p>
<p>2、微信公众号</p>
<p>3、至科网站维护小Bug修改</p>
<h3 id="2016年9月30日星期五"><a href="#2016年9月30日星期五" class="headerlink" title="2016年9月30日星期五"></a>2016年9月30日星期五</h3><p>1、微信公众号处理</p>
<p>2、地图标注</p>
<p>3、网页结构分析、代码编写</p>
<h3 id="2016年10月8日星期六"><a href="#2016年10月8日星期六" class="headerlink" title="2016年10月8日星期六"></a>2016年10月8日星期六</h3><p>1、发布至科监测类项目简报网站至服务器</p>
<p>2、至科报告协助上传、维护</p>
<p>3、培训机构HTML代码</p>
<h3 id="2016年10月9日星期日"><a href="#2016年10月9日星期日" class="headerlink" title="2016年10月9日星期日"></a>2016年10月9日星期日</h3><p>培训机构HTML代码完成90%</p>
<h3 id="2016年10月10日星期一"><a href="#2016年10月10日星期一" class="headerlink" title="2016年10月10日星期一"></a>2016年10月10日星期一</h3><p>1、培训机构HTML代码 全部完成</p>
<p>2、项目发布</p>
<h3 id="2016年10月11日星期二"><a href="#2016年10月11日星期二" class="headerlink" title="2016年10月11日星期二"></a>2016年10月11日星期二</h3><p>1、Html、css编码规范html页面编写</p>
<p>2、Webservice</p>
<p>3、Html全屏背景自适应效果demo</p>
<p>4、优仕德项目后台详情页面</p>
<h3 id="2016年10月12日星期三"><a href="#2016年10月12日星期三" class="headerlink" title="2016年10月12日星期三"></a>2016年10月12日星期三</h3><p>1、优仕德项目招考信息列表详情页</p>
<p>2、优仕德项目分页PageHelper</p>
<h3 id="2016年10月13日星期四—考试科目三"><a href="#2016年10月13日星期四—考试科目三" class="headerlink" title="2016年10月13日星期四—考试科目三"></a>2016年10月13日星期四—考试科目三</h3><h3 id="2016年10月14日星期五"><a href="#2016年10月14日星期五" class="headerlink" title="2016年10月14日星期五"></a>2016年10月14日星期五</h3><p>1、文件断点续传技术</p>
<p>2、至科人员检测Bug修改、页面重写、兼容主流浏览器</p>
<p>3、优仕德教育项目Bug修改、页面调整维护</p>
<p>4、Hexo+GitHub学习研究</p>
<p>5、IE不支持placeholder属性的解决方案研究</p>
<p>6、Validator、jquery全选/反选 Demo</p>
<h3 id="2016年10月17日星期一"><a href="#2016年10月17日星期一" class="headerlink" title="2016年10月17日星期一"></a>2016年10月17日星期一</h3><p>1、至科检测工作流登录页面3种方案</p>
<p>2、优仕德Bug修改</p>
<h3 id="2016年10月18日星期二"><a href="#2016年10月18日星期二" class="headerlink" title="2016年10月18日星期二"></a>2016年10月18日星期二</h3><p>1、至科检测接入加密UKID登录</p>
<p>2、Bug修改</p>
<h3 id="2016年10月19日星期三"><a href="#2016年10月19日星期三" class="headerlink" title="2016年10月19日星期三"></a>2016年10月19日星期三</h3><p>1、360等国产浏览器兼容性</p>
<p>2、优仕德项目导航显示效果js修改、页面修改、搜索框百度搜索js</p>
<p>3、githup学习</p>
<h3 id="2016年10月20日星期四"><a href="#2016年10月20日星期四" class="headerlink" title="2016年10月20日星期四"></a>2016年10月20日星期四</h3><p>1、后台UI</p>
<p>2、Sina SAE</p>
<p>3、优仕德项目</p>
<p>4、jquery实例运用</p>
<p>5、前端知识点总结</p>
<h3 id="2016年10月21日星期五"><a href="#2016年10月21日星期五" class="headerlink" title="2016年10月21日星期五"></a>2016年10月21日星期五</h3><p>1、优仕德交互效果修改</p>
<p>2、整合代码，转移至新服务器</p>
<p>3、H+后台UI框架</p>
<h3 id="2016年10月24日星期一"><a href="#2016年10月24日星期一" class="headerlink" title="2016年10月24日星期一"></a>2016年10月24日星期一</h3><p>1、搭建在线慕课平台框架选择和方案的整理</p>
<p>2、权限管理框架</p>
<p>3、FineUI 通用权限管理框架（AppBoxPro）</p>
<p>4、FuneUI ASP.NET 控件库 Demo</p>
<h3 id="2016年10月25日星期二—科目四考试-结束驾考生涯，驾驶证到手"><a href="#2016年10月25日星期二—科目四考试-结束驾考生涯，驾驶证到手" class="headerlink" title="2016年10月25日星期二—科目四考试(结束驾考生涯，驾驶证到手)"></a>2016年10月25日星期二—科目四考试(结束驾考生涯，驾驶证到手)</h3><h3 id="2016年10月26日星期三"><a href="#2016年10月26日星期三" class="headerlink" title="2016年10月26日星期三"></a>2016年10月26日星期三</h3><p>1、权限管理框架申请及其查看</p>
<p>2、Sina SAE</p>
<p>3、.Net多图上传案例</p>
<p>4、源码学习</p>
<h3 id="2016年10月27日星期四"><a href="#2016年10月27日星期四" class="headerlink" title="2016年10月27日星期四"></a>2016年10月27日星期四</h3><p>1、jQuery学习、案例代码编写</p>
<p>2、RoadFlow框架修改</p>
<p>3、jQuery Liger UI API、Demo学习</p>
<p>4、jQuery Liger UI框架搭建</p>
<h3 id="2016年10月28日星期五"><a href="#2016年10月28日星期五" class="headerlink" title="2016年10月28日星期五"></a>2016年10月28日星期五</h3><p>1、jQuery Liger UI框架</p>
<p>2、Bootstrap</p>
<p>3、Webqic快速开发平台</p>
<h3 id="2016年10月31日星期一"><a href="#2016年10月31日星期一" class="headerlink" title="2016年10月31日星期一"></a>2016年10月31日星期一</h3><p>1、 Liger UI框架搭建修改</p>
<p>2、 Asp.net URL重写</p>
<p>3、一般处理程序+html+ajax</p>
<h3 id="2016年11月1日星期二"><a href="#2016年11月1日星期二" class="headerlink" title="2016年11月1日星期二"></a>2016年11月1日星期二</h3><p>1、 Liger UI API</p>
<p>2、NextEasy .net快速开发平台</p>
<p>3、一般处理程序</p>
<h3 id="2016年11月2日星期三"><a href="#2016年11月2日星期三" class="headerlink" title="2016年11月2日星期三"></a>2016年11月2日星期三</h3><p>1、 Liger UI API</p>
<p>2、代码发布，上传上线</p>
<p>3、JS算法案例学习</p>
<p>4、C#后台代码优化功能点实现</p>
<h3 id="2016年11月3日星期四"><a href="#2016年11月3日星期四" class="headerlink" title="2016年11月3日星期四"></a>2016年11月3日星期四</h3><p>1、url重写研究,页面伪静态技术</p>
<p>2、Vue.js学习</p>
<h3 id="2016年11月4日星期五"><a href="#2016年11月4日星期五" class="headerlink" title="2016年11月4日星期五"></a>2016年11月4日星期五</h3><p>1、登陆页面重写、优化</p>
<p>2、框架搭建</p>
<h3 id="2016年11月7日星期一"><a href="#2016年11月7日星期一" class="headerlink" title="2016年11月7日星期一"></a>2016年11月7日星期一</h3><p>1、七牛云存储SDK</p>
<p>2、C#上传图片至七牛云</p>
<h3 id="2016年11月8日星期二"><a href="#2016年11月8日星期二" class="headerlink" title="2016年11月8日星期二"></a>2016年11月8日星期二</h3><p>1、Lims框架</p>
<p>2、至科报告添加</p>
<p>3、HTML5 localStorage 本地存储与读取</p>
<p>4、有关二级域名的知识学习以及全站https加密处理等</p>
<h3 id="2016年11月9日星期三"><a href="#2016年11月9日星期三" class="headerlink" title="2016年11月9日星期三"></a>2016年11月9日星期三</h3><p>1、HTML5 Canvas</p>
<p>2、Excel数据导入SQLServer</p>
<p>3、上传报告页面代码编写</p>
<h3 id="2016年11月10日星期四"><a href="#2016年11月10日星期四" class="headerlink" title="2016年11月10日星期四"></a>2016年11月10日星期四</h3><p>1、Excel数据导入SQLServer完成</p>
<p>2、报告查询码提取器小工具</p>
<h3 id="2016年11月11日星期五"><a href="#2016年11月11日星期五" class="headerlink" title="2016年11月11日星期五"></a>2016年11月11日星期五</h3><p>1、在线学习平台搭建解决方案</p>
<p>2、武汉东方建设集团网站维护修改</p>
<h3 id="2016年11月14日星期一"><a href="#2016年11月14日星期一" class="headerlink" title="2016年11月14日星期一"></a>2016年11月14日星期一</h3><p>1、集团网站logo修改</p>
<p>2、优仕德网站footer修改</p>
<p>3、自适应全屏banner Demo</p>
<h3 id="2016年11月15日星期二"><a href="#2016年11月15日星期二" class="headerlink" title="2016年11月15日星期二"></a>2016年11月15日星期二</h3><p>1、自制html源码查看工具</p>
<p>2、VUE.JS、Jquery文字提示插件</p>
<p>3、Git命令学习</p>
<p>4、看书jQuery开发从入门到精通</p>
<h3 id="2016年11月16日星期三"><a href="#2016年11月16日星期三" class="headerlink" title="2016年11月16日星期三"></a>2016年11月16日星期三</h3><p>1、Git命令学习</p>
<p>2、网站Rewrite防盗链配置文件</p>
<p>3、至科网站报告查询更新至线上</p>
<p>4、本地网校平台搭建解决方案</p>
<h3 id="2016年11月17日星期四"><a href="#2016年11月17日星期四" class="headerlink" title="2016年11月17日星期四"></a>2016年11月17日星期四</h3><p>1、json序列化、反序列化</p>
<p>2、在线搭建网校的方案</p>
<p>3、JSHelper运用</p>
<h3 id="2016年11月18日星期五"><a href="#2016年11月18日星期五" class="headerlink" title="2016年11月18日星期五"></a>2016年11月18日星期五</h3><p>1、Layui 文档学习、Demo练习</p>
<p>2、至科网站报告添加跟踪维护、技术指导</p>
<p>3、本地在线学习/网校搭建</p>
<h3 id="2016年11月21日星期一"><a href="#2016年11月21日星期一" class="headerlink" title="2016年11月21日星期一"></a>2016年11月21日星期一</h3><p>1、Github项目整理、静态资源上传</p>
<p>2、Bolg更新</p>
<p>3、前端插件学习以及整理</p>
<h3 id="2016年11月22日星期二"><a href="#2016年11月22日星期二" class="headerlink" title="2016年11月22日星期二"></a>2016年11月22日星期二</h3><p>1、HTML5</p>
<p>2、至科网站导入报告、页面改写维护</p>
<p>3、借助Flash完成图片批量上传</p>
<h3 id="2016年11月23日星期三"><a href="#2016年11月23日星期三" class="headerlink" title="2016年11月23日星期三"></a>2016年11月23日星期三</h3><p>1、SAE Sina</p>
<p>2、C# ConsoleApplication 2048</p>
<h3 id="2016年11月24日星期四"><a href="#2016年11月24日星期四" class="headerlink" title="2016年11月24日星期四"></a>2016年11月24日星期四</h3><p>1、图片裁剪生成不同尺寸</p>
<p>2、全屏背景轮播循环案例</p>
<p>3、检测资格查询系统信息上传</p>
<h3 id="2016年11月25日星期五"><a href="#2016年11月25日星期五" class="headerlink" title="2016年11月25日星期五"></a>2016年11月25日星期五</h3><p>1、npm包管理工具</p>
<p>2、Markdown语法</p>
<h3 id="2016年11月28日星期一"><a href="#2016年11月28日星期一" class="headerlink" title="2016年11月28日星期一"></a>2016年11月28日星期一</h3><p>1、<a href="http://meowv.com" target="_blank" rel="external">喵呜网</a> 站点搬家</p>
<ol>
<li>备份MySQL数据库</li>
<li>打包整个站点代码文件,通过FTP工具将其下载至本地</li>
<li>修改配置文件</li>
<li>上传至新服务器,导入MySQL数据库</li>
<li>解析IP地址,刷新本地DNS缓存</li>
<li>访问成功,搬家完成</li>
</ol>
<p>2、中电云集-云主机助手 工具</p>
<p>3、Bootstrap Application</p>
<p>4、CSS绝对底部方案</p>
<h3 id="2016年11月29日星期二"><a href="#2016年11月29日星期二" class="headerlink" title="2016年11月29日星期二"></a>2016年11月29日星期二</h3><p>1、Asp.Net MVC学习</p>
<p>2、<a href="http://zktit.com/" target="_blank" rel="external">武汉至科检测技术有限公司网站</a>、<a href="http://www.dfjssj.com/" target="_blank" rel="external">武汉东方建设集团建筑设计院网站</a>、武汉至科检测技术有限公司论坛 3个网站功能清单整理</p>
<h3 id="2016年11月30日星期三"><a href="#2016年11月30日星期三" class="headerlink" title="2016年11月30日星期三"></a>2016年11月30日星期三</h3><p>1、C#文件读写操作 IO</p>
<p>2、C#委托 Delegate</p>
<p>3、C#异常处理 ExceptionHandle</p>
<p>4、C#事件处理机制 Event</p>
<p>5、C#索引器 Indexer</p>
<p>6、C#泛型 Generic</p>
<p>7、ASP.NET MVC Introduce</p>
<h3 id="2016年12月1日星期四"><a href="#2016年12月1日星期四" class="headerlink" title="2016年12月1日星期四"></a>2016年12月1日星期四</h3><p>1、C#的Attribute</p>
<p>2、C#的预处理指令</p>
<p>3、C#的反射机制</p>
<p>4、C#的正则表达式</p>
<h3 id="2016年12月2日星期五"><a href="#2016年12月2日星期五" class="headerlink" title="2016年12月2日星期五"></a>2016年12月2日星期五</h3><p>1、网站在线打包成App平台</p>
<p>2、C#的匿名函数</p>
<p>3、江汉区交警大队网站内容以及页面修改</p>
<p>4、网站漂浮窗实现</p>
<h3 id="2016年12月5日星期一"><a href="#2016年12月5日星期一" class="headerlink" title="2016年12月5日星期一"></a>2016年12月5日星期一</h3><p>1、<a href="http://zktit.com/" target="_blank" rel="external">至科</a>网站导航修改兼容IE9+</p>
<p>2、Entity Framework模式、ASP.NET MVC Ajax/分页/认证与授权</p>
<h3 id="2016年12月6日星期二"><a href="#2016年12月6日星期二" class="headerlink" title="2016年12月6日星期二"></a>2016年12月6日星期二</h3><p>1、江汉区交警大队网站每日值班功能完成</p>
<p>2、留言功能实现</p>
<p>3、首页漂浮窗</p>
<h3 id="2016年12月7日星期三"><a href="#2016年12月7日星期三" class="headerlink" title="2016年12月7日星期三"></a>2016年12月7日星期三</h3><p>1、前往武汉江汉区交警大队出差,项目部署,需求,改版方案…</p>
<h3 id="2016年12月8日星期四"><a href="#2016年12月8日星期四" class="headerlink" title="2016年12月8日星期四"></a>2016年12月8日星期四</h3><p>1、江汉区交警大队网站功能修改</p>
<p>2、<a href="https://xj8c.cc">瞎JB扯</a>文章详情页面接入百度分享并支持https、自动获取文章内容添加到关键字及描述</p>
<h3 id="2016年12月9日星期五"><a href="#2016年12月9日星期五" class="headerlink" title="2016年12月9日星期五"></a>2016年12月9日星期五</h3><p>1、Asp.Net 缓存、本地化和全球化、监控和诊断、单元测试、测试驱动开发TDD、配置与部署</p>
<p>2、将博CMS</p>
<p>3、HTTPS网站加密</p>
<p>4、CSS三栏布局</p>
<h3 id="2016年12月12日星期一"><a href="#2016年12月12日星期一" class="headerlink" title="2016年12月12日星期一"></a>2016年12月12日星期一</h3><p>1、PDF《CSS揭秘》研读</p>
<p>2、江汉区交警大队网站前台代码</p>
<h3 id="2016年12月13日星期二"><a href="#2016年12月13日星期二" class="headerlink" title="2016年12月13日星期二"></a>2016年12月13日星期二</h3><p>江汉区交警大队网站前台代码首页和新闻页面完成</p>
<h3 id="2016年12月14日星期三"><a href="#2016年12月14日星期三" class="headerlink" title="2016年12月14日星期三"></a>2016年12月14日星期三</h3><p>1、江汉区交警大队网站旧版后台代码修改</p>
<p>2、江汉区交警大队网站新版前台代码政务、服务、关于三个页面完成</p>
<h3 id="2016年12月15日星期四"><a href="#2016年12月15日星期四" class="headerlink" title="2016年12月15日星期四"></a>2016年12月15日星期四</h3><p>1、江汉区交警大队网站前台全部完成</p>
<h3 id="2016年12月16日星期五"><a href="#2016年12月16日星期五" class="headerlink" title="2016年12月16日星期五"></a>2016年12月16日星期五</h3><p>1、至科人员检测资格查询系统添加返回和打印按钮</p>
<p>2、ASP.NET Razor语法</p>
<h3 id="2016年12月19日星期一"><a href="#2016年12月19日星期一" class="headerlink" title="2016年12月19日星期一"></a>2016年12月19日星期一</h3><p>1、试验室信息管理系统修改意见、PPT</p>
<p>2、ASP.NET MVC 实例学习</p>
<h3 id="2016年12月20日星期二"><a href="#2016年12月20日星期二" class="headerlink" title="2016年12月20日星期二"></a>2016年12月20日星期二</h3><p>MVC5 &amp;&amp; EF6</p>
<h3 id="2016年12月21日星期三"><a href="#2016年12月21日星期三" class="headerlink" title="2016年12月21日星期三"></a>2016年12月21日星期三</h3><p>1、ASP.NET MVC5(7层架构) 注册、登录、注销、修改密码功能实现</p>
<p>2、Entity Framework6 Code First 相关</p>
<h3 id="2016年12月22日星期四"><a href="#2016年12月22日星期四" class="headerlink" title="2016年12月22日星期四"></a>2016年12月22日星期四</h3><p>1、Google Code Prettify 代码高亮使用</p>
<p>2、ASP.NET MVC5官方教程(中文版).pdf(看完)</p>
<p>3、深入理解Bootstrap</p>
<h3 id="2016年12月23日星期五"><a href="#2016年12月23日星期五" class="headerlink" title="2016年12月23日星期五"></a>2016年12月23日星期五</h3><p>1、Linq To SQL</p>
<p>2、NoSql、MongoDB数据库基础</p>
<h3 id="2016年12月26日星期一"><a href="#2016年12月26日星期一" class="headerlink" title="2016年12月26日星期一"></a>2016年12月26日星期一</h3><p>1、Sass CSS预处理器</p>
<p>2、Linq…</p>
<h3 id="2016年12月27日星期二"><a href="#2016年12月27日星期二" class="headerlink" title="2016年12月27日星期二"></a>2016年12月27日星期二</h3><p>1、响应式导航</p>
<p>2、麦都网站前台响应式布局解决方案</p>
<p>3、Bootstrap栅格化布局</p>
<h3 id="2016年12月28日星期三"><a href="#2016年12月28日星期三" class="headerlink" title="2016年12月28日星期三"></a>2016年12月28日星期三</h3><p>麦都网站前台首页 头部导航、轮播图、简介、讲师、课程介绍栏目</p>
<h3 id="2016年12月29日星期四"><a href="#2016年12月29日星期四" class="headerlink" title="2016年12月29日星期四"></a>2016年12月29日星期四</h3><p>麦都网站前台首页、关于我们完成</p>
<h3 id="2016年12月30日星期五"><a href="#2016年12月30日星期五" class="headerlink" title="2016年12月30日星期五"></a>2016年12月30日星期五</h3><p>麦都网站课程介绍、师资力量、考试资讯完成</p>
<h3 id="2017年1月3日星期二"><a href="#2017年1月3日星期二" class="headerlink" title="2017年1月3日星期二"></a>2017年1月3日星期二</h3><p>麦都网站前端页面(自适应PC及手机)全部完成</p>
<h3 id="2017年1月4日星期三"><a href="#2017年1月4日星期三" class="headerlink" title="2017年1月4日星期三"></a>2017年1月4日星期三</h3><p>1、麦都网站后台多层项目搭建，后台整体框架、登录模块、课程介绍</p>
<p>2、购买域名cktit.com相关</p>
<p>3、<a href="http://www.jianshu.com/p/e709942f145c" target="_blank" rel="external">2016年年终总结</a></p>
<p>4、至科人员检测资格查询系统后台二维码信息修改</p>
<h3 id="2017年1月5日星期四"><a href="#2017年1月5日星期四" class="headerlink" title="2017年1月5日星期四"></a>2017年1月5日星期四</h3><p>1、麦都网站后台课程介绍模块全部完成</p>
<p>2、URL重写实现前台伪静态化</p>
<h3 id="2017年1月6日星期五"><a href="#2017年1月6日星期五" class="headerlink" title="2017年1月6日星期五"></a>2017年1月6日星期五</h3><p>1、麦都网站前后台全部完成、发布线上测试</p>
<p>2、至科cktit.com域名接入备案</p>
<h3 id="2017年1月9日星期一"><a href="#2017年1月9日星期一" class="headerlink" title="2017年1月9日星期一"></a>2017年1月9日星期一</h3><p>1、麦都网站bug修改</p>
<p>2、网站维护</p>
<h3 id="2017年1月10日星期二"><a href="#2017年1月10日星期二" class="headerlink" title="2017年1月10日星期二"></a>2017年1月10日星期二</h3><p>1、麦都网站bug修改</p>
<p>2、江汉区交通大队第二版网站首页完成</p>
<h3 id="2017年1月11日星期三"><a href="#2017年1月11日星期三" class="headerlink" title="2017年1月11日星期三"></a>2017年1月11日星期三</h3><p>江汉区交通大队第二版网站党建、新闻、政务、大队长信箱模块完成</p>
<h3 id="2017年1月12日星期四"><a href="#2017年1月12日星期四" class="headerlink" title="2017年1月12日星期四"></a>2017年1月12日星期四</h3><p>江汉区交通大队网站后台三层框架、后台登录、签收弹窗、每日值班模块完成</p>
<h3 id="2017年1月13日星期五"><a href="#2017年1月13日星期五" class="headerlink" title="2017年1月13日星期五"></a>2017年1月13日星期五</h3><p>江汉区交通大队网站后台每日值班、签收用户增删改查登录功能完成</p>
<h3 id="2017年1月16日星期一"><a href="#2017年1月16日星期一" class="headerlink" title="2017年1月16日星期一"></a>2017年1月16日星期一</h3><p>江汉区交通大队网站用户签收通知、整合项目</p>
<h3 id="2017年1月17日星期二"><a href="#2017年1月17日星期二" class="headerlink" title="2017年1月17日星期二"></a>2017年1月17日星期二</h3><p>江汉区交通大队网站开发完成，数据填充，线上发布</p>
<h3 id="2017年1月18日星期三"><a href="#2017年1月18日星期三" class="headerlink" title="2017年1月18日星期三"></a>2017年1月18日星期三</h3><p>江汉区交通大队网站线上测试、改Bug，外出部署项目</p>
<h3 id="2017年1月19日星期四"><a href="#2017年1月19日星期四" class="headerlink" title="2017年1月19日星期四"></a>2017年1月19日星期四</h3><p>江汉区交通大队网站页面修改、IE提示</p>
<h3 id="2017年1月20日星期五"><a href="#2017年1月20日星期五" class="headerlink" title="2017年1月20日星期五"></a>2017年1月20日星期五</h3><p>前往总公司吃年饭领红包</p>
<h3 id="2017年1月21日星期六"><a href="#2017年1月21日星期六" class="headerlink" title="2017年1月21日星期六"></a>2017年1月21日星期六</h3><p>江汉区交通大队网站年前最终版本发布</p>
<h3 id="2017年1月22日星期日"><a href="#2017年1月22日星期日" class="headerlink" title="2017年1月22日星期日"></a>2017年1月22日星期日</h3><p>最后一天上班，我要回家过年了</p>
<h3 id="2017年2月6日星期一"><a href="#2017年2月6日星期一" class="headerlink" title="2017年2月6日星期一"></a>2017年2月6日星期一</h3><p>1、开年第一天上班，例会</p>
<p>2、电脑出问题，重装系统，配置开发环境</p>
<p>3、同事离职，项目交接整理</p>
<h3 id="2017年2月7日星期二"><a href="#2017年2月7日星期二" class="headerlink" title="2017年2月7日星期二"></a>2017年2月7日星期二</h3><p>自我学习，聚餐，简历更新，着手离职</p>
<h3 id="2017年2月8日星期三-请病假1天"><a href="#2017年2月8日星期三-请病假1天" class="headerlink" title="2017年2月8日星期三 - 请病假1天"></a>2017年2月8日星期三 - 请病假1天</h3><h3 id="2017年2月9日星期四"><a href="#2017年2月9日星期四" class="headerlink" title="2017年2月9日星期四"></a>2017年2月9日星期四</h3><p>原生js+css3实现下拉刷新效果</p>
<h3 id="2017年2月10日星期五"><a href="#2017年2月10日星期五" class="headerlink" title="2017年2月10日星期五"></a>2017年2月10日星期五</h3><p>提辞职申请，项目整理，第一家实习公司生涯结束</p>
<hr>
<h3 id="2017年2月27日星期一"><a href="#2017年2月27日星期一" class="headerlink" title="2017年2月27日星期一"></a>2017年2月27日星期一</h3><p>1、正式入职上海盖世网络技术有限公司</p>
<p>2、开发环境配置</p>
<p>3、页面查看更多/收起功能</p>
<h3 id="2017年2月28日星期二"><a href="#2017年2月28日星期二" class="headerlink" title="2017年2月28日星期二"></a>2017年2月28日星期二</h3><p>1、提交实现发送邮件功能</p>
<p>2、高峰论坛移动端专题 签入到SVN</p>
<p>3、jQuery与javascript代码互转示例</p>
<h3 id="2017年3月1日星期三"><a href="#2017年3月1日星期三" class="headerlink" title="2017年3月1日星期三"></a>2017年3月1日星期三</h3><p>1、原生js实现随机显示图片</p>
<p>2、WEB API</p>
<h3 id="2017年3月2日星期四"><a href="#2017年3月2日星期四" class="headerlink" title="2017年3月2日星期四"></a>2017年3月2日星期四</h3><p>1、WEB API访问数据库，json接口 √</p>
<p>2、.NET WEB API跨域方法配置 √</p>
<p>3、ajax跨域解析，随机展示图片 √</p>
<h3 id="2017年3月3日星期五"><a href="#2017年3月3日星期五" class="headerlink" title="2017年3月3日星期五"></a>2017年3月3日星期五</h3><p>1、二维码的显示与隐藏</p>
<p>2、本地加入图片随机展示</p>
<p>3、会议项目汇报，微信小程序技术分享，每周例会主题技术分享</p>
<p>4、Ueditor 上传图片等比例缩放</p>
<h3 id="2017年3月6日星期一"><a href="#2017年3月6日星期一" class="headerlink" title="2017年3月6日星期一"></a>2017年3月6日星期一</h3><p>1、资讯站头尾部链接添加</p>
<p>2、报表查询及导出</p>
<h3 id="2017年3月7日星期二"><a href="#2017年3月7日星期二" class="headerlink" title="2017年3月7日星期二"></a>2017年3月7日星期二</h3><p>1、资讯运营报表 √</p>
<p>2、Vue.js</p>
<p>3、PC版专题页</p>
<h3 id="2017年3月8日星期三"><a href="#2017年3月8日星期三" class="headerlink" title="2017年3月8日星期三"></a>2017年3月8日星期三</h3><p>1、PC版快速专题 √</p>
<p>2、li多列图片上下页功能 jQuery分页插件jPages</p>
<h3 id="2017年3月9日星期四"><a href="#2017年3月9日星期四" class="headerlink" title="2017年3月9日星期四"></a>2017年3月9日星期四</h3><p>1、PC版快速专题链接增加 √</p>
<p>2、商城项目图片处理</p>
<h3 id="2017年3月10日星期五"><a href="#2017年3月10日星期五" class="headerlink" title="2017年3月10日星期五"></a>2017年3月10日星期五</h3><p>1、PC版快速专题 上下翻页状态修复 √</p>
<p>2、商城项目图片处理、优化 √</p>
<p>3、每周例会，项目汇报/ReactJS技术分享 √</p>
<h3 id="2017年3月13日星期一"><a href="#2017年3月13日星期一" class="headerlink" title="2017年3月13日星期一"></a>2017年3月13日星期一</h3><p>1、ASP.NET MVC</p>
<p>2、UEditor编辑器图片等比例缩放功能</p>
<p>3、UEditor编辑器上传视频多终端显示</p>
<h3 id="2017年3月14日星期二"><a href="#2017年3月14日星期二" class="headerlink" title="2017年3月14日星期二"></a>2017年3月14日星期二</h3><p>1、UEditor编辑器图片等比例缩放定制功能 √</p>
<p>2、UEditor编辑器插入视频在线预览</p>
<h3 id="2017年3月15日星期三"><a href="#2017年3月15日星期三" class="headerlink" title="2017年3月15日星期三"></a>2017年3月15日星期三</h3><p>1、索喜专题企业聚焦图片轮播</p>
<p>2、文档转换(word，txt)为PDF</p>
<h3 id="2017年3月16日星期四"><a href="#2017年3月16日星期四" class="headerlink" title="2017年3月16日星期四"></a>2017年3月16日星期四</h3><p>自我学习看框架源码</p>
<h3 id="2017年3月17日星期五"><a href="#2017年3月17日星期五" class="headerlink" title="2017年3月17日星期五"></a>2017年3月17日星期五</h3><p>1、资讯站发布新闻分类默认选中功能</p>
<p>2、微信商城维护加载优化</p>
<h3 id="2017年3月20日星期一"><a href="#2017年3月20日星期一" class="headerlink" title="2017年3月20日星期一"></a>2017年3月20日星期一</h3><p>1、电脑中毒，系统重装</p>
<p>2、微信商城项目首页样式更改，热门商品全部显示</p>
<h3 id="2017年3月21日星期二"><a href="#2017年3月21日星期二" class="headerlink" title="2017年3月21日星期二"></a>2017年3月21日星期二</h3><p>1、文章关键词报表查询及导出</p>
<p>2、GasgooNewsAuto 资讯站遗漏专题页</p>
<h3 id="2017年3月22日星期三-—-2017年3月24日星期五"><a href="#2017年3月22日星期三-—-2017年3月24日星期五" class="headerlink" title="2017年3月22日星期三 — 2017年3月24日星期五"></a>2017年3月22日星期三 — 2017年3月24日星期五</h3><p>1、入职培训</p>
<p>2、DotNetFrame框架搭建</p>
<p>3、自己学习</p>
<p>4、入职培训考试 - 92</p>
<h3 id="2017年3月27日星期一-—-2017年4月1日星期六"><a href="#2017年3月27日星期一-—-2017年4月1日星期六" class="headerlink" title="2017年3月27日星期一 — 2017年4月1日星期六"></a>2017年3月27日星期一 — 2017年4月1日星期六</h3><p>1、微信商城虚拟物品交付邮件查收打开监控</p>
<p>2、微信商城虚拟物品交付下载地址点击监控</p>
<p>3、程序处理两张图片叠加在一起</p>
<p>4、资讯站采埃孚ZF技术专栏信息展示</p>
<p>5、新闻发布关键发布和定时发布为空验证检查</p>
<p>6、AC汽车项目产品开发会议，需求讲解</p>
<p>7、AC汽车项目开发计划表，4-5天，一个工作日完成</p>
<p>8、AC汽车项目数据库 Table Schema、document created</p>
<p>9、微信商城发送邮件切换至商用系统(Webpower)</p>
<p>10、Web Service 使用学习、接口调用</p>
<h3 id="2017年4月5日星期三-—-2017年4月7日星期五请假回校答辩"><a href="#2017年4月5日星期三-—-2017年4月7日星期五请假回校答辩" class="headerlink" title="2017年4月5日星期三 — 2017年4月7日星期五请假回校答辩"></a>2017年4月5日星期三 — 2017年4月7日星期五请假回校答辩</h3><h3 id="2017年4月10日星期一-—-2017年4月14日星期五"><a href="#2017年4月10日星期一-—-2017年4月14日星期五" class="headerlink" title="2017年4月10日星期一 — 2017年4月14日星期五"></a>2017年4月10日星期一 — 2017年4月14日星期五</h3><p>1、微信商城购买页调整，可在后台设置是否允许开发票，如果订单只含有不可开发票商品，”我要发票”不显示，增加前后收货地址、Email、后台收货地址修改功能，增加显示开发票的金额，购买前必须注册，如果商品为虚拟物品，详情页给出提示：”本商品为虚拟商品，一经售出，概不退换。”</p>
<p>2、AC汽车项目需求更改，数据库创建，开发准备工作</p>
<p>3、<a href="http://api.xj8c.cc/articles" target="_blank" rel="external">当然我在瞎扯</a>API接口开发</p>
<h3 id="2017年4月17日星期一-—-2017年4月23日星期天"><a href="#2017年4月17日星期一-—-2017年4月23日星期天" class="headerlink" title="2017年4月17日星期一 — 2017年4月23日星期天"></a>2017年4月17日星期一 — 2017年4月23日星期天</h3><p>1、AC汽车项目开发，我主要负责前台，由另一名同事负责后台</p>
<p>2、终端连锁、EMBA、门店托管、产业研究院、论坛活动、盈利商家、咨询、调研、专栏、作者……</p>
<p>3、19,20,21号晚上加班至9点+、22,23号周末全天加班完成全部开发工作</p>
<p>4、终端连锁：按公司名称搜索、按公司首字母筛选搜索、首次加载10条信息，点击加载更多、详情内容页面</p>
<p>5、门店托管：首次加载5条信息，点击加载更多、是否接手判断、详情内容页面</p>
<p>6、论坛活动：首次加载5条信息，点击加载更多、内容详情页面、依据开始时间结束时间判断活动状态(已开始、已结束、还剩多少天开始)</p>
<p>7、盈利商家：首次加载12条信息，点击加载更多、内容详情页面、合作状态、按类型分类搜索</p>
<p>8、商家入驻、我要联系、我要报名、我要接手、我要合作、发布项目的表单提交</p>
<p>9、调研，专栏，作者：依据现有项目进行二次修改，分类显示不同的页面，调研话题的显示、作者列表、属于作者的文章列表……</p>
<p>9、banner轮播图，上一页，下一页、新浪腾讯微博分享、微信二维码、返回顶部、全站伪静态……</p>
<p>10、耗时的功能点：json数据时间格式转换问题、时间的计算问题(临界值)、表单验证提示(SMValidator)、分类搜索功能</p>
<h3 id="2017年4月24日星期一-—-2017年4月28日星期五"><a href="#2017年4月24日星期一-—-2017年4月28日星期五" class="headerlink" title="2017年4月24日星期一 — 2017年4月28日星期五"></a>2017年4月24日星期一 — 2017年4月28日星期五</h3><p>1、AC汽车项目bug修改</p>
<p>2、WordPress数据导出、XML处理、导入数据至sqlserver</p>
<p>3、AC汽车项目第一版完成，需求更改，确定需求，五一放假之后具体实施</p>
<p>4、微信商城相关项目被打回，bug很多，功能没完成、重做重改</p>
<h3 id="2017年4月29日星期六-—-2017年5月3日星期三休假"><a href="#2017年4月29日星期六-—-2017年5月3日星期三休假" class="headerlink" title="2017年4月29日星期六 — 2017年5月3日星期三休假"></a>2017年4月29日星期六 — 2017年5月3日星期三休假</h3><h3 id="2017年5月4日星期四-—-2017年5月12日星期五"><a href="#2017年5月4日星期四-—-2017年5月12日星期五" class="headerlink" title="2017年5月4日星期四 — 2017年5月12日星期五"></a>2017年5月4日星期四 — 2017年5月12日星期五</h3><p>AC汽车项目需求变更，第二版改版</p>
<h3 id="2017年5月15日星期四-—-2017年5月19日星期五"><a href="#2017年5月15日星期四-—-2017年5月19日星期五" class="headerlink" title="2017年5月15日星期四 — 2017年5月19日星期五"></a>2017年5月15日星期四 — 2017年5月19日星期五</h3><p>1、AC bug修复、需求更改 上线</p>
<p>2、微信编辑器研究，demo</p>
<p>3、自我学习</p>
<h3 id="2017年5月22日星期一-—-2017年5月27日星期六"><a href="#2017年5月22日星期一-—-2017年5月27日星期六" class="headerlink" title="2017年5月22日星期一 — 2017年5月27日星期六"></a>2017年5月22日星期一 — 2017年5月27日星期六</h3><p>1、仿活动行表单自定义设计器-简版</p>
<p>2、AC项目遗漏问题解决</p>
<p>3、服务器折腾、Hexo+Github折腾</p>
<h3 id="2017年5月31日星期三-—-2017年6月2日星五"><a href="#2017年5月31日星期三-—-2017年6月2日星五" class="headerlink" title="2017年5月31日星期三 — 2017年6月2日星五"></a>2017年5月31日星期三 — 2017年6月2日星五</h3><p>1、动态表单研究</p>
<p>2、微信编辑器修改出版</p>
<p>3、AC项目需求更改，写业务代码</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2016年4月18日星期一&quot;&gt;&lt;a href=&quot;#2016年4月18日星期一&quot; class=&quot;headerlink&quot; title=&quot;2016年4月18日星期一&quot;&gt;&lt;/a&gt;2016年4月18日星期一&lt;/h3&gt;&lt;p&gt;1、第一天上班，配置电脑，熟悉环境&lt;/p&gt;
&lt;p&gt;2、登录系统练习&lt;/p&gt;
&lt;h3 id=&quot;2016年4月19日星期二&quot;&gt;&lt;a href=&quot;#2016年4月19日星期二&quot; class=&quot;headerlink&quot; title=&quot;2016年4月19日星期二&quot;&gt;&lt;/a&gt;2016年4月19日星期二&lt;/h3&gt;&lt;p&gt;1、登陆系统练习&lt;/p&gt;
&lt;p&gt;2、在线观看至科实验室信息管理系统&lt;/p&gt;
&lt;h3 id=&quot;2016年4月20日星期三&quot;&gt;&lt;a href=&quot;#2016年4月20日星期三&quot; class=&quot;headerlink&quot; title=&quot;2016年4月20日星期三&quot;&gt;&lt;/a&gt;2016年4月20日星期三&lt;/h3&gt;&lt;p&gt;1、继续观看信息系统，并写观后感&lt;/p&gt;
&lt;p&gt;2、仿淘宝图片大图显示js代码特效&lt;/p&gt;
&lt;p&gt;3、图片上传之前本地预览功能&lt;/p&gt;
    
    </summary>
    
    
      <category term="实习" scheme="http://xj8c.cc/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>毕业答辩汇报材料</title>
    <link href="http://xj8c.cc/2017/03/30/graduation-report-material/"/>
    <id>http://xj8c.cc/2017/03/30/graduation-report-material/</id>
    <published>2017-03-30T04:47:00.000Z</published>
    <updated>2017-05-26T07:48:34.603Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-实习公司："><a href="#1-实习公司：" class="headerlink" title="1.实习公司："></a>1.实习公司：</h2><p>　① 武汉路博特工程科技有限公司 — 2016.4.18 — 2017.2.10</p>
<p>　② 上海盖世网络技术有限公司 — 2017.2.27 — 至今</p>
<h2 id="2-公司简介："><a href="#2-公司简介：" class="headerlink" title="2.公司简介："></a>2.公司简介：</h2><p>　① 武汉路博特工程科技有限公司是一家专注于海量信息处理的专业技术服务公司，致力于将先进信息技术和管理手段应用到工程管理、企业管理、政务及商务管理中，为各行业用户提供系统集成软件和IT服务，能为企事业单位提供系统的管理软件产品和软、硬件整体解决方案，能提供专业开发系统、产品并含有特殊复杂算法需求的专业软件…</p>
<p>　② 上海盖世网络技术有限公司是一家全球领先的汽车产业综合服务提供商，致力于促进全球汽车供应链的有序良性健康发展，帮助中国企业提升竞争力，进入国际舞台；促进中国汽车供应链的产业升级，从加工制造到智能智造。通过盖世在汽车行业的与业理解、产业深度和整合资源的能力，为企业发展提供一站式服务。<br><a id="more"></a></p>
<h2 id="3-项目："><a href="#3-项目：" class="headerlink" title="3.项目："></a>3.项目：</h2><p>　武汉东方建设集团有限公司(whdfjs.com)</p>
<p>　武汉东方建设集团建筑设计院(dfjssj.com)</p>
<p>　武汉至科检测技术有限公司(zktit.com)</p>
<p>　武汉路博特工程科技有限公司(lubok.cn)</p>
<p>　武汉市江汉区交通大队公安局(公安专线,外网无法访问)</p>
<p>　武汉优仕德教育发展有限公司(61.183.201.164:85)</p>
<p>　武汉麦都教育咨询有限公司(61.183.201.164:86)</p>
<p>　武汉至科检测技术有限公司检测人员资格查询系统(61.183.201.164:83)</p>
<p>　至科试验室信息管理系统(61.183.201.164:82)</p>
<p>　程序员版2048、当然我在瞎扯(Android App)</p>
<h2 id="4-收获："><a href="#4-收获：" class="headerlink" title="4.收获："></a>4.收获：</h2><p>　C#高级编程知识(IO操作、设计模式、委托、多线程、反射…)</p>
<p>　数据库开发(存储过程、触发器、视图、离线数据集、数据安全…)</p>
<p>　DotNet(Lucence.Net、Log4Net、Dapper、页面静态化、高效缓存、URL重写、RSS、无刷新上传、微信页面开发、微信手机商城、WebApi、Asp.Net MVC、EF、Nuget…)</p>
<p>　前端(H5+CSS3、Http协议、JavaScript、jQuery、Vue.js、Node.js、Npm、网站部署、web调优…)</p>
<p>　版本管理工具(Git、SVN、GitHub)</p>
<h2 id="5-遇到的问题："><a href="#5-遇到的问题：" class="headerlink" title="5.遇到的问题："></a>5.遇到的问题：</h2><p>　举例1：个性化Ueditor(百度编辑器)</p>
<p>　修改外观皮肤、定制组件、插入视频实现预览功能、上传图片实现自动存入CDN域名、上传图片实现等比例缩放。</p>
<p>　举例2：Web端上传文件转换PDF功能</p>
<p>　用户上传的文件有：txt、Word、Excel、PPT、图片、PDF。自动转换用户上传的文件为PDF(难点)，在后台管理中进行审核(通过与不通过)，进而在前台显示转换的PDF内容。</p>
<h2 id="6-打算："><a href="#6-打算：" class="headerlink" title="6.打算："></a>6.打算：</h2><p>　顺利毕业，早日拿到毕业证和公司申请转正，完成每日工作内容的同时不断学习不断进步。作为一名软件开发人员，应该时刻关注互联网的新技术、新产品、新方向。现如今主要是学好技术，提升自己的能力，为公司工作的同时充实自己。接下来准备学习项目架构方面的知识，接触ASP.NET CORE，慢慢向云计算、大数据方面发展。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-实习公司：&quot;&gt;&lt;a href=&quot;#1-实习公司：&quot; class=&quot;headerlink&quot; title=&quot;1.实习公司：&quot;&gt;&lt;/a&gt;1.实习公司：&lt;/h2&gt;&lt;p&gt;　① 武汉路博特工程科技有限公司 — 2016.4.18 — 2017.2.10&lt;/p&gt;
&lt;p&gt;　② 上海盖世网络技术有限公司 — 2017.2.27 — 至今&lt;/p&gt;
&lt;h2 id=&quot;2-公司简介：&quot;&gt;&lt;a href=&quot;#2-公司简介：&quot; class=&quot;headerlink&quot; title=&quot;2.公司简介：&quot;&gt;&lt;/a&gt;2.公司简介：&lt;/h2&gt;&lt;p&gt;　① 武汉路博特工程科技有限公司是一家专注于海量信息处理的专业技术服务公司，致力于将先进信息技术和管理手段应用到工程管理、企业管理、政务及商务管理中，为各行业用户提供系统集成软件和IT服务，能为企事业单位提供系统的管理软件产品和软、硬件整体解决方案，能提供专业开发系统、产品并含有特殊复杂算法需求的专业软件…&lt;/p&gt;
&lt;p&gt;　② 上海盖世网络技术有限公司是一家全球领先的汽车产业综合服务提供商，致力于促进全球汽车供应链的有序良性健康发展，帮助中国企业提升竞争力，进入国际舞台；促进中国汽车供应链的产业升级，从加工制造到智能智造。通过盖世在汽车行业的与业理解、产业深度和整合资源的能力，为企业发展提供一站式服务。&lt;br&gt;
    
    </summary>
    
    
      <category term="毕业答辩" scheme="http://xj8c.cc/tags/%E6%AF%95%E4%B8%9A%E7%AD%94%E8%BE%A9/"/>
    
  </entry>
  
  <entry>
    <title>2016年终总结</title>
    <link href="http://xj8c.cc/2017/01/04/2016-year-end-summary/"/>
    <id>http://xj8c.cc/2017/01/04/2016-year-end-summary/</id>
    <published>2017-01-04T01:59:56.000Z</published>
    <updated>2017-05-26T07:48:39.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、工作总结"><a href="#一、工作总结" class="headerlink" title="一、工作总结"></a>一、工作总结</h2><p>2016年对我来说意义非凡，结束掉学生生涯正式步入职场，进入“路博特”，开始我的编码生活。这一年不仅学到了更多的专业知识同时也长了不少见识。从入职到现在已有八个多月的时间，在公司担任.Net研发一职。<br><a id="more"></a></p>
<h3 id="总的来说2016年实现了个人的预期目标，以下是2016年预期目标一览。"><a href="#总的来说2016年实现了个人的预期目标，以下是2016年预期目标一览。" class="headerlink" title="总的来说2016年实现了个人的预期目标，以下是2016年预期目标一览。"></a>总的来说2016年实现了个人的预期目标，以下是2016年预期目标一览。</h3><p>1.2016年4月18日入职“武汉路博特工程科技有限公司”</p>
<p>2.2016年6月熟练掌握三层架构开发网站</p>
<p>3.2016年9月ASP.NET MVC学习并入门</p>
<p>4.2016年10月25日结束驾考生涯，驾驶证到手</p>
<p>5.2016年11月可利用Entity Framework开发简单网站</p>
<p>6.2016年12月对前端有了新的认识可开发自适应PC和手机屏幕的网页</p>
<p>下面重点总结在公司开发过的网站以及参与过的项目。刚进公司主要是熟悉环境，了解行情，快速进行学习，适应公司的发展需要。最开始参与了一个教育局报名管理系统，负责了其部分JS特效及一些后台功能的实现。然后客串测试直至项目顺利上线。在这个小小的项目中，体会到了团队协同、效率、编码能力、测试等的至关重要。</p>
<p>由于个人前端能力突出，紧接着便被安排编写设计院网站，在完成前端所有页面之后协同开发后台在短短不到一周的时间完成该项目。但是遗留下的问题却有很多，因为经验不足导致Bug众多。深深体会到维护一个项目远远比开发一个项目要难得多。从这个项目过渡，接下来的时间开发了至科网站、集团网站、路博特网站、至科检测人员资格查询系统前台、优仕德项目网站、江汉区交警大队网站、麦都教育网站等等公司一系列有关前台的页面。并且主导了域名的注册、备案、上线以及后期的维护工作。</p>
<p>以上便是我2016入职以来的工作总结。</p>
<h2 id="二、自我评价"><a href="#二、自我评价" class="headerlink" title="二、自我评价"></a>二、自我评价</h2><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><p>1.环境适应能力强，能够很快适应新的工作环境</p>
<p>2.具备团队合作意识，善于协调团队分工合作</p>
<p>3.能够虚心接受他人的意见与建议，对符合的予以采纳</p>
<p>4.各方面的知识都有涉猎，学习能力较快，接受新事物能力强</p>
<p>5.能够在最短时间内完成Leader下发的任务，并自由合理分配时间</p>
<p>6.在编程开发过程中，对项目有自己的见解以及问题解决方案</p>
<h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><p>1.后半年积极度不高，比较懒散</p>
<p>2.涉猎知识较多，但是都不精通</p>
<p>3.个人能力和团队能力有限，不能更加完美的解决现有项目问题</p>
<p>4.情绪化比较严重，不能合理控制自己的心情</p>
<h3 id="对自己的要求："><a href="#对自己的要求：" class="headerlink" title="对自己的要求："></a>对自己的要求：</h3><p>1.合理控制自己的时间</p>
<p>2.在现有项目的基础上，完善不足之处</p>
<p>3.学而知不足，专一研究DotNet技术，由此进行发散学习</p>
<h2 id="三、建议意见"><a href="#三、建议意见" class="headerlink" title="三、建议意见"></a>三、建议意见</h2><p>1.员工归属感需增强，实行奖惩制度，提高福利待遇</p>
<p>2.希望公司可以大幅度提供住宿，家较远的员工可以给予公交补贴</p>
<p>3.技术方面，向框架式开发渐进，框架开发速度快，效率高。急需一套属于公司内部的网站开发框架。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、工作总结&quot;&gt;&lt;a href=&quot;#一、工作总结&quot; class=&quot;headerlink&quot; title=&quot;一、工作总结&quot;&gt;&lt;/a&gt;一、工作总结&lt;/h2&gt;&lt;p&gt;2016年对我来说意义非凡，结束掉学生生涯正式步入职场，进入“路博特”，开始我的编码生活。这一年不仅学到了更多的专业知识同时也长了不少见识。从入职到现在已有八个多月的时间，在公司担任.Net研发一职。&lt;br&gt;
    
    </summary>
    
    
      <category term="年终总结" scheme="http://xj8c.cc/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C＃7.0中有哪些新特性？</title>
    <link href="http://xj8c.cc/2016/08/31/csharp7/"/>
    <id>http://xj8c.cc/2016/08/31/csharp7/</id>
    <published>2016-08-31T02:19:57.000Z</published>
    <updated>2017-05-26T06:29:50.340Z</updated>
    
    <content type="html"><![CDATA[<h3 id="以下将是-C-7-0-中所有计划的语言特性的描述。随着-Visual-Studio-“15”-Preview-4-版本的发布，这些特性中的大部分将活跃起来。现在是时候来展示这些特性，你也告诉借此告诉我们你的想法！"><a href="#以下将是-C-7-0-中所有计划的语言特性的描述。随着-Visual-Studio-“15”-Preview-4-版本的发布，这些特性中的大部分将活跃起来。现在是时候来展示这些特性，你也告诉借此告诉我们你的想法！" class="headerlink" title="以下将是 C# 7.0 中所有计划的语言特性的描述。随着 Visual Studio “15” Preview 4 版本的发布，这些特性中的大部分将活跃起来。现在是时候来展示这些特性，你也告诉借此告诉我们你的想法！"></a>以下将是 C# 7.0 中所有计划的语言特性的描述。随着 Visual Studio “15” Preview 4 版本的发布，这些特性中的大部分将活跃起来。现在是时候来展示这些特性，你也告诉借此告诉我们你的想法！</h3><h3 id="C＃7-0-增加了许多新功能，并专注于数据消费，简化代码和性能的改善。或许最大的特性就是元祖和模式匹配，元祖可以很容易地拥有多个返回结果，而模型匹配可以根据数据的“形”的不同来简化代码。我们希望，将它们结合起来，从而使你的代码更加简洁高效，也可以使你更加快乐并富有成效。"><a href="#C＃7-0-增加了许多新功能，并专注于数据消费，简化代码和性能的改善。或许最大的特性就是元祖和模式匹配，元祖可以很容易地拥有多个返回结果，而模型匹配可以根据数据的“形”的不同来简化代码。我们希望，将它们结合起来，从而使你的代码更加简洁高效，也可以使你更加快乐并富有成效。" class="headerlink" title="C＃7.0 增加了许多新功能，并专注于数据消费，简化代码和性能的改善。或许最大的特性就是元祖和模式匹配，元祖可以很容易地拥有多个返回结果，而模型匹配可以根据数据的“形”的不同来简化代码。我们希望，将它们结合起来，从而使你的代码更加简洁高效，也可以使你更加快乐并富有成效。"></a>C＃7.0 增加了许多新功能，并专注于数据消费，简化代码和性能的改善。或许最大的特性就是元祖和模式匹配，元祖可以很容易地拥有多个返回结果，而模型匹配可以根据数据的“形”的不同来简化代码。我们希望，将它们结合起来，从而使你的代码更加简洁高效，也可以使你更加快乐并富有成效。</h3><h3 id="请点击-Visual-Studio-窗口顶部的反馈按钮，告诉我们哪些是你不期待的特性或者你关于提升这些特性的思考。还有许多功能没有在-Preview-4-版本中实现。接下来我会描述一些我们发布的最终版本里将会起作用的特性，和一些一旦不起作用机即会删除掉的特性。我也是支持对这些计划作出改变，尤其是作为我们从你那儿得到反馈的结果。当最终版本发布时，这些特性中的一些将会改变或者删除。"><a href="#请点击-Visual-Studio-窗口顶部的反馈按钮，告诉我们哪些是你不期待的特性或者你关于提升这些特性的思考。还有许多功能没有在-Preview-4-版本中实现。接下来我会描述一些我们发布的最终版本里将会起作用的特性，和一些一旦不起作用机即会删除掉的特性。我也是支持对这些计划作出改变，尤其是作为我们从你那儿得到反馈的结果。当最终版本发布时，这些特性中的一些将会改变或者删除。" class="headerlink" title="请点击 Visual Studio 窗口顶部的反馈按钮，告诉我们哪些是你不期待的特性或者你关于提升这些特性的思考。还有许多功能没有在 Preview 4 版本中实现。接下来我会描述一些我们发布的最终版本里将会起作用的特性，和一些一旦不起作用机即会删除掉的特性。我也是支持对这些计划作出改变，尤其是作为我们从你那儿得到反馈的结果。当最终版本发布时，这些特性中的一些将会改变或者删除。"></a>请点击 Visual Studio 窗口顶部的反馈按钮，告诉我们哪些是你不期待的特性或者你关于提升这些特性的思考。还有许多功能没有在 Preview 4 版本中实现。接下来我会描述一些我们发布的最终版本里将会起作用的特性，和一些一旦不起作用机即会删除掉的特性。我也是支持对这些计划作出改变，尤其是作为我们从你那儿得到反馈的结果。当最终版本发布时，这些特性中的一些将会改变或者删除。</h3><a id="more"></a>
<h3 id="如果你好奇这些特性的设计过程，你可以在-Roslyn-GitHub-site-上找到很多设计笔记和讨论。"><a href="#如果你好奇这些特性的设计过程，你可以在-Roslyn-GitHub-site-上找到很多设计笔记和讨论。" class="headerlink" title="如果你好奇这些特性的设计过程，你可以在 Roslyn GitHub site 上找到很多设计笔记和讨论。"></a>如果你好奇这些特性的设计过程，你可以在 Roslyn GitHub site 上找到很多设计笔记和讨论。</h3><h3 id="希望-C＃7-0-能带给你快乐！"><a href="#希望-C＃7-0-能带给你快乐！" class="headerlink" title="希望 C＃7.0 能带给你快乐！"></a>希望 C＃7.0 能带给你快乐！</h3><h2 id="输出变量"><a href="#输出变量" class="headerlink" title="输出变量"></a>输出变量</h2><h3 id="在当前的-C＃-中，使用输出参数并不像我们想的那样方便。在你调用一个无输出参数的方法之前，首先必须声明一个变量并传递给它。如果你没有初始化这些变量，你就无法使用-var-来声明它们，除非先指定完整的类型："><a href="#在当前的-C＃-中，使用输出参数并不像我们想的那样方便。在你调用一个无输出参数的方法之前，首先必须声明一个变量并传递给它。如果你没有初始化这些变量，你就无法使用-var-来声明它们，除非先指定完整的类型：" class="headerlink" title="在当前的 C＃ 中，使用输出参数并不像我们想的那样方便。在你调用一个无输出参数的方法之前，首先必须声明一个变量并传递给它。如果你没有初始化这些变量，你就无法使用 var 来声明它们，除非先指定完整的类型："></a>在当前的 C＃ 中，使用输出参数并不像我们想的那样方便。在你调用一个无输出参数的方法之前，首先必须声明一个变量并传递给它。如果你没有初始化这些变量，你就无法使用 var 来声明它们，除非先指定完整的类型：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public void PrintCoordinates(Point p)</div><div class="line">&#123;    int x, y; // have to &quot;predeclare&quot;</div><div class="line">    p.GetCoordinates(out x, out y);</div><div class="line">    WriteLine($&quot;(&#123;x&#125;, &#123;y&#125;)&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在-C＃7-0-中，我们正在增加输出变量和声明一个作为能够被传递的输出实参的变量的能力："><a href="#在-C＃7-0-中，我们正在增加输出变量和声明一个作为能够被传递的输出实参的变量的能力：" class="headerlink" title="在 C＃7.0 中，我们正在增加输出变量和声明一个作为能够被传递的输出实参的变量的能力："></a>在 C＃7.0 中，我们正在增加输出变量和声明一个作为能够被传递的输出实参的变量的能力：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public void PrintCoordinates(Point p)</div><div class="line">&#123;</div><div class="line">    p.GetCoordinates(out int x, out int y);</div><div class="line">    WriteLine($&quot;(&#123;x&#125;, &#123;y&#125;)&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="注意，变量是在封闭块的范围内，所以后续也可以使用它们。大多数类型的声明不建立自己的范围，因此在他们中声明的变量通常会被引入到封闭范围。"><a href="#注意，变量是在封闭块的范围内，所以后续也可以使用它们。大多数类型的声明不建立自己的范围，因此在他们中声明的变量通常会被引入到封闭范围。" class="headerlink" title="注意，变量是在封闭块的范围内，所以后续也可以使用它们。大多数类型的声明不建立自己的范围，因此在他们中声明的变量通常会被引入到封闭范围。"></a>注意，变量是在封闭块的范围内，所以后续也可以使用它们。大多数类型的声明不建立自己的范围，因此在他们中声明的变量通常会被引入到封闭范围。</h3><h3 id="Note：在-Preview-4-中，适用范围规则更为严格：输出变量的作用域是声明它们的语句，因此直到下个版本发布时，上面的示例才会起作用。"><a href="#Note：在-Preview-4-中，适用范围规则更为严格：输出变量的作用域是声明它们的语句，因此直到下个版本发布时，上面的示例才会起作用。" class="headerlink" title="Note：在 Preview 4 中，适用范围规则更为严格：输出变量的作用域是声明它们的语句，因此直到下个版本发布时，上面的示例才会起作用。"></a>Note：在 Preview 4 中，适用范围规则更为严格：输出变量的作用域是声明它们的语句，因此直到下个版本发布时，上面的示例才会起作用。</h3><h3 id="由于输出变量直接被声明为实参传递给输出形参，编译器通常会告诉他们应该是的类型（除非有冲突过载），所以使用-var-来代替声明它们的方式是比较好的："><a href="#由于输出变量直接被声明为实参传递给输出形参，编译器通常会告诉他们应该是的类型（除非有冲突过载），所以使用-var-来代替声明它们的方式是比较好的：" class="headerlink" title="由于输出变量直接被声明为实参传递给输出形参，编译器通常会告诉他们应该是的类型（除非有冲突过载），所以使用 var 来代替声明它们的方式是比较好的："></a>由于输出变量直接被声明为实参传递给输出形参，编译器通常会告诉他们应该是的类型（除非有冲突过载），所以使用 var 来代替声明它们的方式是比较好的：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p.GetCoordinates(out var x, out var y);</div></pre></td></tr></table></figure>
<h3 id="输出参数的一种常见用法是Try模式，其中一个布尔返回值表示成功，输出参数就会携带所获的结果："><a href="#输出参数的一种常见用法是Try模式，其中一个布尔返回值表示成功，输出参数就会携带所获的结果：" class="headerlink" title="输出参数的一种常见用法是Try模式，其中一个布尔返回值表示成功，输出参数就会携带所获的结果："></a>输出参数的一种常见用法是Try模式，其中一个布尔返回值表示成功，输出参数就会携带所获的结果：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public void PrintStars(string s)</div><div class="line">&#123;  </div><div class="line"> if (int.TryParse(s, out var i))</div><div class="line">&#123;</div><div class="line">WriteLine(new string(&apos;*&apos;, i));</div><div class="line">&#125;  </div><div class="line"> else</div><div class="line">&#123;</div><div class="line">WriteLine(&quot;Cloudy - no stars tonight!&quot;);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="注意：这里i只用在-if-语句来定义它，所以-Preview-4-可以将这个处理的很好。"><a href="#注意：这里i只用在-if-语句来定义它，所以-Preview-4-可以将这个处理的很好。" class="headerlink" title="注意：这里i只用在 if 语句来定义它，所以 Preview 4 可以将这个处理的很好。"></a>注意：这里i只用在 if 语句来定义它，所以 Preview 4 可以将这个处理的很好。</h3><h3 id="我们计划允许以-a-为形式的“通配符”作为输出参数，这会让你忽略了你不关心参数："><a href="#我们计划允许以-a-为形式的“通配符”作为输出参数，这会让你忽略了你不关心参数：" class="headerlink" title="我们计划允许以 a* 为形式的“通配符”作为输出参数，这会让你忽略了你不关心参数："></a>我们计划允许以 a* 为形式的“通配符”作为输出参数，这会让你忽略了你不关心参数：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p.GetCoordinates(out int x, out *); // I only care about x</div></pre></td></tr></table></figure>
<h3 id="Note：在-C-7-0-中是否会包含通配符还不确定。"><a href="#Note：在-C-7-0-中是否会包含通配符还不确定。" class="headerlink" title="Note：在 C#7.0 中是否会包含通配符还不确定。"></a>Note：在 C#7.0 中是否会包含通配符还不确定。</h3><h2 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h2><h3 id="C＃-7-0-引入了模式概念。抽象地讲，模式是句法元素，能用来测试一个数据是否具有某种“形”，并在被应用时，从值中提取有效信息。"><a href="#C＃-7-0-引入了模式概念。抽象地讲，模式是句法元素，能用来测试一个数据是否具有某种“形”，并在被应用时，从值中提取有效信息。" class="headerlink" title="C＃ 7.0 引入了模式概念。抽象地讲，模式是句法元素，能用来测试一个数据是否具有某种“形”，并在被应用时，从值中提取有效信息。"></a>C＃ 7.0 引入了模式概念。抽象地讲，模式是句法元素，能用来测试一个数据是否具有某种“形”，并在被应用时，从值中提取有效信息。</h3><h3 id="C＃7-0-中的模式示例："><a href="#C＃7-0-中的模式示例：" class="headerlink" title="C＃7.0 中的模式示例："></a>C＃7.0 中的模式示例：</h3><ul>
<li>C 形式的常量模式（C是C#中的常量表达式），可以测试输入是否等于C</li>
<li>T X 形式的类型模式（T是一种类型、X是一个标识符），可以测试输入是否是T类型，如果是，会将输入值提取成T类型的新变量X</li>
<li>Var x 形式的 Var 模式（x是一个标识符），它总是匹配的，并简单地将输入值以它原本的类型存入一个新变量X中。</li>
</ul>
<h3 id="这仅仅是个开始-模式是一种新型的-C＃-中的语言元素。未来，我们希望增加更多的模式到-C-中。"><a href="#这仅仅是个开始-模式是一种新型的-C＃-中的语言元素。未来，我们希望增加更多的模式到-C-中。" class="headerlink" title="这仅仅是个开始 - 模式是一种新型的 C＃ 中的语言元素。未来，我们希望增加更多的模式到 C# 中。"></a>这仅仅是个开始 - 模式是一种新型的 C＃ 中的语言元素。未来，我们希望增加更多的模式到 C# 中。</h3><h3 id="在-C＃7-0，我们正在加强两个现有的具有模式的语言结构："><a href="#在-C＃7-0，我们正在加强两个现有的具有模式的语言结构：" class="headerlink" title="在 C＃7.0，我们正在加强两个现有的具有模式的语言结构："></a>在 C＃7.0，我们正在加强两个现有的具有模式的语言结构：</h3><ul>
<li>is 表达式现在具有一种右手侧的模式，而不仅仅是一种类型</li>
<li>switch 语句中的 case 语句现在可以使用匹配模式，不只是常数值在 C＃的未来版本中，我们可能会增加更多的被用到的模式。</li>
</ul>
<h3 id="具有模式的-IS-表达式"><a href="#具有模式的-IS-表达式" class="headerlink" title="具有模式的 IS 表达式"></a>具有模式的 IS 表达式</h3><h3 id="下面是使用-is-表达式的示例，其中利用了常量模式和类型模式："><a href="#下面是使用-is-表达式的示例，其中利用了常量模式和类型模式：" class="headerlink" title="下面是使用 is 表达式的示例，其中利用了常量模式和类型模式："></a>下面是使用 is 表达式的示例，其中利用了常量模式和类型模式：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public void PrintStars(object o)</div><div class="line">&#123;    if (o is null)</div><div class="line">return;     // constant pattern &quot;null&quot;</div><div class="line">    if (!(o is int i))</div><div class="line">return; // type pattern &quot;int i&quot;</div><div class="line">    WriteLine(new string(&apos;*&apos;, i));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="正如你们看到，模式变量（模式引入的变量）和早前描述的输出变量比较类似，它们可以在表达式中间声明，并在最近的范围内使用。就像输出变量一样，模式变量是可变的。"><a href="#正如你们看到，模式变量（模式引入的变量）和早前描述的输出变量比较类似，它们可以在表达式中间声明，并在最近的范围内使用。就像输出变量一样，模式变量是可变的。" class="headerlink" title="正如你们看到，模式变量（模式引入的变量）和早前描述的输出变量比较类似，它们可以在表达式中间声明，并在最近的范围内使用。就像输出变量一样，模式变量是可变的。"></a>正如你们看到，模式变量（模式引入的变量）和早前描述的输出变量比较类似，它们可以在表达式中间声明，并在最近的范围内使用。就像输出变量一样，模式变量是可变的。</h3><h3 id="注：就像输出变量一样，严格范围规则适用于Preview-4。"><a href="#注：就像输出变量一样，严格范围规则适用于Preview-4。" class="headerlink" title="注：就像输出变量一样，严格范围规则适用于Preview 4。"></a>注：就像输出变量一样，严格范围规则适用于Preview 4。</h3><h3 id="模式和-Try方法可以很好地协同："><a href="#模式和-Try方法可以很好地协同：" class="headerlink" title="模式和 Try方法可以很好地协同："></a>模式和 Try方法可以很好地协同：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if (o is int i || (o is string s &amp;&amp; int.TryParse(s, out i)) &#123; /* use i */ &#125;</div></pre></td></tr></table></figure>
<h2 id="具有模式的-Switch-语句"><a href="#具有模式的-Switch-语句" class="headerlink" title="具有模式的 Switch 语句"></a>具有模式的 Switch 语句</h2><h3 id="我们正在归纳-Switch-语句："><a href="#我们正在归纳-Switch-语句：" class="headerlink" title="我们正在归纳 Switch 语句："></a>我们正在归纳 Switch 语句：</h3><h3 id="可以设定任何类型的-Switch-语句（不只是原始类型）"><a href="#可以设定任何类型的-Switch-语句（不只是原始类型）" class="headerlink" title="可以设定任何类型的 Switch 语句（不只是原始类型）"></a>可以设定任何类型的 Switch 语句（不只是原始类型）</h3><h3 id="模式可以用在-case-语句中"><a href="#模式可以用在-case-语句中" class="headerlink" title="模式可以用在 case 语句中"></a>模式可以用在 case 语句中</h3><h3 id="Case-语句可以有特殊的条件"><a href="#Case-语句可以有特殊的条件" class="headerlink" title="Case 语句可以有特殊的条件"></a>Case 语句可以有特殊的条件</h3><h3 id="下面是一个简单的例子："><a href="#下面是一个简单的例子：" class="headerlink" title="下面是一个简单的例子："></a>下面是一个简单的例子：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">switch(shape)</div><div class="line">&#123;    case Circle c:</div><div class="line">              WriteLine($&quot;circle with radius &#123;c.Radius&#125;&quot;);    </div><div class="line">   break;  </div><div class="line"> case Rectangle s when (s.Length == s.Height):</div><div class="line">               WriteLine($&quot;&#123;s.Length&#125; x &#123;s.Height&#125; square&quot;);        </div><div class="line">break;    </div><div class="line">case Rectangle r:</div><div class="line">                WriteLine($&quot;&#123;r.Length&#125; x &#123;r.Height&#125; rectangle&quot;);  </div><div class="line">     break;  </div><div class="line"> default:</div><div class="line">        WriteLine(&quot;&lt;unknown shape&gt;&quot;);      </div><div class="line"> break;</div><div class="line"> case null:    </div><div class="line">   throw new ArgumentNullException(nameof(shape));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="关于新扩展的-switch-语句，有几点需要注意："><a href="#关于新扩展的-switch-语句，有几点需要注意：" class="headerlink" title="关于新扩展的 switch 语句，有几点需要注意："></a>关于新扩展的 switch 语句，有几点需要注意：</h3><h3 id="Case-语句的顺序现在变得重要：就像-catch-语句一样，case-语句的范围现在可以相交，第一个匹配上的会被选中。此外，就像-catch-语句一样，编译器通过去除明显不会进入的-case-来帮助你。在此之前，你甚至不需要告诉判断的顺序，所以这并不是一个使用-case-语句的巨大的改变。"><a href="#Case-语句的顺序现在变得重要：就像-catch-语句一样，case-语句的范围现在可以相交，第一个匹配上的会被选中。此外，就像-catch-语句一样，编译器通过去除明显不会进入的-case-来帮助你。在此之前，你甚至不需要告诉判断的顺序，所以这并不是一个使用-case-语句的巨大的改变。" class="headerlink" title="Case 语句的顺序现在变得重要：就像 catch 语句一样，case 语句的范围现在可以相交，第一个匹配上的会被选中。此外，就像 catch 语句一样，编译器通过去除明显不会进入的 case 来帮助你。在此之前，你甚至不需要告诉判断的顺序，所以这并不是一个使用 case 语句的巨大的改变。"></a>Case 语句的顺序现在变得重要：就像 catch 语句一样，case 语句的范围现在可以相交，第一个匹配上的会被选中。此外，就像 catch 语句一样，编译器通过去除明显不会进入的 case 来帮助你。在此之前，你甚至不需要告诉判断的顺序，所以这并不是一个使用 case 语句的巨大的改变。</h3><h3 id="默认的语句还是最后被判断：尽管-null-的-case-语句在最后语句之前出现，它也会在默认语句被选中之前被测试。这是与现有-Switch-语义兼容的。然而，好的做法通常会将默认语句放到最后。"><a href="#默认的语句还是最后被判断：尽管-null-的-case-语句在最后语句之前出现，它也会在默认语句被选中之前被测试。这是与现有-Switch-语义兼容的。然而，好的做法通常会将默认语句放到最后。" class="headerlink" title="默认的语句还是最后被判断：尽管 null 的 case 语句在最后语句之前出现，它也会在默认语句被选中之前被测试。这是与现有 Switch 语义兼容的。然而，好的做法通常会将默认语句放到最后。"></a>默认的语句还是最后被判断：尽管 null 的 case 语句在最后语句之前出现，它也会在默认语句被选中之前被测试。这是与现有 Switch 语义兼容的。然而，好的做法通常会将默认语句放到最后。</h3><h3 id="Switch-不会到最后的-null-语句：这是因为当前-IS-表达式的例子具有类型匹配，不会匹配到-null。这保证了空值不会不小心被任何的类型模式匹配上的情况-你必须更明确如何处理它们（或放弃它而使用默认语句）。"><a href="#Switch-不会到最后的-null-语句：这是因为当前-IS-表达式的例子具有类型匹配，不会匹配到-null。这保证了空值不会不小心被任何的类型模式匹配上的情况-你必须更明确如何处理它们（或放弃它而使用默认语句）。" class="headerlink" title="Switch 不会到最后的 null 语句：这是因为当前 IS 表达式的例子具有类型匹配，不会匹配到 null。这保证了空值不会不小心被任何的类型模式匹配上的情况;你必须更明确如何处理它们（或放弃它而使用默认语句）。"></a>Switch 不会到最后的 null 语句：这是因为当前 IS 表达式的例子具有类型匹配，不会匹配到 null。这保证了空值不会不小心被任何的类型模式匹配上的情况;你必须更明确如何处理它们（或放弃它而使用默认语句）。</h3><h3 id="通过一个-case-引入模式变量-标签仅在相应的-Switch-范围内。"><a href="#通过一个-case-引入模式变量-标签仅在相应的-Switch-范围内。" class="headerlink" title="通过一个 case 引入模式变量:标签仅在相应的 Switch 范围内。"></a>通过一个 case 引入模式变量:标签仅在相应的 Switch 范围内。</h3><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><h3 id="这是一个从方法中返回多个值的常见模式。目前可选用的选项并非是最佳的："><a href="#这是一个从方法中返回多个值的常见模式。目前可选用的选项并非是最佳的：" class="headerlink" title="这是一个从方法中返回多个值的常见模式。目前可选用的选项并非是最佳的："></a>这是一个从方法中返回多个值的常见模式。目前可选用的选项并非是最佳的：</h3><h3 id="输出参数：使用起来比较笨拙（即使有上述的改进），他们在使用异步方法是不起作用的。"><a href="#输出参数：使用起来比较笨拙（即使有上述的改进），他们在使用异步方法是不起作用的。" class="headerlink" title="输出参数：使用起来比较笨拙（即使有上述的改进），他们在使用异步方法是不起作用的。"></a>输出参数：使用起来比较笨拙（即使有上述的改进），他们在使用异步方法是不起作用的。</h3><h3 id="System-Tuple-lt-…-gt-返回类型：冗余使用和请求一个元组对象的分配。"><a href="#System-Tuple-lt-…-gt-返回类型：冗余使用和请求一个元组对象的分配。" class="headerlink" title="System.Tuple&lt;…&gt; 返回类型：冗余使用和请求一个元组对象的分配。"></a>System.Tuple&lt;…&gt; 返回类型：冗余使用和请求一个元组对象的分配。</h3><h3 id="方法的定制传输类型：对于类型，具有大量的代码开销，其目的只是暂时将一些值组合起来。"><a href="#方法的定制传输类型：对于类型，具有大量的代码开销，其目的只是暂时将一些值组合起来。" class="headerlink" title="方法的定制传输类型：对于类型，具有大量的代码开销，其目的只是暂时将一些值组合起来。"></a>方法的定制传输类型：对于类型，具有大量的代码开销，其目的只是暂时将一些值组合起来。</h3><h3 id="通过动态返回类型返回匿名类型：很高的性能开销，没有静态类型检查。"><a href="#通过动态返回类型返回匿名类型：很高的性能开销，没有静态类型检查。" class="headerlink" title="通过动态返回类型返回匿名类型：很高的性能开销，没有静态类型检查。"></a>通过动态返回类型返回匿名类型：很高的性能开销，没有静态类型检查。</h3><h3 id="在这点要做到更好，C＃7-0-增加的元组类型和元组文字："><a href="#在这点要做到更好，C＃7-0-增加的元组类型和元组文字：" class="headerlink" title="在这点要做到更好，C＃7.0 增加的元组类型和元组文字："></a>在这点要做到更好，C＃7.0 增加的元组类型和元组文字：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(string, string, string) LookupName(long id) // tuple return type&#123;</div><div class="line">    ... // retrieve first, middle and last from data storage</div><div class="line">    return (first, middle, last); // tuple literal</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="这个方法可以有效地返回三个字符串，以元素的形式包含在一个元组值里。"><a href="#这个方法可以有效地返回三个字符串，以元素的形式包含在一个元组值里。" class="headerlink" title="这个方法可以有效地返回三个字符串，以元素的形式包含在一个元组值里。"></a>这个方法可以有效地返回三个字符串，以元素的形式包含在一个元组值里。</h3><h3 id="这种方法的调用将会收到一个元组，并且可以单独地访问其中的元素："><a href="#这种方法的调用将会收到一个元组，并且可以单独地访问其中的元素：" class="headerlink" title="这种方法的调用将会收到一个元组，并且可以单独地访问其中的元素："></a>这种方法的调用将会收到一个元组，并且可以单独地访问其中的元素：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var names = LookupName(id);</div><div class="line">WriteLine($&quot;found &#123;names.Item1&#125; &#123;names.Item3&#125;.&quot;);</div></pre></td></tr></table></figure>
<h3 id="Item1-等是元组元素的默认名称，也可以被一直使用。但他们不具有描述性，所以你可以选择添加更好的："><a href="#Item1-等是元组元素的默认名称，也可以被一直使用。但他们不具有描述性，所以你可以选择添加更好的：" class="headerlink" title="Item1 等是元组元素的默认名称，也可以被一直使用。但他们不具有描述性，所以你可以选择添加更好的："></a>Item1 等是元组元素的默认名称，也可以被一直使用。但他们不具有描述性，所以你可以选择添加更好的：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(string first, string middle, string last) LookupName(long id) // tuple elements have names</div></pre></td></tr></table></figure>
<h3 id="现在元组的接收者有多个具有描述性的名称可用："><a href="#现在元组的接收者有多个具有描述性的名称可用：" class="headerlink" title="现在元组的接收者有多个具有描述性的名称可用："></a>现在元组的接收者有多个具有描述性的名称可用：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var names = LookupName(id);</div><div class="line">WriteLine($&quot;found &#123;names.first&#125; &#123;names.last&#125;.&quot;);</div></pre></td></tr></table></figure>
<h3 id="你也可以直接在元组文字指定元素名称："><a href="#你也可以直接在元组文字指定元素名称：" class="headerlink" title="你也可以直接在元组文字指定元素名称："></a>你也可以直接在元组文字指定元素名称：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">return (first: first, middle: middle, last: last); // named tuple elements in a literal</div></pre></td></tr></table></figure>
<h3 id="一般可以给元组类型分配一些彼此无关的名称：只要各个元素是可分配的，元组类型就可以自如地转换为其他的元组类型。也有一些限制，特别是对元组文字，即常见的和告警错误，如不慎交换元素名称的情况下，就会出现错误。"><a href="#一般可以给元组类型分配一些彼此无关的名称：只要各个元素是可分配的，元组类型就可以自如地转换为其他的元组类型。也有一些限制，特别是对元组文字，即常见的和告警错误，如不慎交换元素名称的情况下，就会出现错误。" class="headerlink" title="一般可以给元组类型分配一些彼此无关的名称：只要各个元素是可分配的，元组类型就可以自如地转换为其他的元组类型。也有一些限制，特别是对元组文字，即常见的和告警错误，如不慎交换元素名称的情况下，就会出现错误。"></a>一般可以给元组类型分配一些彼此无关的名称：只要各个元素是可分配的，元组类型就可以自如地转换为其他的元组类型。也有一些限制，特别是对元组文字，即常见的和告警错误，如不慎交换元素名称的情况下，就会出现错误。</h3><h3 id="Note：这些限制尚未在-Preview-4-中实现。"><a href="#Note：这些限制尚未在-Preview-4-中实现。" class="headerlink" title="Note：这些限制尚未在 Preview 4 中实现。"></a>Note：这些限制尚未在 Preview 4 中实现。</h3><h3 id="元组是值类型的，它们的元素是公开的，可变的。他们有值相等，如果所有的元素都是成对相等的（并且具有相同的哈希值），那么这两个元组也是相等的（并且具有相同的哈希值）。"><a href="#元组是值类型的，它们的元素是公开的，可变的。他们有值相等，如果所有的元素都是成对相等的（并且具有相同的哈希值），那么这两个元组也是相等的（并且具有相同的哈希值）。" class="headerlink" title="元组是值类型的，它们的元素是公开的，可变的。他们有值相等，如果所有的元素都是成对相等的（并且具有相同的哈希值），那么这两个元组也是相等的（并且具有相同的哈希值）。"></a>元组是值类型的，它们的元素是公开的，可变的。他们有值相等，如果所有的元素都是成对相等的（并且具有相同的哈希值），那么这两个元组也是相等的（并且具有相同的哈希值）。</h3><h3 id="这使得在需要返回多个值的情况下，元组会非常有用。举例来说，如果你需要多个-key-值的字典，使用元组作为你的-key-值，一切会非常顺利。如果你需要在每个位置都具有多个值的列表，使用元组进行列表搜索，会工作的很好。"><a href="#这使得在需要返回多个值的情况下，元组会非常有用。举例来说，如果你需要多个-key-值的字典，使用元组作为你的-key-值，一切会非常顺利。如果你需要在每个位置都具有多个值的列表，使用元组进行列表搜索，会工作的很好。" class="headerlink" title="这使得在需要返回多个值的情况下，元组会非常有用。举例来说，如果你需要多个 key 值的字典，使用元组作为你的 key 值，一切会非常顺利。如果你需要在每个位置都具有多个值的列表，使用元组进行列表搜索，会工作的很好。"></a>这使得在需要返回多个值的情况下，元组会非常有用。举例来说，如果你需要多个 key 值的字典，使用元组作为你的 key 值，一切会非常顺利。如果你需要在每个位置都具有多个值的列表，使用元组进行列表搜索，会工作的很好。</h3><h3 id="Note：元组依赖于一组基本类型，却不包括在-Preview-4-中。为了使该特性工作，你可以通过-NuGet-获取它们："><a href="#Note：元组依赖于一组基本类型，却不包括在-Preview-4-中。为了使该特性工作，你可以通过-NuGet-获取它们：" class="headerlink" title="Note：元组依赖于一组基本类型，却不包括在 Preview 4 中。为了使该特性工作，你可以通过 NuGet 获取它们："></a>Note：元组依赖于一组基本类型，却不包括在 Preview 4 中。为了使该特性工作，你可以通过 NuGet 获取它们：</h3><h3 id="右键单击-Solution-Explorer-中的项目，然后选择“管理的NuGet包……”"><a href="#右键单击-Solution-Explorer-中的项目，然后选择“管理的NuGet包……”" class="headerlink" title="右键单击 Solution Explorer 中的项目，然后选择“管理的NuGet包……”"></a>右键单击 Solution Explorer 中的项目，然后选择“管理的NuGet包……”</h3><h3 id="选择“Browse”选项卡，选中“Include-prerelease”，选择“nuget-org”作为“Package-source”"><a href="#选择“Browse”选项卡，选中“Include-prerelease”，选择“nuget-org”作为“Package-source”" class="headerlink" title="选择“Browse”选项卡，选中“Include prerelease”，选择“nuget.org”作为“Package source”"></a>选择“Browse”选项卡，选中“Include prerelease”，选择“nuget.org”作为“Package source”</h3><h3 id="搜索“System-ValueTuple”并安装它。"><a href="#搜索“System-ValueTuple”并安装它。" class="headerlink" title="搜索“System.ValueTuple”并安装它。"></a>搜索“System.ValueTuple”并安装它。</h3><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><h3 id="消耗元组的另一种方法是将解构它们。一个解构声明是一个将元组（或其他值）分割成部分并单独分配到新变量的语法："><a href="#消耗元组的另一种方法是将解构它们。一个解构声明是一个将元组（或其他值）分割成部分并单独分配到新变量的语法：" class="headerlink" title="消耗元组的另一种方法是将解构它们。一个解构声明是一个将元组（或其他值）分割成部分并单独分配到新变量的语法："></a>消耗元组的另一种方法是将解构它们。一个解构声明是一个将元组（或其他值）分割成部分并单独分配到新变量的语法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(string first, string middle, string last) = LookupName(id1);</div><div class="line">// deconstructing declaration</div><div class="line">WriteLine($&quot;found &#123;first&#125; &#123;last&#125;.&quot;);</div></pre></td></tr></table></figure>
<h3 id="在解构声明中，您可以使用-var-来声明单独的变量："><a href="#在解构声明中，您可以使用-var-来声明单独的变量：" class="headerlink" title="在解构声明中，您可以使用 var 来声明单独的变量："></a>在解构声明中，您可以使用 var 来声明单独的变量：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(var first, var middle, var last) = LookupName(id1); // var inside</div></pre></td></tr></table></figure>
<p>或者将一个单独的 var 作为一个缩写放入圆括号外面：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var (first, middle, last) = LookupName(id1); // var outside</div></pre></td></tr></table></figure>
<p>你也可以使用解构任务来解构成现有的变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(first, middle, last) = LookupName(id2); // deconstructing assignment</div></pre></td></tr></table></figure>
<h3 id="解构不只是应用于元组。任何的类型都可以被解构，只要它具有（实例或扩展）的解构方法："><a href="#解构不只是应用于元组。任何的类型都可以被解构，只要它具有（实例或扩展）的解构方法：" class="headerlink" title="解构不只是应用于元组。任何的类型都可以被解构，只要它具有（实例或扩展）的解构方法："></a>解构不只是应用于元组。任何的类型都可以被解构，只要它具有（实例或扩展）的解构方法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public void Deconstruct(out T1 x1, ..., out Tn xn) &#123; ... &#125;</div></pre></td></tr></table></figure>
<h3 id="输出参数构成了解构结果中的值。"><a href="#输出参数构成了解构结果中的值。" class="headerlink" title="输出参数构成了解构结果中的值。"></a>输出参数构成了解构结果中的值。</h3><h3 id="（为什么它使用了参数，而不是返回一个元组？这是为了让你针对不同的值拥有多个重载）。"><a href="#（为什么它使用了参数，而不是返回一个元组？这是为了让你针对不同的值拥有多个重载）。" class="headerlink" title="（为什么它使用了参数，而不是返回一个元组？这是为了让你针对不同的值拥有多个重载）。"></a>（为什么它使用了参数，而不是返回一个元组？这是为了让你针对不同的值拥有多个重载）。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class Point</div><div class="line">&#123;  </div><div class="line"> public int X &#123; get; &#125;    public int Y &#123; get; &#125; </div><div class="line">    public Point(int x, int y) &#123; X = x; Y = y; &#125;  </div><div class="line"> public void Deconstruct(out int x, out int y) &#123; x = X; y = Y; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">(var myX, var myY) = GetPoint(); // calls Deconstruct(out myX, out myY);</div></pre></td></tr></table></figure>
<h3 id="这是一种常见的模式，以一种对称的方式包含了构建和解构。"><a href="#这是一种常见的模式，以一种对称的方式包含了构建和解构。" class="headerlink" title="这是一种常见的模式，以一种对称的方式包含了构建和解构。"></a>这是一种常见的模式，以一种对称的方式包含了构建和解构。</h3><h3 id="对于输出变量，我们计划在解构中加入通配符，来化简你不关心的变量："><a href="#对于输出变量，我们计划在解构中加入通配符，来化简你不关心的变量：" class="headerlink" title="对于输出变量，我们计划在解构中加入通配符，来化简你不关心的变量："></a>对于输出变量，我们计划在解构中加入通配符，来化简你不关心的变量：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(var myX, *) = GetPoint(); // I only care about myX</div></pre></td></tr></table></figure>
<h3 id="Note：通配符是否会出现在C＃7-0中，这仍是未知数。"><a href="#Note：通配符是否会出现在C＃7-0中，这仍是未知数。" class="headerlink" title="Note：通配符是否会出现在C＃7.0中，这仍是未知数。"></a>Note：通配符是否会出现在C＃7.0中，这仍是未知数。</h3><h2 id="局部函数"><a href="#局部函数" class="headerlink" title="局部函数"></a>局部函数</h2><h3 id="有时候，一个辅助函数可以在一个独立函数内部起作用。现在，你可以以一个局部函数的方式在其它函数内部声明这样的函数："><a href="#有时候，一个辅助函数可以在一个独立函数内部起作用。现在，你可以以一个局部函数的方式在其它函数内部声明这样的函数：" class="headerlink" title="有时候，一个辅助函数可以在一个独立函数内部起作用。现在，你可以以一个局部函数的方式在其它函数内部声明这样的函数："></a>有时候，一个辅助函数可以在一个独立函数内部起作用。现在，你可以以一个局部函数的方式在其它函数内部声明这样的函数：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public int Fibonacci(int x)</div><div class="line">&#123;    if (x &lt; 0)</div><div class="line">throw new ArgumentException(&quot;Less negativity please!&quot;, nameof(x));  </div><div class="line"> return Fib(x).current;</div><div class="line"></div><div class="line">    (int current, int previous) Fib(int i)</div><div class="line">    &#123;      </div><div class="line"> if (i == 0)</div><div class="line">return (1, 0);      </div><div class="line"> var (p, pp) = Fib(i - 1);    </div><div class="line">   return (p + pp, p);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="闭合范围内的参数和局部变量在局部函数的内部是可用的，就如同它们在-lambda-表达式中一样。"><a href="#闭合范围内的参数和局部变量在局部函数的内部是可用的，就如同它们在-lambda-表达式中一样。" class="headerlink" title="闭合范围内的参数和局部变量在局部函数的内部是可用的，就如同它们在 lambda 表达式中一样。"></a>闭合范围内的参数和局部变量在局部函数的内部是可用的，就如同它们在 lambda 表达式中一样。</h3><h3 id="举一个例子，迭代的方法实现通常需要一个非迭代的封装方法，以便在调用时检查实参。（迭代器本身不启动运行，直到-MoveNext-被调用）。局部函数非常适合这样的场景："><a href="#举一个例子，迭代的方法实现通常需要一个非迭代的封装方法，以便在调用时检查实参。（迭代器本身不启动运行，直到-MoveNext-被调用）。局部函数非常适合这样的场景：" class="headerlink" title="举一个例子，迭代的方法实现通常需要一个非迭代的封装方法，以便在调用时检查实参。（迭代器本身不启动运行，直到 MoveNext 被调用）。局部函数非常适合这样的场景："></a>举一个例子，迭代的方法实现通常需要一个非迭代的封装方法，以便在调用时检查实参。（迭代器本身不启动运行，直到 MoveNext 被调用）。局部函数非常适合这样的场景：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public IEnumerable&lt;T&gt; Filter&lt;T&gt;(IEnumerable&lt;T&gt; source, Func&lt;T, bool&gt; filter)</div><div class="line">&#123;  </div><div class="line"> if (source == null)</div><div class="line">throw new ArgumentNullException(nameof(source));  </div><div class="line"> if (filter == null)</div><div class="line">throw new ArgumentNullException(nameof(filter)); </div><div class="line">    return Iterator();</div><div class="line"></div><div class="line">    IEnumerable&lt;T&gt; Iterator()</div><div class="line">    &#123;    </div><div class="line">   foreach (var element in source) </div><div class="line">        &#123;          </div><div class="line"> if (filter(element)) &#123; yield return element; &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="如果迭代器有一个私有方法传递给过滤器，那么当其它成员意外的使用迭代器时，迭代器也变得可用（即使没有参数检查）。此外，还会采取相同的实参作为过滤器，以便替换范围内的参数。"><a href="#如果迭代器有一个私有方法传递给过滤器，那么当其它成员意外的使用迭代器时，迭代器也变得可用（即使没有参数检查）。此外，还会采取相同的实参作为过滤器，以便替换范围内的参数。" class="headerlink" title="如果迭代器有一个私有方法传递给过滤器，那么当其它成员意外的使用迭代器时，迭代器也变得可用（即使没有参数检查）。此外，还会采取相同的实参作为过滤器，以便替换范围内的参数。"></a>如果迭代器有一个私有方法传递给过滤器，那么当其它成员意外的使用迭代器时，迭代器也变得可用（即使没有参数检查）。此外，还会采取相同的实参作为过滤器，以便替换范围内的参数。</h3><h3 id="注意：在-Preview-4，局部函数在调用之前，必须被声明。这个限制将会被松开，以便使得局部函数从定义分配中读取时，能够被调用。"><a href="#注意：在-Preview-4，局部函数在调用之前，必须被声明。这个限制将会被松开，以便使得局部函数从定义分配中读取时，能够被调用。" class="headerlink" title="注意：在 Preview 4，局部函数在调用之前，必须被声明。这个限制将会被松开，以便使得局部函数从定义分配中读取时，能够被调用。"></a>注意：在 Preview 4，局部函数在调用之前，必须被声明。这个限制将会被松开，以便使得局部函数从定义分配中读取时，能够被调用。</h3><h2 id="文字改进"><a href="#文字改进" class="headerlink" title="文字改进"></a>文字改进</h2><h3 id="C＃7-0-允许-出现，作为数字分隔号："><a href="#C＃7-0-允许-出现，作为数字分隔号：" class="headerlink" title="C＃7.0 允许 _ 出现，作为数字分隔号："></a>C＃7.0 允许 _ 出现，作为数字分隔号：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var d = 123_456;</div><div class="line">var x = 0xAB_CD_EF;</div></pre></td></tr></table></figure>
<h3 id="你可以将-放入任意的数字之间，以提高可读性，它们对值没有影响。"><a href="#你可以将-放入任意的数字之间，以提高可读性，它们对值没有影响。" class="headerlink" title="你可以将 _ 放入任意的数字之间，以提高可读性，它们对值没有影响。"></a>你可以将 _ 放入任意的数字之间，以提高可读性，它们对值没有影响。</h3><h3 id="此外，C＃7-0-引入了二进制文字，这样你就可以指定二进制模式而不用去了解十六进制。"><a href="#此外，C＃7-0-引入了二进制文字，这样你就可以指定二进制模式而不用去了解十六进制。" class="headerlink" title="此外，C＃7.0 引入了二进制文字，这样你就可以指定二进制模式而不用去了解十六进制。"></a>此外，C＃7.0 引入了二进制文字，这样你就可以指定二进制模式而不用去了解十六进制。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var b = 0b1010_1011_1100_1101_1110_1111;</div></pre></td></tr></table></figure>
<h3 id="引用返回和局部引用"><a href="#引用返回和局部引用" class="headerlink" title="引用返回和局部引用"></a>引用返回和局部引用</h3><h3 id="就像在-C-中通过引用来传递参数（使用引用修改器），你现在也可以通过引用来返回参数，同样也可以以局部变量的方式存储参数。"><a href="#就像在-C-中通过引用来传递参数（使用引用修改器），你现在也可以通过引用来返回参数，同样也可以以局部变量的方式存储参数。" class="headerlink" title="就像在 C# 中通过引用来传递参数（使用引用修改器），你现在也可以通过引用来返回参数，同样也可以以局部变量的方式存储参数。"></a>就像在 C# 中通过引用来传递参数（使用引用修改器），你现在也可以通过引用来返回参数，同样也可以以局部变量的方式存储参数。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public ref int Find(int number, int[] numbers)</div><div class="line">&#123;    </div><div class="line">for (int i = 0; i &lt; numbers.Length; i++)</div><div class="line">     &#123;    </div><div class="line">   if (numbers[i] == number) </div><div class="line">            &#123;    </div><div class="line">       return ref numbers[i];</div><div class="line">// return the storage location, not the value    &#125;</div><div class="line">        &#125;  </div><div class="line"> throw new IndexOutOfRangeException($&quot;&#123;nameof(number)&#125; not found&quot;);</div><div class="line">&#125; </div><div class="line">int[] array = &#123; 1, 15, -39, 0, 7, 14, -12 &#125;;</div><div class="line">ref int place = ref Find(7, array); // aliases 7&apos;s place in the arrayplace = 9; // replaces 7 with 9 in the arrayWriteLine(array[4]); // prints 9</div></pre></td></tr></table></figure>
<h3 id="这是绕过占位符进入大数据结构的好方法。例如，一个游戏也许会将它的数据保存在大型预分配的阵列结构中（为了避免垃圾回收机制暂停）。方法可以将直接引用返回成一个结构，通过它的调用者可以读取和修改它。"><a href="#这是绕过占位符进入大数据结构的好方法。例如，一个游戏也许会将它的数据保存在大型预分配的阵列结构中（为了避免垃圾回收机制暂停）。方法可以将直接引用返回成一个结构，通过它的调用者可以读取和修改它。" class="headerlink" title="这是绕过占位符进入大数据结构的好方法。例如，一个游戏也许会将它的数据保存在大型预分配的阵列结构中（为了避免垃圾回收机制暂停）。方法可以将直接引用返回成一个结构，通过它的调用者可以读取和修改它。"></a>这是绕过占位符进入大数据结构的好方法。例如，一个游戏也许会将它的数据保存在大型预分配的阵列结构中（为了避免垃圾回收机制暂停）。方法可以将直接引用返回成一个结构，通过它的调用者可以读取和修改它。</h3><h3 id="也有一些限制，以确保安全："><a href="#也有一些限制，以确保安全：" class="headerlink" title="也有一些限制，以确保安全："></a>也有一些限制，以确保安全：</h3><h3 id="你只能返回“安全返回”的引用：一个是传递给你的引用，一个是指向对象中的引用。"><a href="#你只能返回“安全返回”的引用：一个是传递给你的引用，一个是指向对象中的引用。" class="headerlink" title="你只能返回“安全返回”的引用：一个是传递给你的引用，一个是指向对象中的引用。"></a>你只能返回“安全返回”的引用：一个是传递给你的引用，一个是指向对象中的引用。</h3><h3 id="本地引用会被初始化成一个本地存储，并且不能指向另一个存储。"><a href="#本地引用会被初始化成一个本地存储，并且不能指向另一个存储。" class="headerlink" title="本地引用会被初始化成一个本地存储，并且不能指向另一个存储。"></a>本地引用会被初始化成一个本地存储，并且不能指向另一个存储。</h3><h2 id="异步返回类型"><a href="#异步返回类型" class="headerlink" title="异步返回类型"></a>异步返回类型</h2><h3 id="到现在为止，C＃-的异步方法必须返回-void，Task-或-Task。C＃7-0-允许其它类型以这种能从一个方法中返回的方式被定义，因为它们可以以异步方法被返回的方式来定义其它类型。"><a href="#到现在为止，C＃-的异步方法必须返回-void，Task-或-Task。C＃7-0-允许其它类型以这种能从一个方法中返回的方式被定义，因为它们可以以异步方法被返回的方式来定义其它类型。" class="headerlink" title="到现在为止，C＃ 的异步方法必须返回 void，Task 或 Task。C＃7.0 允许其它类型以这种能从一个方法中返回的方式被定义，因为它们可以以异步方法被返回的方式来定义其它类型。"></a>到现在为止，C＃ 的异步方法必须返回 void，Task 或 Task<t>。C＃7.0 允许其它类型以这种能从一个方法中返回的方式被定义，因为它们可以以异步方法被返回的方式来定义其它类型。</t></h3><h3 id="例如我们计划建立一个-ValueTask-结构类型的数据。建立它是为了防止异步运行的结果在等待时已可用的情境下，对-Task-进行分配。对于许多实例中设计缓冲的异步场景，这可以大大减少分配的数量并显著地提升性能。"><a href="#例如我们计划建立一个-ValueTask-结构类型的数据。建立它是为了防止异步运行的结果在等待时已可用的情境下，对-Task-进行分配。对于许多实例中设计缓冲的异步场景，这可以大大减少分配的数量并显著地提升性能。" class="headerlink" title="例如我们计划建立一个 ValueTask 结构类型的数据。建立它是为了防止异步运行的结果在等待时已可用的情境下，对 Task 进行分配。对于许多实例中设计缓冲的异步场景，这可以大大减少分配的数量并显著地提升性能。"></a>例如我们计划建立一个 ValueTask<t> 结构类型的数据。建立它是为了防止异步运行的结果在等待时已可用的情境下，对 Task<t> 进行分配。对于许多实例中设计缓冲的异步场景，这可以大大减少分配的数量并显著地提升性能。</t></t></h3><h3 id="Note：异步返回类型尚未在-Preview-4-中提供。"><a href="#Note：异步返回类型尚未在-Preview-4-中提供。" class="headerlink" title="Note：异步返回类型尚未在 Preview 4 中提供。"></a>Note：异步返回类型尚未在 Preview 4 中提供。</h3><h3 id="更多的-expression-bodied-成员："><a href="#更多的-expression-bodied-成员：" class="headerlink" title="更多的 expression bodied 成员："></a>更多的 expression bodied 成员：</h3><h3 id="expression-bodied-的方法和属性是对-C-6-0-的巨大提升。C-7-0-为-expression-bodied-事件列表增加了访问器，结构器和终结器。"><a href="#expression-bodied-的方法和属性是对-C-6-0-的巨大提升。C-7-0-为-expression-bodied-事件列表增加了访问器，结构器和终结器。" class="headerlink" title="expression bodied 的方法和属性是对 C# 6.0 的巨大提升。C# 7.0 为 expression bodied 事件列表增加了访问器，结构器和终结器。"></a>expression bodied 的方法和属性是对 C# 6.0 的巨大提升。C# 7.0 为 expression bodied 事件列表增加了访问器，结构器和终结器。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class Person</div><div class="line">&#123;  </div><div class="line"> private static ConcurrentDictionary&lt;int, string&gt; names = new ConcurrentDictionary&lt;int, string&gt;();  </div><div class="line"></div><div class="line"> private int id = GetId(); </div><div class="line">    public Person(string name) =&gt; names.TryAdd(id, name); // constructors</div><div class="line">    ~Person() =&gt; names.TryRemove(id, out *);              // destructors</div><div class="line">    public string Name</div><div class="line">    &#123;        get =&gt; names[id];                                 // getters</div><div class="line">        set =&gt; names[id] = value;                         // setters    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Note：这些额外增加的-expression-bodied-的成员尚未在-Preview-4-中提供。"><a href="#Note：这些额外增加的-expression-bodied-的成员尚未在-Preview-4-中提供。" class="headerlink" title="Note：这些额外增加的 expression bodied 的成员尚未在 Preview 4 中提供。"></a>Note：这些额外增加的 expression bodied 的成员尚未在 Preview 4 中提供。</h3><h3 id="这是社区共享的示例，而不是-Microsoft-C-编译团队提供的，还是开源的！"><a href="#这是社区共享的示例，而不是-Microsoft-C-编译团队提供的，还是开源的！" class="headerlink" title="这是社区共享的示例，而不是 Microsoft C# 编译团队提供的，还是开源的！"></a>这是社区共享的示例，而不是 Microsoft C# 编译团队提供的，还是开源的！</h3><h2 id="Throw-表达式"><a href="#Throw-表达式" class="headerlink" title="Throw 表达式"></a>Throw 表达式</h2><h3 id="在表达式中间抛出一个异常是很容易的：只需为自己的代码调用一个方法！但在-C＃7-0-中，我们允许在任意地方抛出一个表达式："><a href="#在表达式中间抛出一个异常是很容易的：只需为自己的代码调用一个方法！但在-C＃7-0-中，我们允许在任意地方抛出一个表达式：" class="headerlink" title="在表达式中间抛出一个异常是很容易的：只需为自己的代码调用一个方法！但在 C＃7.0 中，我们允许在任意地方抛出一个表达式："></a>在表达式中间抛出一个异常是很容易的：只需为自己的代码调用一个方法！但在 C＃7.0 中，我们允许在任意地方抛出一个表达式：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class Person</div><div class="line">&#123;  </div><div class="line"> public string Name &#123; get; &#125;    </div><div class="line">public Person(string name) =&gt; Name = name ?? throw new ArgumentNullException(name);  </div><div class="line"></div><div class="line"> public string GetFirstName()</div><div class="line">            &#123;        </div><div class="line">var parts = Name.Split(&quot; &quot;);  </div><div class="line">     return (parts.Length &gt; 0) ? parts[0] : throw new InvalidOperationException(&quot;No name!&quot;);</div><div class="line">             &#125;    </div><div class="line"></div><div class="line">public string GetLastName() =&gt; throw new NotImplementedException();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Note：Throw-表达式尚未在Preview-4中提供。"><a href="#Note：Throw-表达式尚未在Preview-4中提供。" class="headerlink" title="Note：Throw 表达式尚未在Preview 4中提供。"></a>Note：Throw 表达式尚未在Preview 4中提供。</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;以下将是-C-7-0-中所有计划的语言特性的描述。随着-Visual-Studio-“15”-Preview-4-版本的发布，这些特性中的大部分将活跃起来。现在是时候来展示这些特性，你也告诉借此告诉我们你的想法！&quot;&gt;&lt;a href=&quot;#以下将是-C-7-0-中所有计划的语言特性的描述。随着-Visual-Studio-“15”-Preview-4-版本的发布，这些特性中的大部分将活跃起来。现在是时候来展示这些特性，你也告诉借此告诉我们你的想法！&quot; class=&quot;headerlink&quot; title=&quot;以下将是 C# 7.0 中所有计划的语言特性的描述。随着 Visual Studio “15” Preview 4 版本的发布，这些特性中的大部分将活跃起来。现在是时候来展示这些特性，你也告诉借此告诉我们你的想法！&quot;&gt;&lt;/a&gt;以下将是 C# 7.0 中所有计划的语言特性的描述。随着 Visual Studio “15” Preview 4 版本的发布，这些特性中的大部分将活跃起来。现在是时候来展示这些特性，你也告诉借此告诉我们你的想法！&lt;/h3&gt;&lt;h3 id=&quot;C＃7-0-增加了许多新功能，并专注于数据消费，简化代码和性能的改善。或许最大的特性就是元祖和模式匹配，元祖可以很容易地拥有多个返回结果，而模型匹配可以根据数据的“形”的不同来简化代码。我们希望，将它们结合起来，从而使你的代码更加简洁高效，也可以使你更加快乐并富有成效。&quot;&gt;&lt;a href=&quot;#C＃7-0-增加了许多新功能，并专注于数据消费，简化代码和性能的改善。或许最大的特性就是元祖和模式匹配，元祖可以很容易地拥有多个返回结果，而模型匹配可以根据数据的“形”的不同来简化代码。我们希望，将它们结合起来，从而使你的代码更加简洁高效，也可以使你更加快乐并富有成效。&quot; class=&quot;headerlink&quot; title=&quot;C＃7.0 增加了许多新功能，并专注于数据消费，简化代码和性能的改善。或许最大的特性就是元祖和模式匹配，元祖可以很容易地拥有多个返回结果，而模型匹配可以根据数据的“形”的不同来简化代码。我们希望，将它们结合起来，从而使你的代码更加简洁高效，也可以使你更加快乐并富有成效。&quot;&gt;&lt;/a&gt;C＃7.0 增加了许多新功能，并专注于数据消费，简化代码和性能的改善。或许最大的特性就是元祖和模式匹配，元祖可以很容易地拥有多个返回结果，而模型匹配可以根据数据的“形”的不同来简化代码。我们希望，将它们结合起来，从而使你的代码更加简洁高效，也可以使你更加快乐并富有成效。&lt;/h3&gt;&lt;h3 id=&quot;请点击-Visual-Studio-窗口顶部的反馈按钮，告诉我们哪些是你不期待的特性或者你关于提升这些特性的思考。还有许多功能没有在-Preview-4-版本中实现。接下来我会描述一些我们发布的最终版本里将会起作用的特性，和一些一旦不起作用机即会删除掉的特性。我也是支持对这些计划作出改变，尤其是作为我们从你那儿得到反馈的结果。当最终版本发布时，这些特性中的一些将会改变或者删除。&quot;&gt;&lt;a href=&quot;#请点击-Visual-Studio-窗口顶部的反馈按钮，告诉我们哪些是你不期待的特性或者你关于提升这些特性的思考。还有许多功能没有在-Preview-4-版本中实现。接下来我会描述一些我们发布的最终版本里将会起作用的特性，和一些一旦不起作用机即会删除掉的特性。我也是支持对这些计划作出改变，尤其是作为我们从你那儿得到反馈的结果。当最终版本发布时，这些特性中的一些将会改变或者删除。&quot; class=&quot;headerlink&quot; title=&quot;请点击 Visual Studio 窗口顶部的反馈按钮，告诉我们哪些是你不期待的特性或者你关于提升这些特性的思考。还有许多功能没有在 Preview 4 版本中实现。接下来我会描述一些我们发布的最终版本里将会起作用的特性，和一些一旦不起作用机即会删除掉的特性。我也是支持对这些计划作出改变，尤其是作为我们从你那儿得到反馈的结果。当最终版本发布时，这些特性中的一些将会改变或者删除。&quot;&gt;&lt;/a&gt;请点击 Visual Studio 窗口顶部的反馈按钮，告诉我们哪些是你不期待的特性或者你关于提升这些特性的思考。还有许多功能没有在 Preview 4 版本中实现。接下来我会描述一些我们发布的最终版本里将会起作用的特性，和一些一旦不起作用机即会删除掉的特性。我也是支持对这些计划作出改变，尤其是作为我们从你那儿得到反馈的结果。当最终版本发布时，这些特性中的一些将会改变或者删除。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="C#" scheme="http://xj8c.cc/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>武汉路博特工程科技有限公司实习“满月”工作感受</title>
    <link href="http://xj8c.cc/2016/05/18/internship-experience/"/>
    <id>http://xj8c.cc/2016/05/18/internship-experience/</id>
    <published>2016-05-18T07:27:30.000Z</published>
    <updated>2017-05-26T06:29:50.451Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今天是2016年5月18日，时间过得真快，自上个月18号到今天来公司刚好一个月。这一个月的学习生活，让我学到了很多，不管是技术上还是生活阅历上都得到了很大的提升。"><a href="#今天是2016年5月18日，时间过得真快，自上个月18号到今天来公司刚好一个月。这一个月的学习生活，让我学到了很多，不管是技术上还是生活阅历上都得到了很大的提升。" class="headerlink" title="今天是2016年5月18日，时间过得真快，自上个月18号到今天来公司刚好一个月。这一个月的学习生活，让我学到了很多，不管是技术上还是生活阅历上都得到了很大的提升。"></a>今天是2016年5月18日，时间过得真快，自上个月18号到今天来公司刚好一个月。这一个月的学习生活，让我学到了很多，不管是技术上还是生活阅历上都得到了很大的提升。</h3><h3 id="在公司，和大家相处的都很融洽，大家一起吃饭，一起加班，一起讨论技术。在团队中，有高学历，有低学历，但是大家并不会因为学历的原因而疏远。刚进公司什么都不懂，慢慢的适应了现有的环境，每天上班下班加班，乐此不疲。"><a href="#在公司，和大家相处的都很融洽，大家一起吃饭，一起加班，一起讨论技术。在团队中，有高学历，有低学历，但是大家并不会因为学历的原因而疏远。刚进公司什么都不懂，慢慢的适应了现有的环境，每天上班下班加班，乐此不疲。" class="headerlink" title="在公司，和大家相处的都很融洽，大家一起吃饭，一起加班，一起讨论技术。在团队中，有高学历，有低学历，但是大家并不会因为学历的原因而疏远。刚进公司什么都不懂，慢慢的适应了现有的环境，每天上班下班加班，乐此不疲。"></a>在公司，和大家相处的都很融洽，大家一起吃饭，一起加班，一起讨论技术。在团队中，有高学历，有低学历，但是大家并不会因为学历的原因而疏远。刚进公司什么都不懂，慢慢的适应了现有的环境，每天上班下班加班，乐此不疲。</h3><a id="more"></a>
<h3 id="祝经理，人很随性，对上班工作没有具体的硬性要求，弹性工作，正是我想要的。刚到公司的第一个星期，感觉很轻松，每天到点下班，有很多空余的时间，随着时间的推移，慢慢的有任务了，变得忙起来，每天要加班完成任务。正是这样，才让我得到了提升。从前端到后端再到测试，全接触。"><a href="#祝经理，人很随性，对上班工作没有具体的硬性要求，弹性工作，正是我想要的。刚到公司的第一个星期，感觉很轻松，每天到点下班，有很多空余的时间，随着时间的推移，慢慢的有任务了，变得忙起来，每天要加班完成任务。正是这样，才让我得到了提升。从前端到后端再到测试，全接触。" class="headerlink" title="祝经理，人很随性，对上班工作没有具体的硬性要求，弹性工作，正是我想要的。刚到公司的第一个星期，感觉很轻松，每天到点下班，有很多空余的时间，随着时间的推移，慢慢的有任务了，变得忙起来，每天要加班完成任务。正是这样，才让我得到了提升。从前端到后端再到测试，全接触。"></a>祝经理，人很随性，对上班工作没有具体的硬性要求，弹性工作，正是我想要的。刚到公司的第一个星期，感觉很轻松，每天到点下班，有很多空余的时间，随着时间的推移，慢慢的有任务了，变得忙起来，每天要加班完成任务。正是这样，才让我得到了提升。从前端到后端再到测试，全接触。</h3><h3 id="在我来XXX面试的时候，我已经收到其他公司的offer，之所以选择XXX，我主要从公司环境和公司氛围以及面试者-祝经理-来判定的。我当初既然选择了这里，我就会一如既往的在这里继续学习下去。我对公司的第一印象还是不错的，那么在这里不仅可以得到技能上的提升，还能收获身心的愉悦。"><a href="#在我来XXX面试的时候，我已经收到其他公司的offer，之所以选择XXX，我主要从公司环境和公司氛围以及面试者-祝经理-来判定的。我当初既然选择了这里，我就会一如既往的在这里继续学习下去。我对公司的第一印象还是不错的，那么在这里不仅可以得到技能上的提升，还能收获身心的愉悦。" class="headerlink" title="在我来XXX面试的时候，我已经收到其他公司的offer，之所以选择XXX，我主要从公司环境和公司氛围以及面试者(祝经理)来判定的。我当初既然选择了这里，我就会一如既往的在这里继续学习下去。我对公司的第一印象还是不错的，那么在这里不仅可以得到技能上的提升，还能收获身心的愉悦。"></a>在我来XXX面试的时候，我已经收到其他公司的offer，之所以选择XXX，我主要从公司环境和公司氛围以及面试者(祝经理)来判定的。我当初既然选择了这里，我就会一如既往的在这里继续学习下去。我对公司的第一印象还是不错的，那么在这里不仅可以得到技能上的提升，还能收获身心的愉悦。</h3><h3 id="说说这一个月在公司做的事情吧，其实也没什么，每天的工作日报都已经写得很详细了。第一，主要参与了一个教育局登记系统的项目，完成了几个JS的特效，充当了几次测试，熟悉了一下后天逻辑，完成了几个小的功能点。第二，一个公司自主二次开发的工作流平台，这个主要熟悉了一下流程，不做详解，接下来的重点既是这个。第三，学会若干技术点，比如iis安装部署等若干问题，文件的共享、访问，代码调试技巧等等。还有就是，一些非技术性技能，应该叫软技能吧！待人处事啊，处理工作中的问题啊，填写报销单啊之类的。"><a href="#说说这一个月在公司做的事情吧，其实也没什么，每天的工作日报都已经写得很详细了。第一，主要参与了一个教育局登记系统的项目，完成了几个JS的特效，充当了几次测试，熟悉了一下后天逻辑，完成了几个小的功能点。第二，一个公司自主二次开发的工作流平台，这个主要熟悉了一下流程，不做详解，接下来的重点既是这个。第三，学会若干技术点，比如iis安装部署等若干问题，文件的共享、访问，代码调试技巧等等。还有就是，一些非技术性技能，应该叫软技能吧！待人处事啊，处理工作中的问题啊，填写报销单啊之类的。" class="headerlink" title="说说这一个月在公司做的事情吧，其实也没什么，每天的工作日报都已经写得很详细了。第一，主要参与了一个教育局登记系统的项目，完成了几个JS的特效，充当了几次测试，熟悉了一下后天逻辑，完成了几个小的功能点。第二，一个公司自主二次开发的工作流平台，这个主要熟悉了一下流程，不做详解，接下来的重点既是这个。第三，学会若干技术点，比如iis安装部署等若干问题，文件的共享、访问，代码调试技巧等等。还有就是，一些非技术性技能，应该叫软技能吧！待人处事啊，处理工作中的问题啊，填写报销单啊之类的。"></a>说说这一个月在公司做的事情吧，其实也没什么，每天的工作日报都已经写得很详细了。第一，主要参与了一个教育局登记系统的项目，完成了几个JS的特效，充当了几次测试，熟悉了一下后天逻辑，完成了几个小的功能点。第二，一个公司自主二次开发的工作流平台，这个主要熟悉了一下流程，不做详解，接下来的重点既是这个。第三，学会若干技术点，比如iis安装部署等若干问题，文件的共享、访问，代码调试技巧等等。还有就是，一些非技术性技能，应该叫软技能吧！待人处事啊，处理工作中的问题啊，填写报销单啊之类的。</h3><h3 id="最后就总结一下自己的不足和接下来的计划吧。工作上，有些许不足，不完美的地方。比如，在测试教育局登记系统的时候没有充分测试，有时候为了图速度，准确率不高。测试就是一个心细的活，像我这样可能会适得其反。还有比如JS效果的实现，在我本地是实现了，那么在服务器上了？在不同的浏览器上面呢？没有做好相应的兼容性，都是我的问题所在。"><a href="#最后就总结一下自己的不足和接下来的计划吧。工作上，有些许不足，不完美的地方。比如，在测试教育局登记系统的时候没有充分测试，有时候为了图速度，准确率不高。测试就是一个心细的活，像我这样可能会适得其反。还有比如JS效果的实现，在我本地是实现了，那么在服务器上了？在不同的浏览器上面呢？没有做好相应的兼容性，都是我的问题所在。" class="headerlink" title="最后就总结一下自己的不足和接下来的计划吧。工作上，有些许不足，不完美的地方。比如，在测试教育局登记系统的时候没有充分测试，有时候为了图速度，准确率不高。测试就是一个心细的活，像我这样可能会适得其反。还有比如JS效果的实现，在我本地是实现了，那么在服务器上了？在不同的浏览器上面呢？没有做好相应的兼容性，都是我的问题所在。"></a>最后就总结一下自己的不足和接下来的计划吧。工作上，有些许不足，不完美的地方。比如，在测试教育局登记系统的时候没有充分测试，有时候为了图速度，准确率不高。测试就是一个心细的活，像我这样可能会适得其反。还有比如JS效果的实现，在我本地是实现了，那么在服务器上了？在不同的浏览器上面呢？没有做好相应的兼容性，都是我的问题所在。</h3><h3 id="接下来，我首先会完成公司安排下发的任务，在完成任务的同时，考虑更多的后果，不同的情况，做好相应的测试，确保万无一失。在自己完成任务的同时，学会帮助他人。因为帮助他人就是提升自己。还有就是按照自己的学习计划每天学习，不断进步。有不懂先自己研究，研究不出来问问同事。"><a href="#接下来，我首先会完成公司安排下发的任务，在完成任务的同时，考虑更多的后果，不同的情况，做好相应的测试，确保万无一失。在自己完成任务的同时，学会帮助他人。因为帮助他人就是提升自己。还有就是按照自己的学习计划每天学习，不断进步。有不懂先自己研究，研究不出来问问同事。" class="headerlink" title="接下来，我首先会完成公司安排下发的任务，在完成任务的同时，考虑更多的后果，不同的情况，做好相应的测试，确保万无一失。在自己完成任务的同时，学会帮助他人。因为帮助他人就是提升自己。还有就是按照自己的学习计划每天学习，不断进步。有不懂先自己研究，研究不出来问问同事。"></a>接下来，我首先会完成公司安排下发的任务，在完成任务的同时，考虑更多的后果，不同的情况，做好相应的测试，确保万无一失。在自己完成任务的同时，学会帮助他人。因为帮助他人就是提升自己。还有就是按照自己的学习计划每天学习，不断进步。有不懂先自己研究，研究不出来问问同事。</h3><h3 id="希望接下来的日子，能够共同成长进步！"><a href="#希望接下来的日子，能够共同成长进步！" class="headerlink" title="希望接下来的日子，能够共同成长进步！"></a>希望接下来的日子，能够共同成长进步！</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;今天是2016年5月18日，时间过得真快，自上个月18号到今天来公司刚好一个月。这一个月的学习生活，让我学到了很多，不管是技术上还是生活阅历上都得到了很大的提升。&quot;&gt;&lt;a href=&quot;#今天是2016年5月18日，时间过得真快，自上个月18号到今天来公司刚好一个月。这一个月的学习生活，让我学到了很多，不管是技术上还是生活阅历上都得到了很大的提升。&quot; class=&quot;headerlink&quot; title=&quot;今天是2016年5月18日，时间过得真快，自上个月18号到今天来公司刚好一个月。这一个月的学习生活，让我学到了很多，不管是技术上还是生活阅历上都得到了很大的提升。&quot;&gt;&lt;/a&gt;今天是2016年5月18日，时间过得真快，自上个月18号到今天来公司刚好一个月。这一个月的学习生活，让我学到了很多，不管是技术上还是生活阅历上都得到了很大的提升。&lt;/h3&gt;&lt;h3 id=&quot;在公司，和大家相处的都很融洽，大家一起吃饭，一起加班，一起讨论技术。在团队中，有高学历，有低学历，但是大家并不会因为学历的原因而疏远。刚进公司什么都不懂，慢慢的适应了现有的环境，每天上班下班加班，乐此不疲。&quot;&gt;&lt;a href=&quot;#在公司，和大家相处的都很融洽，大家一起吃饭，一起加班，一起讨论技术。在团队中，有高学历，有低学历，但是大家并不会因为学历的原因而疏远。刚进公司什么都不懂，慢慢的适应了现有的环境，每天上班下班加班，乐此不疲。&quot; class=&quot;headerlink&quot; title=&quot;在公司，和大家相处的都很融洽，大家一起吃饭，一起加班，一起讨论技术。在团队中，有高学历，有低学历，但是大家并不会因为学历的原因而疏远。刚进公司什么都不懂，慢慢的适应了现有的环境，每天上班下班加班，乐此不疲。&quot;&gt;&lt;/a&gt;在公司，和大家相处的都很融洽，大家一起吃饭，一起加班，一起讨论技术。在团队中，有高学历，有低学历，但是大家并不会因为学历的原因而疏远。刚进公司什么都不懂，慢慢的适应了现有的环境，每天上班下班加班，乐此不疲。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="实习感受" scheme="http://xj8c.cc/tags/%E5%AE%9E%E4%B9%A0%E6%84%9F%E5%8F%97/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET知识点面试篇</title>
    <link href="http://xj8c.cc/2016/04/16/asp.net-knowledge-point-interview/"/>
    <id>http://xj8c.cc/2016/04/16/asp.net-knowledge-point-interview/</id>
    <published>2016-04-16T09:13:19.000Z</published>
    <updated>2017-05-26T06:29:50.012Z</updated>
    
    <content type="html"><![CDATA[<h2 id="列举ASP-NET页面之间传递值的几种方式？"><a href="#列举ASP-NET页面之间传递值的几种方式？" class="headerlink" title="列举ASP.NET页面之间传递值的几种方式？"></a>列举ASP.NET页面之间传递值的几种方式？</h2><h3 id="1，使用QueryString，如：…Test-id-1-Redirect"><a href="#1，使用QueryString，如：…Test-id-1-Redirect" class="headerlink" title="1，使用QueryString，如：…Test?id=1 Redirect().."></a>1，使用QueryString，如：…Test?id=1 Redirect()..</h3><h3 id="2，使用Session变量"><a href="#2，使用Session变量" class="headerlink" title="2，使用Session变量"></a>2，使用Session变量</h3><h3 id="3，使用Server-Transfer"><a href="#3，使用Server-Transfer" class="headerlink" title="3，使用Server.Transfer"></a>3，使用Server.Transfer</h3><h3 id="4，Cookie传值"><a href="#4，Cookie传值" class="headerlink" title="4，Cookie传值"></a>4，Cookie传值</h3><a id="more"></a>
<h2 id="什么是code-Behind技术"><a href="#什么是code-Behind技术" class="headerlink" title="什么是code-Behind技术"></a>什么是code-Behind技术</h2><h3 id="就是代码隐藏，在ASP-NET中通过ASPX页面指向cs文件的方法实现显示逻辑和处理逻辑的分离，这样有助于web应用程序的创建。比如分工，美工和编程的可以各干各的，不用再像以前asp那样代码和HTML代码混在一起，难以维护。"><a href="#就是代码隐藏，在ASP-NET中通过ASPX页面指向cs文件的方法实现显示逻辑和处理逻辑的分离，这样有助于web应用程序的创建。比如分工，美工和编程的可以各干各的，不用再像以前asp那样代码和HTML代码混在一起，难以维护。" class="headerlink" title="就是代码隐藏，在ASP.NET中通过ASPX页面指向cs文件的方法实现显示逻辑和处理逻辑的分离，这样有助于web应用程序的创建。比如分工，美工和编程的可以各干各的，不用再像以前asp那样代码和HTML代码混在一起，难以维护。"></a>就是代码隐藏，在ASP.NET中通过ASPX页面指向cs文件的方法实现显示逻辑和处理逻辑的分离，这样有助于web应用程序的创建。比如分工，美工和编程的可以各干各的，不用再像以前asp那样代码和HTML代码混在一起，难以维护。</h3><h2 id="请解释ASP-NET中的web页面与其隐藏类之间的关系"><a href="#请解释ASP-NET中的web页面与其隐藏类之间的关系" class="headerlink" title="请解释ASP.NET中的web页面与其隐藏类之间的关系"></a>请解释ASP.NET中的web页面与其隐藏类之间的关系</h2><h3 id="一个ASP-NET页面一般都应对一个隐藏类，一般都在ASP-NET页面的声明中指定了隐藏类例如一个页面Test-aspx的页面声明如下："><a href="#一个ASP-NET页面一般都应对一个隐藏类，一般都在ASP-NET页面的声明中指定了隐藏类例如一个页面Test-aspx的页面声明如下：" class="headerlink" title="一个ASP.NET页面一般都应对一个隐藏类，一般都在ASP.NET页面的声明中指定了隐藏类例如一个页面Test.aspx的页面声明如下："></a>一个ASP.NET页面一般都应对一个隐藏类，一般都在ASP.NET页面的声明中指定了隐藏类例如一个页面Test.aspx的页面声明如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%@ Page language=&quot;c#&quot; Codebehind=&quot;Test.aspx.cs&quot; AutoEventWireup=&quot;false&quot; Inherits=&quot;T1.Test&quot; %&gt;</div></pre></td></tr></table></figure>
<h3 id="Codebehind-”Test-aspx-cs”表明经编译此页面时使用哪一个代码文件"><a href="#Codebehind-”Test-aspx-cs”表明经编译此页面时使用哪一个代码文件" class="headerlink" title="Codebehind=”Test.aspx.cs”表明经编译此页面时使用哪一个代码文件"></a>Codebehind=”Test.aspx.cs”表明经编译此页面时使用哪一个代码文件</h3><h3 id="Inherits-”T1-Test”表示运行时使用哪一个隐藏类"><a href="#Inherits-”T1-Test”表示运行时使用哪一个隐藏类" class="headerlink" title="Inherits=”T1.Test”表示运行时使用哪一个隐藏类"></a>Inherits=”T1.Test”表示运行时使用哪一个隐藏类</h3><h3 id="aspx页面会编译生成一个类，这个类从隐藏类继承"><a href="#aspx页面会编译生成一个类，这个类从隐藏类继承" class="headerlink" title="aspx页面会编译生成一个类，这个类从隐藏类继承"></a>aspx页面会编译生成一个类，这个类从隐藏类继承</h3><h2 id="通过超链接怎样传递中文参数？"><a href="#通过超链接怎样传递中文参数？" class="headerlink" title="通过超链接怎样传递中文参数？"></a>通过超链接怎样传递中文参数？</h2><h3 id="用URL编码，通过QueryString传递，用urlencode编码，urldecode解码"><a href="#用URL编码，通过QueryString传递，用urlencode编码，urldecode解码" class="headerlink" title="用URL编码，通过QueryString传递，用urlencode编码，urldecode解码"></a>用URL编码，通过QueryString传递，用urlencode编码，urldecode解码</h3><h2 id="Server-Transfer和Response-Redirect的区别是什么？"><a href="#Server-Transfer和Response-Redirect的区别是什么？" class="headerlink" title="Server.Transfer和Response.Redirect的区别是什么？"></a>Server.Transfer和Response.Redirect的区别是什么？</h2><h3 id="Server-Transfer仅是服务器中控制权的转向，在客户端浏览器地址栏中不会显示转向后的地址；Response-Redirect则是完全的跳转，浏览器将会得到跳转的地址，并重新发送请求链接。这样，从浏览器的地址栏中看到跳转后的链接地址。"><a href="#Server-Transfer仅是服务器中控制权的转向，在客户端浏览器地址栏中不会显示转向后的地址；Response-Redirect则是完全的跳转，浏览器将会得到跳转的地址，并重新发送请求链接。这样，从浏览器的地址栏中看到跳转后的链接地址。" class="headerlink" title="Server.Transfer仅是服务器中控制权的转向，在客户端浏览器地址栏中不会显示转向后的地址；Response.Redirect则是完全的跳转，浏览器将会得到跳转的地址，并重新发送请求链接。这样，从浏览器的地址栏中看到跳转后的链接地址。"></a>Server.Transfer仅是服务器中控制权的转向，在客户端浏览器地址栏中不会显示转向后的地址；Response.Redirect则是完全的跳转，浏览器将会得到跳转的地址，并重新发送请求链接。这样，从浏览器的地址栏中看到跳转后的链接地址。</h3><h3 id="Server-Transfer是服务器请求资源，服务器直接访问目标地址的URL，把那个URL的相应内容读取过来，然后把这些内容再发给浏览器，浏览器根本不知道服务器发送的内容是从哪里来的，所以它的地址栏还是原来的地址。这个过程中浏览器和web服务器之间经过一次交互。"><a href="#Server-Transfer是服务器请求资源，服务器直接访问目标地址的URL，把那个URL的相应内容读取过来，然后把这些内容再发给浏览器，浏览器根本不知道服务器发送的内容是从哪里来的，所以它的地址栏还是原来的地址。这个过程中浏览器和web服务器之间经过一次交互。" class="headerlink" title="Server.Transfer是服务器请求资源，服务器直接访问目标地址的URL，把那个URL的相应内容读取过来，然后把这些内容再发给浏览器，浏览器根本不知道服务器发送的内容是从哪里来的，所以它的地址栏还是原来的地址。这个过程中浏览器和web服务器之间经过一次交互。"></a>Server.Transfer是服务器请求资源，服务器直接访问目标地址的URL，把那个URL的相应内容读取过来，然后把这些内容再发给浏览器，浏览器根本不知道服务器发送的内容是从哪里来的，所以它的地址栏还是原来的地址。这个过程中浏览器和web服务器之间经过一次交互。</h3><h3 id="Response-Redirect就是服务端根据逻辑，发送一个状态吗，告诉浏览器重新去请求那个地址，一般来说浏览器会用刚才请求的所有参数重新请求。这个过程中浏览器和web服务器之间经过了两次交互。"><a href="#Response-Redirect就是服务端根据逻辑，发送一个状态吗，告诉浏览器重新去请求那个地址，一般来说浏览器会用刚才请求的所有参数重新请求。这个过程中浏览器和web服务器之间经过了两次交互。" class="headerlink" title="Response.Redirect就是服务端根据逻辑，发送一个状态吗，告诉浏览器重新去请求那个地址，一般来说浏览器会用刚才请求的所有参数重新请求。这个过程中浏览器和web服务器之间经过了两次交互。"></a>Response.Redirect就是服务端根据逻辑，发送一个状态吗，告诉浏览器重新去请求那个地址，一般来说浏览器会用刚才请求的所有参数重新请求。这个过程中浏览器和web服务器之间经过了两次交互。</h3><h2 id="说出一些常用的类，接口"><a href="#说出一些常用的类，接口" class="headerlink" title="说出一些常用的类，接口"></a>说出一些常用的类，接口</h2><h3 id="常用的类：StreamReader、WebClient、Dictionary、StringBuilder、SqlConnection、FileStream、File、Regex、List"><a href="#常用的类：StreamReader、WebClient、Dictionary、StringBuilder、SqlConnection、FileStream、File、Regex、List" class="headerlink" title="常用的类：StreamReader、WebClient、Dictionary、StringBuilder、SqlConnection、FileStream、File、Regex、List"></a>常用的类：StreamReader、WebClient、Dictionary<k,v>、StringBuilder、SqlConnection、FileStream、File、Regex、List<t></t></k,v></h3><h3 id="常用的接口：IDisposable、IEnumerable、IDbConnection、IComparable、ICollection、IList、IDictionary"><a href="#常用的接口：IDisposable、IEnumerable、IDbConnection、IComparable、ICollection、IList、IDictionary" class="headerlink" title="常用的接口：IDisposable、IEnumerable、IDbConnection、IComparable、ICollection、IList、IDictionary"></a>常用的接口：IDisposable、IEnumerable、IDbConnection、IComparable、ICollection、IList、IDictionary</h3><h2 id="post、get的区别"><a href="#post、get的区别" class="headerlink" title="post、get的区别"></a>post、get的区别</h2><h3 id="get的参数会显示在浏览器地址栏中，而post的参数不会显示在浏览器地址栏中"><a href="#get的参数会显示在浏览器地址栏中，而post的参数不会显示在浏览器地址栏中" class="headerlink" title="get的参数会显示在浏览器地址栏中，而post的参数不会显示在浏览器地址栏中"></a>get的参数会显示在浏览器地址栏中，而post的参数不会显示在浏览器地址栏中</h3><h3 id="使用post提交的页面再点击刷新按钮的时候浏览器一般会提示“是否重新提交”，而get则不会"><a href="#使用post提交的页面再点击刷新按钮的时候浏览器一般会提示“是否重新提交”，而get则不会" class="headerlink" title="使用post提交的页面再点击刷新按钮的时候浏览器一般会提示“是否重新提交”，而get则不会"></a>使用post提交的页面再点击刷新按钮的时候浏览器一般会提示“是否重新提交”，而get则不会</h3><h3 id="用get的页面可以被搜索引擎抓取，而用post的则不可以"><a href="#用get的页面可以被搜索引擎抓取，而用post的则不可以" class="headerlink" title="用get的页面可以被搜索引擎抓取，而用post的则不可以"></a>用get的页面可以被搜索引擎抓取，而用post的则不可以</h3><h3 id="用post可以进行文件的提交，而用get则不可以"><a href="#用post可以进行文件的提交，而用get则不可以" class="headerlink" title="用post可以进行文件的提交，而用get则不可以"></a>用post可以进行文件的提交，而用get则不可以</h3><h3 id="用post可以提交的数据量非常大，而用get可以提交的数据量则非常小-2K-，受限于网页地址的长度。"><a href="#用post可以提交的数据量非常大，而用get可以提交的数据量则非常小-2K-，受限于网页地址的长度。" class="headerlink" title="用post可以提交的数据量非常大，而用get可以提交的数据量则非常小(2K)，受限于网页地址的长度。"></a>用post可以提交的数据量非常大，而用get可以提交的数据量则非常小(2K)，受限于网页地址的长度。</h3><h2 id="Application、Cookie和Session两种会话有什么不同？"><a href="#Application、Cookie和Session两种会话有什么不同？" class="headerlink" title="Application、Cookie和Session两种会话有什么不同？"></a>Application、Cookie和Session两种会话有什么不同？</h2><h3 id="Application是用来存取整个网站全局的信息，而Session是用来存取与具体某个访问者关联的信息。Cookie是保存在客户端的，机密信息不能保存在Cookie中，只能放小数据；Session是保存在服务器端的，比较安全，可以放大数据。"><a href="#Application是用来存取整个网站全局的信息，而Session是用来存取与具体某个访问者关联的信息。Cookie是保存在客户端的，机密信息不能保存在Cookie中，只能放小数据；Session是保存在服务器端的，比较安全，可以放大数据。" class="headerlink" title="Application是用来存取整个网站全局的信息，而Session是用来存取与具体某个访问者关联的信息。Cookie是保存在客户端的，机密信息不能保存在Cookie中，只能放小数据；Session是保存在服务器端的，比较安全，可以放大数据。"></a>Application是用来存取整个网站全局的信息，而Session是用来存取与具体某个访问者关联的信息。Cookie是保存在客户端的，机密信息不能保存在Cookie中，只能放小数据；Session是保存在服务器端的，比较安全，可以放大数据。</h3><h2 id="http状态吗各是什么意思？"><a href="#http状态吗各是什么意思？" class="headerlink" title="http状态吗各是什么意思？"></a>http状态吗各是什么意思？</h2><h3 id="302：重定向"><a href="#302：重定向" class="headerlink" title="302：重定向"></a>302：重定向</h3><h3 id="301：永久重定向"><a href="#301：永久重定向" class="headerlink" title="301：永久重定向"></a>301：永久重定向</h3><h3 id="404：页面不存在"><a href="#404：页面不存在" class="headerlink" title="404：页面不存在"></a>404：页面不存在</h3><h3 id="500：服务器内部错误"><a href="#500：服务器内部错误" class="headerlink" title="500：服务器内部错误"></a>500：服务器内部错误</h3><h2 id="Session有什么重大的BUG，微软提出了什么方法加以解决？"><a href="#Session有什么重大的BUG，微软提出了什么方法加以解决？" class="headerlink" title="Session有什么重大的BUG，微软提出了什么方法加以解决？"></a>Session有什么重大的BUG，微软提出了什么方法加以解决？</h2><h3 id="iis中有由于有进程回收机制，系统繁忙的话Session会丢失，iis重启也会造成Session丢失。这样用户就要重新登录或者重新添加信息到Session中。可以用StateServer或SqlServer数据库的方式存储Session不过这种方式比较慢，而且无法捕获Session的end事件。但是我认为这不是bug，只能说是In-Proc方式存储Session的缺陷，缺陷和bug是不一样的，In-Proc方式存储Session会由服务器来决定什么时候释放Session，这是By-Design，In-Proc方式不满足要求的话完全可以用StateServer和数据库的方式。"><a href="#iis中有由于有进程回收机制，系统繁忙的话Session会丢失，iis重启也会造成Session丢失。这样用户就要重新登录或者重新添加信息到Session中。可以用StateServer或SqlServer数据库的方式存储Session不过这种方式比较慢，而且无法捕获Session的end事件。但是我认为这不是bug，只能说是In-Proc方式存储Session的缺陷，缺陷和bug是不一样的，In-Proc方式存储Session会由服务器来决定什么时候释放Session，这是By-Design，In-Proc方式不满足要求的话完全可以用StateServer和数据库的方式。" class="headerlink" title="iis中有由于有进程回收机制，系统繁忙的话Session会丢失，iis重启也会造成Session丢失。这样用户就要重新登录或者重新添加信息到Session中。可以用StateServer或SqlServer数据库的方式存储Session不过这种方式比较慢，而且无法捕获Session的end事件。但是我认为这不是bug，只能说是In-Proc方式存储Session的缺陷，缺陷和bug是不一样的，In-Proc方式存储Session会由服务器来决定什么时候释放Session，这是By Design，In-Proc方式不满足要求的话完全可以用StateServer和数据库的方式。"></a>iis中有由于有进程回收机制，系统繁忙的话Session会丢失，iis重启也会造成Session丢失。这样用户就要重新登录或者重新添加信息到Session中。可以用StateServer或SqlServer数据库的方式存储Session不过这种方式比较慢，而且无法捕获Session的end事件。但是我认为这不是bug，只能说是In-Proc方式存储Session的缺陷，缺陷和bug是不一样的，In-Proc方式存储Session会由服务器来决定什么时候释放Session，这是By Design，In-Proc方式不满足要求的话完全可以用StateServer和数据库的方式。</h3><h3 id="StsteServer还可以解决集群Session共享的问题"><a href="#StsteServer还可以解决集群Session共享的问题" class="headerlink" title="StsteServer还可以解决集群Session共享的问题"></a>StsteServer还可以解决集群Session共享的问题</h3><h3 id="配置StateServer的方法：略"><a href="#配置StateServer的方法：略" class="headerlink" title="配置StateServer的方法：略"></a>配置StateServer的方法：略</h3><h2 id="asp-net中-lt-gt-、-lt-gt-、-lt-的区别是什么？-gt"><a href="#asp-net中-lt-gt-、-lt-gt-、-lt-的区别是什么？-gt" class="headerlink" title="asp.net中&lt;% %&gt;、&lt;% = %&gt;、&lt;% # %的区别是什么？&gt;"></a>asp.net中&lt;% %&gt;、&lt;% = %&gt;、&lt;% # %的区别是什么？&gt;</h2><h3 id="lt-gt-是执行-lt-gt-中的C-代码，-lt-gt-是将-后的表达式的值输出到Response中，-lt-gt-是数据绑定，一般用来ListView、GridView、Repeater等控件的绑定中。数据绑定分为，Eval：单向绑定和Bind：双向绑定。"><a href="#lt-gt-是执行-lt-gt-中的C-代码，-lt-gt-是将-后的表达式的值输出到Response中，-lt-gt-是数据绑定，一般用来ListView、GridView、Repeater等控件的绑定中。数据绑定分为，Eval：单向绑定和Bind：双向绑定。" class="headerlink" title="&lt;% %&gt;是执行&lt;% %&gt;中的C#代码，&lt;% = %&gt;是将=后的表达式的值输出到Response中，&lt;% # %&gt;是数据绑定，一般用来ListView、GridView、Repeater等控件的绑定中。数据绑定分为，Eval：单向绑定和Bind：双向绑定。"></a>&lt;% %&gt;是执行&lt;% %&gt;中的C#代码，&lt;% = %&gt;是将=后的表达式的值输出到Response中，&lt;% # %&gt;是数据绑定，一般用来ListView、GridView、Repeater等控件的绑定中。数据绑定分为，Eval：单向绑定和Bind：双向绑定。</h3><h2 id="asp-net中的错误机制"><a href="#asp-net中的错误机制" class="headerlink" title="asp.net中的错误机制"></a>asp.net中的错误机制</h2><h3 id="定制错误页来将显示一个友好的报错页面"><a href="#定制错误页来将显示一个友好的报错页面" class="headerlink" title="定制错误页来将显示一个友好的报错页面"></a>定制错误页来将显示一个友好的报错页面</h3><h3 id="页面中未捕捉一样会触发Page-Error，应用程序中的未捕获异常会触发"><a href="#页面中未捕捉一样会触发Page-Error，应用程序中的未捕获异常会触发" class="headerlink" title="页面中未捕捉一样会触发Page_Error，应用程序中的未捕获异常会触发"></a>页面中未捕捉一样会触发Page_Error，应用程序中的未捕获异常会触发</h3><h3 id="Application-Error。通过HttpContext-Current-Server-GetLastError-拿到未捕捉异常，记录到Log4Net日志中。"><a href="#Application-Error。通过HttpContext-Current-Server-GetLastError-拿到未捕捉异常，记录到Log4Net日志中。" class="headerlink" title="Application_Error。通过HttpContext.Current.Server.GetLastError();拿到未捕捉异常，记录到Log4Net日志中。"></a>Application_Error。通过HttpContext.Current.Server.GetLastError();拿到未捕捉异常，记录到Log4Net日志中。</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;列举ASP-NET页面之间传递值的几种方式？&quot;&gt;&lt;a href=&quot;#列举ASP-NET页面之间传递值的几种方式？&quot; class=&quot;headerlink&quot; title=&quot;列举ASP.NET页面之间传递值的几种方式？&quot;&gt;&lt;/a&gt;列举ASP.NET页面之间传递值的几种方式？&lt;/h2&gt;&lt;h3 id=&quot;1，使用QueryString，如：…Test-id-1-Redirect&quot;&gt;&lt;a href=&quot;#1，使用QueryString，如：…Test-id-1-Redirect&quot; class=&quot;headerlink&quot; title=&quot;1，使用QueryString，如：…Test?id=1 Redirect()..&quot;&gt;&lt;/a&gt;1，使用QueryString，如：…Test?id=1 Redirect()..&lt;/h3&gt;&lt;h3 id=&quot;2，使用Session变量&quot;&gt;&lt;a href=&quot;#2，使用Session变量&quot; class=&quot;headerlink&quot; title=&quot;2，使用Session变量&quot;&gt;&lt;/a&gt;2，使用Session变量&lt;/h3&gt;&lt;h3 id=&quot;3，使用Server-Transfer&quot;&gt;&lt;a href=&quot;#3，使用Server-Transfer&quot; class=&quot;headerlink&quot; title=&quot;3，使用Server.Transfer&quot;&gt;&lt;/a&gt;3，使用Server.Transfer&lt;/h3&gt;&lt;h3 id=&quot;4，Cookie传值&quot;&gt;&lt;a href=&quot;#4，Cookie传值&quot; class=&quot;headerlink&quot; title=&quot;4，Cookie传值&quot;&gt;&lt;/a&gt;4，Cookie传值&lt;/h3&gt;
    
    </summary>
    
    
      <category term="ASP.NET" scheme="http://xj8c.cc/tags/ASP-NET/"/>
    
      <category term="面试" scheme="http://xj8c.cc/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>三层架构到底是个什么玩意？</title>
    <link href="http://xj8c.cc/2016/04/08/what-is-a-three-tier-architecture/"/>
    <id>http://xj8c.cc/2016/04/08/what-is-a-three-tier-architecture/</id>
    <published>2016-04-07T16:12:44.000Z</published>
    <updated>2017-05-26T06:29:50.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="名词解释："><a href="#名词解释：" class="headerlink" title="名词解释："></a>名词解释：</h2><h3 id="架构：架构一般是针对整个系统的，并非针对某个单独的问题-单独的问题可以用模式来解决-，针对整个系统的”一个蓝图”，对系统的抽象。"><a href="#架构：架构一般是针对整个系统的，并非针对某个单独的问题-单独的问题可以用模式来解决-，针对整个系统的”一个蓝图”，对系统的抽象。" class="headerlink" title="架构：架构一般是针对整个系统的，并非针对某个单独的问题(单独的问题可以用模式来解决)，针对整个系统的”一个蓝图”，对系统的抽象。"></a><strong>架构</strong>：架构一般是针对整个系统的，并非针对某个单独的问题(单独的问题可以用模式来解决)，针对整个系统的”一个蓝图”，对系统的抽象。</h3><h3 id="模式：软件开发中遇到的一些特定问题，前任总结出来特定的经验、解决方法。"><a href="#模式：软件开发中遇到的一些特定问题，前任总结出来特定的经验、解决方法。" class="headerlink" title="模式：软件开发中遇到的一些特定问题，前任总结出来特定的经验、解决方法。"></a><strong>模式</strong>：软件开发中遇到的一些特定问题，前任总结出来特定的经验、解决方法。</h3><h3 id="框架：架构设计、模式应用的经验积累的具体代码实现，方便以后的复用。"><a href="#框架：架构设计、模式应用的经验积累的具体代码实现，方便以后的复用。" class="headerlink" title="框架：架构设计、模式应用的经验积累的具体代码实现，方便以后的复用。"></a><strong>框架</strong>：架构设计、模式应用的经验积累的具体代码实现，方便以后的复用。</h3><a id="more"></a>
<h2 id="三层："><a href="#三层：" class="headerlink" title="三层："></a>三层：</h2><h3 id="表现层UI-User-Interface-：通俗讲就是展现给用户的界面，即用户在使用一个系统的时候他的所见所得。"><a href="#表现层UI-User-Interface-：通俗讲就是展现给用户的界面，即用户在使用一个系统的时候他的所见所得。" class="headerlink" title="表现层UI(User Interface)：通俗讲就是展现给用户的界面，即用户在使用一个系统的时候他的所见所得。"></a>表现层UI(User Interface)：通俗讲就是展现给用户的界面，即用户在使用一个系统的时候他的所见所得。</h3><h3 id="业务逻辑层BLL-Business-Logic-Layer-：针对具体问题的操作，也可以说是对数据层的操作，对数据业务逻辑处理。-备注：又称领域层，常用业务规则、数据访问、合法性校验等等-。其实，逻辑层就像房屋中介，租房买房跟快捷了，但消耗的钱也跟多了。"><a href="#业务逻辑层BLL-Business-Logic-Layer-：针对具体问题的操作，也可以说是对数据层的操作，对数据业务逻辑处理。-备注：又称领域层，常用业务规则、数据访问、合法性校验等等-。其实，逻辑层就像房屋中介，租房买房跟快捷了，但消耗的钱也跟多了。" class="headerlink" title="业务逻辑层BLL(Business Logic Layer)：针对具体问题的操作，也可以说是对数据层的操作，对数据业务逻辑处理。(备注：又称领域层，常用业务规则、数据访问、合法性校验等等) 。其实，逻辑层就像房屋中介，租房买房跟快捷了，但消耗的钱也跟多了。"></a>业务逻辑层BLL(Business Logic Layer)：针对具体问题的操作，也可以说是对数据层的操作，对数据业务逻辑处理。(备注：又称领域层，常用业务规则、数据访问、合法性校验等等) 。其实，逻辑层就像房屋中介，租房买房跟快捷了，但消耗的钱也跟多了。</h3><h3 id="数据访问层DAL-Data-Access-Layer-：针对具体问题的操作，也可以说是对数据层的操作，对数据业务逻辑处理。-领域对象：crud"><a href="#数据访问层DAL-Data-Access-Layer-：针对具体问题的操作，也可以说是对数据层的操作，对数据业务逻辑处理。-领域对象：crud" class="headerlink" title="数据访问层DAL(Data Access Layer)：针对具体问题的操作，也可以说是对数据层的操作，对数据业务逻辑处理。(领域对象：crud)"></a>数据访问层DAL(Data Access Layer)：针对具体问题的操作，也可以说是对数据层的操作，对数据业务逻辑处理。(领域对象：crud)</h3><h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><h3 id="1、开发人员可以只关注整个结构中的其中某一层；"><a href="#1、开发人员可以只关注整个结构中的其中某一层；" class="headerlink" title="1、开发人员可以只关注整个结构中的其中某一层；"></a>1、开发人员可以只关注整个结构中的其中某一层；</h3><h3 id="2、可以很容易的用新的实现来替换原有层次的实现；"><a href="#2、可以很容易的用新的实现来替换原有层次的实现；" class="headerlink" title="2、可以很容易的用新的实现来替换原有层次的实现；"></a>2、可以很容易的用新的实现来替换原有层次的实现；</h3><h3 id="3、可以降低层与层之间的依赖；"><a href="#3、可以降低层与层之间的依赖；" class="headerlink" title="3、可以降低层与层之间的依赖；"></a>3、可以降低层与层之间的依赖；</h3><h3 id="4、有利于标准化；"><a href="#4、有利于标准化；" class="headerlink" title="4、有利于标准化；"></a>4、有利于标准化；</h3><h3 id="5、利于各层逻辑的复用；"><a href="#5、利于各层逻辑的复用；" class="headerlink" title="5、利于各层逻辑的复用；"></a>5、利于各层逻辑的复用；</h3><h3 id="6、结构更加的明确；"><a href="#6、结构更加的明确；" class="headerlink" title="6、结构更加的明确；"></a>6、结构更加的明确；</h3><h3 id="7、在后期维护的时候，极大地降低了维护成本和维护时间。"><a href="#7、在后期维护的时候，极大地降低了维护成本和维护时间。" class="headerlink" title="7、在后期维护的时候，极大地降低了维护成本和维护时间。"></a>7、在后期维护的时候，极大地降低了维护成本和维护时间。</h3><h2 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h2><h3 id="1、降低了系统的性能。这是不言而喻的。如果不采用分层式结构，很多业务可以直接造访数据库，以次获取相应的数据，如今却必须通过中间层来完成。；"><a href="#1、降低了系统的性能。这是不言而喻的。如果不采用分层式结构，很多业务可以直接造访数据库，以次获取相应的数据，如今却必须通过中间层来完成。；" class="headerlink" title="1、降低了系统的性能。这是不言而喻的。如果不采用分层式结构，很多业务可以直接造访数据库，以次获取相应的数据，如今却必须通过中间层来完成。；"></a>1、降低了系统的性能。这是不言而喻的。如果不采用分层式结构，很多业务可以直接造访数据库，以次获取相应的数据，如今却必须通过中间层来完成。；</h3><h3 id="2、有时会导致级联的修改。这种修改尤其体现在自上而下的方向。如果在表现层中需要增加一个功能，为保证其设计符合分层式结构，可能需要在相应的业务逻辑层和数据访问层中都增加相应的代码。；"><a href="#2、有时会导致级联的修改。这种修改尤其体现在自上而下的方向。如果在表现层中需要增加一个功能，为保证其设计符合分层式结构，可能需要在相应的业务逻辑层和数据访问层中都增加相应的代码。；" class="headerlink" title="2、有时会导致级联的修改。这种修改尤其体现在自上而下的方向。如果在表现层中需要增加一个功能，为保证其设计符合分层式结构，可能需要在相应的业务逻辑层和数据访问层中都增加相应的代码。；"></a>2、有时会导致级联的修改。这种修改尤其体现在自上而下的方向。如果在表现层中需要增加一个功能，为保证其设计符合分层式结构，可能需要在相应的业务逻辑层和数据访问层中都增加相应的代码。；</h3><h3 id="3、一定程度上增加了开发的成本。；"><a href="#3、一定程度上增加了开发的成本。；" class="headerlink" title="3、一定程度上增加了开发的成本。；"></a>3、一定程度上增加了开发的成本。；</h3><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><p>三层结构的程序不是说把项目分成DAL，BLL，WebUI三个模块就叫三层了。下面这几个问题：</p>
<h3 id="1、UILayer里面只有少量-或者没有-SQL语句或者存储过程调用，并且这些语句保证不会修改数据？"><a href="#1、UILayer里面只有少量-或者没有-SQL语句或者存储过程调用，并且这些语句保证不会修改数据？" class="headerlink" title="1、UILayer里面只有少量(或者没有)SQL语句或者存储过程调用，并且这些语句保证不会修改数据？"></a>1、UILayer里面只有少量(或者没有)SQL语句或者存储过程调用，并且这些语句保证不会修改数据？</h3><h3 id="2、如果把UILayer拿掉，你的项目还能在Interface-API的层次上提供所有功能吗？"><a href="#2、如果把UILayer拿掉，你的项目还能在Interface-API的层次上提供所有功能吗？" class="headerlink" title="2、如果把UILayer拿掉，你的项目还能在Interface/API的层次上提供所有功能吗？"></a>2、如果把UILayer拿掉，你的项目还能在Interface/API的层次上提供所有功能吗？</h3><h3 id="3、你的DAL可以移植到其他类似环境的项目吗？"><a href="#3、你的DAL可以移植到其他类似环境的项目吗？" class="headerlink" title="3、你的DAL可以移植到其他类似环境的项目吗？"></a>3、你的DAL可以移植到其他类似环境的项目吗？</h3><h3 id="4、三个模块，可以分别运行与不同的服务器吗？"><a href="#4、三个模块，可以分别运行与不同的服务器吗？" class="headerlink" title="4、三个模块，可以分别运行与不同的服务器吗？"></a>4、三个模块，可以分别运行与不同的服务器吗？</h3><p>如果不是所有答案都为YES，那么你的项目还不能算是严格意义上的三层程序。三层程序有一些需要约定遵守的规则：</p>
<h3 id="1、最关键的，UI层只能作为一个外壳，不能包含任何BizLogic的处理过程"><a href="#1、最关键的，UI层只能作为一个外壳，不能包含任何BizLogic的处理过程" class="headerlink" title="1、最关键的，UI层只能作为一个外壳，不能包含任何BizLogic的处理过程"></a>1、最关键的，UI层只能作为一个外壳，不能包含任何BizLogic的处理过程</h3><h3 id="2、设计时应该从BLL出发，而不是UI出发。BLL层在API上应该实现所有BizLogic，以面向对象的方式"><a href="#2、设计时应该从BLL出发，而不是UI出发。BLL层在API上应该实现所有BizLogic，以面向对象的方式" class="headerlink" title="2、设计时应该从BLL出发，而不是UI出发。BLL层在API上应该实现所有BizLogic，以面向对象的方式"></a>2、设计时应该从BLL出发，而不是UI出发。BLL层在API上应该实现所有BizLogic，以面向对象的方式</h3><h3 id="3、不管数据层是一个简单的SqlHelper也好，还是带有Mapping过的Classes也好，应该在一定的抽象程度上做到系统无关"><a href="#3、不管数据层是一个简单的SqlHelper也好，还是带有Mapping过的Classes也好，应该在一定的抽象程度上做到系统无关" class="headerlink" title="3、不管数据层是一个简单的SqlHelper也好，还是带有Mapping过的Classes也好，应该在一定的抽象程度上做到系统无关"></a>3、不管数据层是一个简单的SqlHelper也好，还是带有Mapping过的Classes也好，应该在一定的抽象程度上做到系统无关</h3><h3 id="4、不管是用COM-Enterprise-Server-，还是Remoting，还是WebService之类的远程对象技术，不管部署的时候是不是真的分别部署到不同的服务器上，最起码在涉及的时候要做这样的考虑，更远的，还得考虑多台服务器通过负载均衡做集群。"><a href="#4、不管是用COM-Enterprise-Server-，还是Remoting，还是WebService之类的远程对象技术，不管部署的时候是不是真的分别部署到不同的服务器上，最起码在涉及的时候要做这样的考虑，更远的，还得考虑多台服务器通过负载均衡做集群。" class="headerlink" title="4、不管是用COM+( Enterprise Server )，还是Remoting，还是WebService之类的远程对象技术，不管部署的时候是不是真的分别部署到不同的服务器上，最起码在涉及的时候要做这样的考虑，更远的，还得考虑多台服务器通过负载均衡做集群。"></a>4、不管是用COM+( Enterprise Server )，还是Remoting，还是WebService之类的远程对象技术，不管部署的时候是不是真的分别部署到不同的服务器上，最起码在涉及的时候要做这样的考虑，更远的，还得考虑多台服务器通过负载均衡做集群。</h3><p>所以考虑一个项目是不是应该应用三层/多层设计时，先得考虑下是不是真的需要？实际上大部分程序就开个WebApplication就足够了，完全没必要做的这么复杂。而多层架构，是用于解决真正复杂的项目需求的。</p>
<h2 id="三层与MVC的区别"><a href="#三层与MVC的区别" class="headerlink" title="三层与MVC的区别"></a>三层与MVC的区别</h2><h3 id="同样是架构级别的，它们有什么相同点和不同点呢？这篇文章讨论一下它们的异同点。希望能帮助读者理解其中的玄机。"><a href="#同样是架构级别的，它们有什么相同点和不同点呢？这篇文章讨论一下它们的异同点。希望能帮助读者理解其中的玄机。" class="headerlink" title="同样是架构级别的，它们有什么相同点和不同点呢？这篇文章讨论一下它们的异同点。希望能帮助读者理解其中的玄机。"></a>同样是架构级别的，它们有什么相同点和不同点呢？这篇文章讨论一下它们的异同点。希望能帮助读者理解其中的玄机。</h3><h3 id="其实它们相同的地方在于他们都有一个表现层。"><a href="#其实它们相同的地方在于他们都有一个表现层。" class="headerlink" title="其实它们相同的地方在于他们都有一个表现层。"></a>其实它们相同的地方在于他们都有一个表现层。</h3><h3 id="但是他们不同的地方在于其他的两个层。"><a href="#但是他们不同的地方在于其他的两个层。" class="headerlink" title="但是他们不同的地方在于其他的两个层。"></a>但是他们不同的地方在于其他的两个层。</h3><h3 id="首先先解释一下MVC。V即View-是视图的意思。C即Controler-是控制器的意思。而M即Model，是模型的意思。这三个里-最不容易理解的应该是Model-就是什么是Model，而为什么叫Model。我先不说为什么叫Model，先解释Controler。"><a href="#首先先解释一下MVC。V即View-是视图的意思。C即Controler-是控制器的意思。而M即Model，是模型的意思。这三个里-最不容易理解的应该是Model-就是什么是Model，而为什么叫Model。我先不说为什么叫Model，先解释Controler。" class="headerlink" title="首先先解释一下MVC。V即View.是视图的意思。C即Controler.是控制器的意思。而M即Model，是模型的意思。这三个里.最不容易理解的应该是Model.就是什么是Model，而为什么叫Model。我先不说为什么叫Model，先解释Controler。"></a>首先先解释一下MVC。V即View.是视图的意思。C即Controler.是控制器的意思。而M即Model，是模型的意思。这三个里.最不容易理解的应该是Model.就是什么是Model，而为什么叫Model。我先不说为什么叫Model，先解释Controler。</h3><h3 id="Controller是控制器的意思，所谓控制器，就是将用户请求转发给模型层，经过处理后把结果返回到界面展现的一个中间层，那么Controler到底管什么工作呢？先不说-先来看下在Java-Web中这三个层一般的定义，一般在Java-Web里，JSP充当V，Servlet充当C-JavaBean充当M，这里的Servlet管什么工作呢？接受输入，转到Model层去处理，处理结果保存后转发到JSP，然后展现数据。所以它的功能就是控制器的基本功能，它就管转发，在V和M之间转来转去。"><a href="#Controller是控制器的意思，所谓控制器，就是将用户请求转发给模型层，经过处理后把结果返回到界面展现的一个中间层，那么Controler到底管什么工作呢？先不说-先来看下在Java-Web中这三个层一般的定义，一般在Java-Web里，JSP充当V，Servlet充当C-JavaBean充当M，这里的Servlet管什么工作呢？接受输入，转到Model层去处理，处理结果保存后转发到JSP，然后展现数据。所以它的功能就是控制器的基本功能，它就管转发，在V和M之间转来转去。" class="headerlink" title="Controller是控制器的意思，所谓控制器，就是将用户请求转发给模型层，经过处理后把结果返回到界面展现的一个中间层，那么Controler到底管什么工作呢？先不说.先来看下在Java Web中这三个层一般的定义，一般在Java Web里，JSP充当V，Servlet充当C,JavaBean充当M，这里的Servlet管什么工作呢？接受输入，转到Model层去处理，处理结果保存后转发到JSP，然后展现数据。所以它的功能就是控制器的基本功能，它就管转发，在V和M之间转来转去。"></a>Controller是控制器的意思，所谓控制器，就是将用户请求转发给模型层，经过处理后把结果返回到界面展现的一个中间层，那么Controler到底管什么工作呢？先不说.先来看下在Java Web中这三个层一般的定义，一般在Java Web里，JSP充当V，Servlet充当C,JavaBean充当M，这里的Servlet管什么工作呢？接受输入，转到Model层去处理，处理结果保存后转发到JSP，然后展现数据。所以它的功能就是控制器的基本功能，它就管转发，在V和M之间转来转去。</h3><h3 id="再来说说M，即Model，在Java-Web里说的是JavaBean，我认识的很多人都把JavaBean误认为是实体类，其实JavaBean有比实体类更丰富的定义，在JavaBean中除了其属性和字段，还可以有行为及其事件，JavaBean可以理解为普通Java对象。Java普通对象，就是符合Java规范的所有对象，这和实体类完全是两回事。所以，我认为在MVC中。业务逻辑和数据访问应该放在Model层，也就是V负责展示数据，Controler除了转发不做业务逻辑。真正的逻辑事务，数据访问，甚至算法都放到Model去。"><a href="#再来说说M，即Model，在Java-Web里说的是JavaBean，我认识的很多人都把JavaBean误认为是实体类，其实JavaBean有比实体类更丰富的定义，在JavaBean中除了其属性和字段，还可以有行为及其事件，JavaBean可以理解为普通Java对象。Java普通对象，就是符合Java规范的所有对象，这和实体类完全是两回事。所以，我认为在MVC中。业务逻辑和数据访问应该放在Model层，也就是V负责展示数据，Controler除了转发不做业务逻辑。真正的逻辑事务，数据访问，甚至算法都放到Model去。" class="headerlink" title="再来说说M，即Model，在Java Web里说的是JavaBean，我认识的很多人都把JavaBean误认为是实体类，其实JavaBean有比实体类更丰富的定义，在JavaBean中除了其属性和字段，还可以有行为及其事件，JavaBean可以理解为普通Java对象。Java普通对象，就是符合Java规范的所有对象，这和实体类完全是两回事。所以，我认为在MVC中。业务逻辑和数据访问应该放在Model层，也就是V负责展示数据，Controler除了转发不做业务逻辑。真正的逻辑事务，数据访问，甚至算法都放到Model去。"></a>再来说说M，即Model，在Java Web里说的是JavaBean，我认识的很多人都把JavaBean误认为是实体类，其实JavaBean有比实体类更丰富的定义，在JavaBean中除了其属性和字段，还可以有行为及其事件，JavaBean可以理解为普通Java对象。Java普通对象，就是符合Java规范的所有对象，这和实体类完全是两回事。所以，我认为在MVC中。业务逻辑和数据访问应该放在Model层，也就是V负责展示数据，Controler除了转发不做业务逻辑。真正的逻辑事务，数据访问，甚至算法都放到Model去。</h3><h3 id="再说三层架构。三层其实很好理解，界面，业务，数据访问，就这三个，从字面都可以理解出它们的意思。我要说的是它和MVC的区别。在三层架构中没有定义Controler的概念。这是我认为最不同的地方。而MVC也没有把业务的逻辑访问看成两个层，这是采用三层架构或MVC搭建程序最主要的区别。"><a href="#再说三层架构。三层其实很好理解，界面，业务，数据访问，就这三个，从字面都可以理解出它们的意思。我要说的是它和MVC的区别。在三层架构中没有定义Controler的概念。这是我认为最不同的地方。而MVC也没有把业务的逻辑访问看成两个层，这是采用三层架构或MVC搭建程序最主要的区别。" class="headerlink" title="再说三层架构。三层其实很好理解，界面，业务，数据访问，就这三个，从字面都可以理解出它们的意思。我要说的是它和MVC的区别。在三层架构中没有定义Controler的概念。这是我认为最不同的地方。而MVC也没有把业务的逻辑访问看成两个层，这是采用三层架构或MVC搭建程序最主要的区别。"></a>再说三层架构。三层其实很好理解，界面，业务，数据访问，就这三个，从字面都可以理解出它们的意思。我要说的是它和MVC的区别。在三层架构中没有定义Controler的概念。这是我认为最不同的地方。而MVC也没有把业务的逻辑访问看成两个层，这是采用三层架构或MVC搭建程序最主要的区别。</h3><h3 id="当然了。在三层中也提到了Model，但是三层架构中Model的概念与MVC中Model的概念是不一样的，“三层”中典型的Model层是已实体类构成的，而MVC里，则是由业务逻辑与访问数据组成的。不一样的概念。虽然名字一样。"><a href="#当然了。在三层中也提到了Model，但是三层架构中Model的概念与MVC中Model的概念是不一样的，“三层”中典型的Model层是已实体类构成的，而MVC里，则是由业务逻辑与访问数据组成的。不一样的概念。虽然名字一样。" class="headerlink" title="当然了。在三层中也提到了Model，但是三层架构中Model的概念与MVC中Model的概念是不一样的，“三层”中典型的Model层是已实体类构成的，而MVC里，则是由业务逻辑与访问数据组成的。不一样的概念。虽然名字一样。"></a>当然了。在三层中也提到了Model，但是三层架构中Model的概念与MVC中Model的概念是不一样的，“三层”中典型的Model层是已实体类构成的，而MVC里，则是由业务逻辑与访问数据组成的。不一样的概念。虽然名字一样。</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;名词解释：&quot;&gt;&lt;a href=&quot;#名词解释：&quot; class=&quot;headerlink&quot; title=&quot;名词解释：&quot;&gt;&lt;/a&gt;名词解释：&lt;/h2&gt;&lt;h3 id=&quot;架构：架构一般是针对整个系统的，并非针对某个单独的问题-单独的问题可以用模式来解决-，针对整个系统的”一个蓝图”，对系统的抽象。&quot;&gt;&lt;a href=&quot;#架构：架构一般是针对整个系统的，并非针对某个单独的问题-单独的问题可以用模式来解决-，针对整个系统的”一个蓝图”，对系统的抽象。&quot; class=&quot;headerlink&quot; title=&quot;架构：架构一般是针对整个系统的，并非针对某个单独的问题(单独的问题可以用模式来解决)，针对整个系统的”一个蓝图”，对系统的抽象。&quot;&gt;&lt;/a&gt;&lt;strong&gt;架构&lt;/strong&gt;：架构一般是针对整个系统的，并非针对某个单独的问题(单独的问题可以用模式来解决)，针对整个系统的”一个蓝图”，对系统的抽象。&lt;/h3&gt;&lt;h3 id=&quot;模式：软件开发中遇到的一些特定问题，前任总结出来特定的经验、解决方法。&quot;&gt;&lt;a href=&quot;#模式：软件开发中遇到的一些特定问题，前任总结出来特定的经验、解决方法。&quot; class=&quot;headerlink&quot; title=&quot;模式：软件开发中遇到的一些特定问题，前任总结出来特定的经验、解决方法。&quot;&gt;&lt;/a&gt;&lt;strong&gt;模式&lt;/strong&gt;：软件开发中遇到的一些特定问题，前任总结出来特定的经验、解决方法。&lt;/h3&gt;&lt;h3 id=&quot;框架：架构设计、模式应用的经验积累的具体代码实现，方便以后的复用。&quot;&gt;&lt;a href=&quot;#框架：架构设计、模式应用的经验积累的具体代码实现，方便以后的复用。&quot; class=&quot;headerlink&quot; title=&quot;框架：架构设计、模式应用的经验积累的具体代码实现，方便以后的复用。&quot;&gt;&lt;/a&gt;&lt;strong&gt;框架&lt;/strong&gt;：架构设计、模式应用的经验积累的具体代码实现，方便以后的复用。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="ASP.NET" scheme="http://xj8c.cc/tags/ASP-NET/"/>
    
      <category term="三层架构" scheme="http://xj8c.cc/tags/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>ADO.NET中的五个主要对象？</title>
    <link href="http://xj8c.cc/2016/04/07/five-main-objects-in-dotnet/"/>
    <id>http://xj8c.cc/2016/04/07/five-main-objects-in-dotnet/</id>
    <published>2016-04-07T15:34:02.000Z</published>
    <updated>2017-05-26T06:29:50.350Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3><p>主要是开启程序和数据库之间的连接，没有利用连接对象将数据库打开，是无法从数据库中取得数据的。</p>
<p>Close和Dispose的区别，Close以后还可以Open，Dispose以后则不能再用。</p>
<h3 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h3><p>主要可以用来对数据库发出一些指令，例如可以对数据库下达增、删、改、查数据等指令，以及调用存在数据库中的存储过程等。</p>
<p>这个对象是架构在Connection对象上，也就是Command对象是透过连接到数据源。</p>
<h3 id="DataAdapter"><a href="#DataAdapter" class="headerlink" title="DataAdapter"></a>DataAdapter</h3><p>主要是在数据源以及DataSet之间执行数据传输的工作，它可以透过Command对象下达命令后，并将取得的数据放入DataSet对象中。</p>
<p>这个对象是架构在Command对象上，并提供了许多配合DataSet使用的功能。<br><a id="more"></a></p>
<h3 id="DataSet"><a href="#DataSet" class="headerlink" title="DataSet"></a>DataSet</h3><p>这个对象可以视为一个暂存区(Cache)，可以把从数据中所查询到的数据保留起来，甚至可以将整个数据库显示出来，DataSet是存在内存中。</p>
<p>DataSet的能力不只是可以存储多个Table而已，还可以透过DataAdapter对象取得一些例如主键等的数据表结构，并可以记录数据表间的关联。</p>
<p>DataSet对象可以说是ADO.NET中重量级的对象，这个对象架构在DataAdapter对象上，本身不具备和数据源沟通的能力；也就是说我们是将DataAdapter对象当做DataSet对象以及数据源传输数据的桥梁。</p>
<p>DataSet包含若干DataTable、DataTable包含若干DataRow。</p>
<h3 id="DataReader"><a href="#DataReader" class="headerlink" title="DataReader"></a>DataReader</h3><p>当我们只需要循序的读取数据而不需要其它操作时，可以使用DataReader对象。</p>
<p>DataReader对象只是一次一笔向下循序的读取数据源中的数据，这些数据存在数据库服务器中，而不是一次性加载到程序的内存中，只能通过游标读取当前行的数据，而且这些数据是只读的，并不允许做其它的操作。</p>
<p>因为DataReader字啊读取数据的时候限制了每次只读取一笔，而且只能只读，所以使用起来不但节省资源而且效率很好。</p>
<p>使用DataReader对象除了效率较好之外，因为不能把数据全部传回，故可以降低网络的负载。</p>
<p>ADO.NET使用Connection对象来连接数据库，使用Command或DataAdapter，然后再使用取得的DataReader或DataAdapter对象操作数据结果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Connection&quot;&gt;&lt;a href=&quot;#Connection&quot; class=&quot;headerlink&quot; title=&quot;Connection&quot;&gt;&lt;/a&gt;Connection&lt;/h3&gt;&lt;p&gt;主要是开启程序和数据库之间的连接，没有利用连接对象将数据库打开，是无法从数据库中取得数据的。&lt;/p&gt;
&lt;p&gt;Close和Dispose的区别，Close以后还可以Open，Dispose以后则不能再用。&lt;/p&gt;
&lt;h3 id=&quot;Command&quot;&gt;&lt;a href=&quot;#Command&quot; class=&quot;headerlink&quot; title=&quot;Command&quot;&gt;&lt;/a&gt;Command&lt;/h3&gt;&lt;p&gt;主要可以用来对数据库发出一些指令，例如可以对数据库下达增、删、改、查数据等指令，以及调用存在数据库中的存储过程等。&lt;/p&gt;
&lt;p&gt;这个对象是架构在Connection对象上，也就是Command对象是透过连接到数据源。&lt;/p&gt;
&lt;h3 id=&quot;DataAdapter&quot;&gt;&lt;a href=&quot;#DataAdapter&quot; class=&quot;headerlink&quot; title=&quot;DataAdapter&quot;&gt;&lt;/a&gt;DataAdapter&lt;/h3&gt;&lt;p&gt;主要是在数据源以及DataSet之间执行数据传输的工作，它可以透过Command对象下达命令后，并将取得的数据放入DataSet对象中。&lt;/p&gt;
&lt;p&gt;这个对象是架构在Command对象上，并提供了许多配合DataSet使用的功能。&lt;br&gt;
    
    </summary>
    
    
      <category term="ASP.NET" scheme="http://xj8c.cc/tags/ASP-NET/"/>
    
      <category term="C#" scheme="http://xj8c.cc/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>一个学渣的逆袭</title>
    <link href="http://xj8c.cc/2015/12/10/the-students-with-poor-grades-reversed/"/>
    <id>http://xj8c.cc/2015/12/10/the-students-with-poor-grades-reversed/</id>
    <published>2015-12-10T08:05:19.000Z</published>
    <updated>2017-05-26T06:29:50.551Z</updated>
    
    <content type="html"><![CDATA[<h3 id="周一上午一般是我一周最忙碌的时间段，要处理积压的邮件，Review各组的开发计划，安排后续工作，查看业务线的支持请求……这时候电话响了，接通后发现，是很久不见的一位老友兼发小，权且称之为M。"><a href="#周一上午一般是我一周最忙碌的时间段，要处理积压的邮件，Review各组的开发计划，安排后续工作，查看业务线的支持请求……这时候电话响了，接通后发现，是很久不见的一位老友兼发小，权且称之为M。" class="headerlink" title="周一上午一般是我一周最忙碌的时间段，要处理积压的邮件，Review各组的开发计划，安排后续工作，查看业务线的支持请求……这时候电话响了，接通后发现，是很久不见的一位老友兼发小，权且称之为M。"></a>周一上午一般是我一周最忙碌的时间段，要处理积压的邮件，Review各组的开发计划，安排后续工作，查看业务线的支持请求……这时候电话响了，接通后发现，是很久不见的一位老友兼发小，权且称之为M。</h3><h3 id="M和我是高中同学，从高中到大学时期我们经常厮混在一起，工作后因为涉足的领域不同，联系渐渐变少，但是每年总能找时间聚聚，或者打一通电话天南海北地聊。今年还没聚过，突然接到电话我多少有些吃惊。老M常常游走在幽暗的森林里，工作中好事坏事都能碰到，时间久了，戾气渐盛，有时候需要和我这样的正义化身聊聊天，获取一些正能量，才能勉力支撑他继续过个一年半载，所以我以为他遇到什么麻烦了。"><a href="#M和我是高中同学，从高中到大学时期我们经常厮混在一起，工作后因为涉足的领域不同，联系渐渐变少，但是每年总能找时间聚聚，或者打一通电话天南海北地聊。今年还没聚过，突然接到电话我多少有些吃惊。老M常常游走在幽暗的森林里，工作中好事坏事都能碰到，时间久了，戾气渐盛，有时候需要和我这样的正义化身聊聊天，获取一些正能量，才能勉力支撑他继续过个一年半载，所以我以为他遇到什么麻烦了。" class="headerlink" title="M和我是高中同学，从高中到大学时期我们经常厮混在一起，工作后因为涉足的领域不同，联系渐渐变少，但是每年总能找时间聚聚，或者打一通电话天南海北地聊。今年还没聚过，突然接到电话我多少有些吃惊。老M常常游走在幽暗的森林里，工作中好事坏事都能碰到，时间久了，戾气渐盛，有时候需要和我这样的正义化身聊聊天，获取一些正能量，才能勉力支撑他继续过个一年半载，所以我以为他遇到什么麻烦了。"></a>M和我是高中同学，从高中到大学时期我们经常厮混在一起，工作后因为涉足的领域不同，联系渐渐变少，但是每年总能找时间聚聚，或者打一通电话天南海北地聊。今年还没聚过，突然接到电话我多少有些吃惊。老M常常游走在幽暗的森林里，工作中好事坏事都能碰到，时间久了，戾气渐盛，有时候需要和我这样的正义化身聊聊天，获取一些正能量，才能勉力支撑他继续过个一年半载，所以我以为他遇到什么麻烦了。</h3><h3 id="结果伊说：昨晚梦到你了，突然变得伤感，于是打个电话，看看你这个老小子是否还在地球上活蹦乱跳。"><a href="#结果伊说：昨晚梦到你了，突然变得伤感，于是打个电话，看看你这个老小子是否还在地球上活蹦乱跳。" class="headerlink" title="结果伊说：昨晚梦到你了，突然变得伤感，于是打个电话，看看你这个老小子是否还在地球上活蹦乱跳。"></a>结果伊说：昨晚梦到你了，突然变得伤感，于是打个电话，看看你这个老小子是否还在地球上活蹦乱跳。</h3><a id="more"></a>
<h3 id="原来如此。"><a href="#原来如此。" class="headerlink" title="原来如此。"></a>原来如此。</h3><h3 id="于是我们在电话里互相说了一些“你现在过得咋样”、“你的公司还没倒闭吧”、“老婆是不是原配”、“孩子是不是你的”之类的问候语，互道郑重之后挂了电话。我陷入了深深的思考，并想到了这个题目，“一个学渣的逆袭”。"><a href="#于是我们在电话里互相说了一些“你现在过得咋样”、“你的公司还没倒闭吧”、“老婆是不是原配”、“孩子是不是你的”之类的问候语，互道郑重之后挂了电话。我陷入了深深的思考，并想到了这个题目，“一个学渣的逆袭”。" class="headerlink" title="于是我们在电话里互相说了一些“你现在过得咋样”、“你的公司还没倒闭吧”、“老婆是不是原配”、“孩子是不是你的”之类的问候语，互道郑重之后挂了电话。我陷入了深深的思考，并想到了这个题目，“一个学渣的逆袭”。"></a>于是我们在电话里互相说了一些“你现在过得咋样”、“你的公司还没倒闭吧”、“老婆是不是原配”、“孩子是不是你的”之类的问候语，互道郑重之后挂了电话。我陷入了深深的思考，并想到了这个题目，“一个学渣的逆袭”。</h3><h3 id="学渣不是我。"><a href="#学渣不是我。" class="headerlink" title="学渣不是我。"></a>学渣不是我。</h3><h3 id="那一年，我也16岁，他也16岁，我以全校第一名的成绩进入区重点高中，俨然是个学霸。M的成绩就差了很多，他在高中时期以打架和交友广泛闻达于诸侯，而我以成绩优秀和解题迅猛名震四方。可以说，高中时代，基本上是我看着他打架泡妞，他抄着我的作业长大的。在那个眼镜与作业本齐飞的年代，虽然有时我对身边的好白菜都被猪拱了这件事耿耿于怀，但总体来说，我们互补有无，相安无事。"><a href="#那一年，我也16岁，他也16岁，我以全校第一名的成绩进入区重点高中，俨然是个学霸。M的成绩就差了很多，他在高中时期以打架和交友广泛闻达于诸侯，而我以成绩优秀和解题迅猛名震四方。可以说，高中时代，基本上是我看着他打架泡妞，他抄着我的作业长大的。在那个眼镜与作业本齐飞的年代，虽然有时我对身边的好白菜都被猪拱了这件事耿耿于怀，但总体来说，我们互补有无，相安无事。" class="headerlink" title="那一年，我也16岁，他也16岁，我以全校第一名的成绩进入区重点高中，俨然是个学霸。M的成绩就差了很多，他在高中时期以打架和交友广泛闻达于诸侯，而我以成绩优秀和解题迅猛名震四方。可以说，高中时代，基本上是我看着他打架泡妞，他抄着我的作业长大的。在那个眼镜与作业本齐飞的年代，虽然有时我对身边的好白菜都被猪拱了这件事耿耿于怀，但总体来说，我们互补有无，相安无事。"></a>那一年，我也16岁，他也16岁，我以全校第一名的成绩进入区重点高中，俨然是个学霸。M的成绩就差了很多，他在高中时期以打架和交友广泛闻达于诸侯，而我以成绩优秀和解题迅猛名震四方。可以说，高中时代，基本上是我看着他打架泡妞，他抄着我的作业长大的。在那个眼镜与作业本齐飞的年代，虽然有时我对身边的好白菜都被猪拱了这件事耿耿于怀，但总体来说，我们互补有无，相安无事。</h3><h3 id="大学毕业以后，我进了位于北京顺义郊区的一个直流电源的工厂，每月能收入1000元。他回了老家，月薪200元。他在节假日有时来北京玩耍，常常羡慕我月薪过千，眼中闪烁着锐利通透的光芒，像狼。"><a href="#大学毕业以后，我进了位于北京顺义郊区的一个直流电源的工厂，每月能收入1000元。他回了老家，月薪200元。他在节假日有时来北京玩耍，常常羡慕我月薪过千，眼中闪烁着锐利通透的光芒，像狼。" class="headerlink" title="大学毕业以后，我进了位于北京顺义郊区的一个直流电源的工厂，每月能收入1000元。他回了老家，月薪200元。他在节假日有时来北京玩耍，常常羡慕我月薪过千，眼中闪烁着锐利通透的光芒，像狼。"></a>大学毕业以后，我进了位于北京顺义郊区的一个直流电源的工厂，每月能收入1000元。他回了老家，月薪200元。他在节假日有时来北京玩耍，常常羡慕我月薪过千，眼中闪烁着锐利通透的光芒，像狼。</h3><h3 id="狼常常意味着独自流浪，其实人也有流浪情结，只是有的人去了，有的人没去。记得中学的一个假期，M突然说要去南方旅行，身上带了几十块钱就上路了，我一度想去，但最终被循规蹈矩的父母阻止，只好看着他逃了票上了开向南方的列车，羡慕不已。回来后M变得黑而精瘦，沉默，两眼冒绿光，眼神犀利，似乎黑暗中走路都不需要手电筒。最要命的是，沉默期过后，我们不得不在之后的一年内反复听他讲述他的南方流浪记，一如《Red-Dog》里那位不停讲述阿布鲁奇太阳的矿工，为此挨揍也在所不惜。另外，M还传授了我们不下10种逃票的方法，无论是公交、火车、汽车，他都能逃之有道并逃之夭夭，以至于我很长时间一想到流浪就是逃票十法。"><a href="#狼常常意味着独自流浪，其实人也有流浪情结，只是有的人去了，有的人没去。记得中学的一个假期，M突然说要去南方旅行，身上带了几十块钱就上路了，我一度想去，但最终被循规蹈矩的父母阻止，只好看着他逃了票上了开向南方的列车，羡慕不已。回来后M变得黑而精瘦，沉默，两眼冒绿光，眼神犀利，似乎黑暗中走路都不需要手电筒。最要命的是，沉默期过后，我们不得不在之后的一年内反复听他讲述他的南方流浪记，一如《Red-Dog》里那位不停讲述阿布鲁奇太阳的矿工，为此挨揍也在所不惜。另外，M还传授了我们不下10种逃票的方法，无论是公交、火车、汽车，他都能逃之有道并逃之夭夭，以至于我很长时间一想到流浪就是逃票十法。" class="headerlink" title="狼常常意味着独自流浪，其实人也有流浪情结，只是有的人去了，有的人没去。记得中学的一个假期，M突然说要去南方旅行，身上带了几十块钱就上路了，我一度想去，但最终被循规蹈矩的父母阻止，只好看着他逃了票上了开向南方的列车，羡慕不已。回来后M变得黑而精瘦，沉默，两眼冒绿光，眼神犀利，似乎黑暗中走路都不需要手电筒。最要命的是，沉默期过后，我们不得不在之后的一年内反复听他讲述他的南方流浪记，一如《Red Dog》里那位不停讲述阿布鲁奇太阳的矿工，为此挨揍也在所不惜。另外，M还传授了我们不下10种逃票的方法，无论是公交、火车、汽车，他都能逃之有道并逃之夭夭，以至于我很长时间一想到流浪就是逃票十法。"></a>狼常常意味着独自流浪，其实人也有流浪情结，只是有的人去了，有的人没去。记得中学的一个假期，M突然说要去南方旅行，身上带了几十块钱就上路了，我一度想去，但最终被循规蹈矩的父母阻止，只好看着他逃了票上了开向南方的列车，羡慕不已。回来后M变得黑而精瘦，沉默，两眼冒绿光，眼神犀利，似乎黑暗中走路都不需要手电筒。最要命的是，沉默期过后，我们不得不在之后的一年内反复听他讲述他的南方流浪记，一如《Red Dog》里那位不停讲述阿布鲁奇太阳的矿工，为此挨揍也在所不惜。另外，M还传授了我们不下10种逃票的方法，无论是公交、火车、汽车，他都能逃之有道并逃之夭夭，以至于我很长时间一想到流浪就是逃票十法。</h3><h3 id="这样的人是不会在家乡待太久的，因为他不是植物。"><a href="#这样的人是不会在家乡待太久的，因为他不是植物。" class="headerlink" title="这样的人是不会在家乡待太久的，因为他不是植物。"></a>这样的人是不会在家乡待太久的，因为他不是植物。</h3><h3 id="很快，他离开了家乡，来到一家电梯公司，开始从事楼宇的电梯安装工作。他从基层做起，经常带着工队出入于各种新旧楼盘，有时候吃住就在那些还未完工的大楼里进行，吃盒饭，睡睡袋，环境极为艰苦。由于业绩突出，他慢慢开始参与公司一些管理工作，并且逐步展现出了自己优秀的销售天赋和组织协调能力，很快，他成长为某个区域的大区经理。"><a href="#很快，他离开了家乡，来到一家电梯公司，开始从事楼宇的电梯安装工作。他从基层做起，经常带着工队出入于各种新旧楼盘，有时候吃住就在那些还未完工的大楼里进行，吃盒饭，睡睡袋，环境极为艰苦。由于业绩突出，他慢慢开始参与公司一些管理工作，并且逐步展现出了自己优秀的销售天赋和组织协调能力，很快，他成长为某个区域的大区经理。" class="headerlink" title="很快，他离开了家乡，来到一家电梯公司，开始从事楼宇的电梯安装工作。他从基层做起，经常带着工队出入于各种新旧楼盘，有时候吃住就在那些还未完工的大楼里进行，吃盒饭，睡睡袋，环境极为艰苦。由于业绩突出，他慢慢开始参与公司一些管理工作，并且逐步展现出了自己优秀的销售天赋和组织协调能力，很快，他成长为某个区域的大区经理。"></a>很快，他离开了家乡，来到一家电梯公司，开始从事楼宇的电梯安装工作。他从基层做起，经常带着工队出入于各种新旧楼盘，有时候吃住就在那些还未完工的大楼里进行，吃盒饭，睡睡袋，环境极为艰苦。由于业绩突出，他慢慢开始参与公司一些管理工作，并且逐步展现出了自己优秀的销售天赋和组织协调能力，很快，他成长为某个区域的大区经理。</h3><h3 id="后来我听说伊离职创业了，联系变少，断断续续。"><a href="#后来我听说伊离职创业了，联系变少，断断续续。" class="headerlink" title="后来我听说伊离职创业了，联系变少，断断续续。"></a>后来我听说伊离职创业了，联系变少，断断续续。</h3><h3 id="有一天，他说要请我吃顿好的，并回顾一下眼镜和作业本齐飞的岁月。当他从一辆崭新的雷克萨斯570上走下来的时候，我知道，一个学渣的逆袭已经完成……"><a href="#有一天，他说要请我吃顿好的，并回顾一下眼镜和作业本齐飞的岁月。当他从一辆崭新的雷克萨斯570上走下来的时候，我知道，一个学渣的逆袭已经完成……" class="headerlink" title="有一天，他说要请我吃顿好的，并回顾一下眼镜和作业本齐飞的岁月。当他从一辆崭新的雷克萨斯570上走下来的时候，我知道，一个学渣的逆袭已经完成……"></a>有一天，他说要请我吃顿好的，并回顾一下眼镜和作业本齐飞的岁月。当他从一辆崭新的雷克萨斯570上走下来的时候，我知道，一个学渣的逆袭已经完成……</h3><h3 id="现在他经营着一家相对传统的电梯公司，员工不足百，营收过亿，并继续前行。"><a href="#现在他经营着一家相对传统的电梯公司，员工不足百，营收过亿，并继续前行。" class="headerlink" title="现在他经营着一家相对传统的电梯公司，员工不足百，营收过亿，并继续前行。"></a>现在他经营着一家相对传统的电梯公司，员工不足百，营收过亿，并继续前行。</h3><h3 id="故事讲完了，如果你身边也有这样的学渣，请对他们好一点，因为学渣随时可以逆袭。如果你是个学渣，不要放弃自己，因为学渣和学霸在出了校门之后，是可以转换的。"><a href="#故事讲完了，如果你身边也有这样的学渣，请对他们好一点，因为学渣随时可以逆袭。如果你是个学渣，不要放弃自己，因为学渣和学霸在出了校门之后，是可以转换的。" class="headerlink" title="故事讲完了，如果你身边也有这样的学渣，请对他们好一点，因为学渣随时可以逆袭。如果你是个学渣，不要放弃自己，因为学渣和学霸在出了校门之后，是可以转换的。"></a>故事讲完了，如果你身边也有这样的学渣，请对他们好一点，因为学渣随时可以逆袭。如果你是个学渣，不要放弃自己，因为学渣和学霸在出了校门之后，是可以转换的。</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;周一上午一般是我一周最忙碌的时间段，要处理积压的邮件，Review各组的开发计划，安排后续工作，查看业务线的支持请求……这时候电话响了，接通后发现，是很久不见的一位老友兼发小，权且称之为M。&quot;&gt;&lt;a href=&quot;#周一上午一般是我一周最忙碌的时间段，要处理积压的邮件，Review各组的开发计划，安排后续工作，查看业务线的支持请求……这时候电话响了，接通后发现，是很久不见的一位老友兼发小，权且称之为M。&quot; class=&quot;headerlink&quot; title=&quot;周一上午一般是我一周最忙碌的时间段，要处理积压的邮件，Review各组的开发计划，安排后续工作，查看业务线的支持请求……这时候电话响了，接通后发现，是很久不见的一位老友兼发小，权且称之为M。&quot;&gt;&lt;/a&gt;周一上午一般是我一周最忙碌的时间段，要处理积压的邮件，Review各组的开发计划，安排后续工作，查看业务线的支持请求……这时候电话响了，接通后发现，是很久不见的一位老友兼发小，权且称之为M。&lt;/h3&gt;&lt;h3 id=&quot;M和我是高中同学，从高中到大学时期我们经常厮混在一起，工作后因为涉足的领域不同，联系渐渐变少，但是每年总能找时间聚聚，或者打一通电话天南海北地聊。今年还没聚过，突然接到电话我多少有些吃惊。老M常常游走在幽暗的森林里，工作中好事坏事都能碰到，时间久了，戾气渐盛，有时候需要和我这样的正义化身聊聊天，获取一些正能量，才能勉力支撑他继续过个一年半载，所以我以为他遇到什么麻烦了。&quot;&gt;&lt;a href=&quot;#M和我是高中同学，从高中到大学时期我们经常厮混在一起，工作后因为涉足的领域不同，联系渐渐变少，但是每年总能找时间聚聚，或者打一通电话天南海北地聊。今年还没聚过，突然接到电话我多少有些吃惊。老M常常游走在幽暗的森林里，工作中好事坏事都能碰到，时间久了，戾气渐盛，有时候需要和我这样的正义化身聊聊天，获取一些正能量，才能勉力支撑他继续过个一年半载，所以我以为他遇到什么麻烦了。&quot; class=&quot;headerlink&quot; title=&quot;M和我是高中同学，从高中到大学时期我们经常厮混在一起，工作后因为涉足的领域不同，联系渐渐变少，但是每年总能找时间聚聚，或者打一通电话天南海北地聊。今年还没聚过，突然接到电话我多少有些吃惊。老M常常游走在幽暗的森林里，工作中好事坏事都能碰到，时间久了，戾气渐盛，有时候需要和我这样的正义化身聊聊天，获取一些正能量，才能勉力支撑他继续过个一年半载，所以我以为他遇到什么麻烦了。&quot;&gt;&lt;/a&gt;M和我是高中同学，从高中到大学时期我们经常厮混在一起，工作后因为涉足的领域不同，联系渐渐变少，但是每年总能找时间聚聚，或者打一通电话天南海北地聊。今年还没聚过，突然接到电话我多少有些吃惊。老M常常游走在幽暗的森林里，工作中好事坏事都能碰到，时间久了，戾气渐盛，有时候需要和我这样的正义化身聊聊天，获取一些正能量，才能勉力支撑他继续过个一年半载，所以我以为他遇到什么麻烦了。&lt;/h3&gt;&lt;h3 id=&quot;结果伊说：昨晚梦到你了，突然变得伤感，于是打个电话，看看你这个老小子是否还在地球上活蹦乱跳。&quot;&gt;&lt;a href=&quot;#结果伊说：昨晚梦到你了，突然变得伤感，于是打个电话，看看你这个老小子是否还在地球上活蹦乱跳。&quot; class=&quot;headerlink&quot; title=&quot;结果伊说：昨晚梦到你了，突然变得伤感，于是打个电话，看看你这个老小子是否还在地球上活蹦乱跳。&quot;&gt;&lt;/a&gt;结果伊说：昨晚梦到你了，突然变得伤感，于是打个电话，看看你这个老小子是否还在地球上活蹦乱跳。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="逆袭" scheme="http://xj8c.cc/tags/%E9%80%86%E8%A2%AD/"/>
    
  </entry>
  
  <entry>
    <title>计算机运算基础荟萃</title>
    <link href="http://xj8c.cc/2015/11/21/computer-computing-infrastructure/"/>
    <id>http://xj8c.cc/2015/11/21/computer-computing-infrastructure/</id>
    <published>2015-11-20T17:24:48.000Z</published>
    <updated>2017-05-26T06:29:50.301Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二进制数的运算方法"><a href="#二进制数的运算方法" class="headerlink" title="二进制数的运算方法"></a>二进制数的运算方法</h2><p>电子计算机具有强大的运算能力，它可以进行两种运算：算术运算和逻辑运算。</p>
<h1 id="1．二进制数的算术运算"><a href="#1．二进制数的算术运算" class="headerlink" title="1．二进制数的算术运算"></a>1．二进制数的算术运算</h1><p>二进制数的算术运算包括：加、减、乘、除四则运算，下面分别予以介绍。<br><a id="more"></a></p>
<h3 id="（1）二进制数的加法"><a href="#（1）二进制数的加法" class="headerlink" title="（1）二进制数的加法"></a>（1）二进制数的加法</h3><p>根据“逢二进一”规则，二进制数加法的法则为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0＋0＝0</div><div class="line">0＋1＝1＋0＝1</div><div class="line">1＋1＝0　（进位为1） </div><div class="line">1＋1＋1＝1 （进位为1）</div></pre></td></tr></table></figure></p>
<p>例如：1110和1011相加过程如下：<br>…</p>
<hr>
<h3 id="（2）二进制数的减法"><a href="#（2）二进制数的减法" class="headerlink" title="（2）二进制数的减法"></a>（2）二进制数的减法</h3><p>根据“借一有二”的规则，二进制数减法的法则为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0－0＝0</div><div class="line">1－1＝0</div><div class="line">1－0＝1</div><div class="line">0－1＝1 （借位为1）</div></pre></td></tr></table></figure></p>
<p>例如：1101减去1011的过程如下：<br>…</p>
<hr>
<h3 id="（3）二进制数的乘法"><a href="#（3）二进制数的乘法" class="headerlink" title="（3）二进制数的乘法"></a>（3）二进制数的乘法</h3><p>二进制数乘法过程可仿照十进制数乘法进行。但由于二进制数只有0或1两种可能的乘数位，导致二进制乘法更为简单。二进制数乘法的法则为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">0×0＝0</div><div class="line">0×1＝1×0＝0</div><div class="line">1×1＝1</div></pre></td></tr></table></figure></p>
<p>例如：1001和1010相乘的过程如下：<br>…</p>
<p>由低位到高位，用乘数的每一位去乘被乘数，若乘数的某一位为1，则该次部分积为被乘数；若乘数的某一位为0，则该次部分积为0。某次部分积的最低位必须和本位乘数对齐，所有部分积相加的结果则为相乘得到的乘积。</p>
<hr>
<h3 id="（4）二进制数的除法"><a href="#（4）二进制数的除法" class="headerlink" title="（4）二进制数的除法"></a>（4）二进制数的除法</h3><p>二进制数除法与十进制数除法很类似。可先从被除数的最高位开始，将被除数（或中间余数）与除数相比较，若被除数（或中间余数）大于除数，则用被除数（或中间余数）减去除数，商为1，并得相减之后的中间余数，否则商为0。再将被除数的下一位移下补充到中间余数的末位，重复以上过程，就可得到所要求的各位商数和最终的余数。</p>
<p>例如：100110÷110的过程如下：<br>…</p>
<p>所以，100110÷110＝110余10。</p>
<hr>
<h1 id="2．二进制数的逻辑运算"><a href="#2．二进制数的逻辑运算" class="headerlink" title="2．二进制数的逻辑运算"></a>2．二进制数的逻辑运算</h1><p>二进制数的逻辑运算包括逻辑加法（“或”运算）、逻辑乘法（“与”运算）、逻辑否定（“非”运算）和逻辑“异或”运算。</p>
<h3 id="（1）逻辑“或”运算"><a href="#（1）逻辑“或”运算" class="headerlink" title="（1）逻辑“或”运算"></a>（1）逻辑“或”运算</h3><p>又称为逻辑加，可用符号“＋”或“∨”来表示。逻辑“或”运算的规则如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0＋0＝0或0∨0＝0</div><div class="line">0＋1＝1或0∨1＝1</div><div class="line">1＋0＝1或1∨0＝1</div><div class="line">1＋1＝1或1∨1＝1</div></pre></td></tr></table></figure></p>
<p>可见，两个相“或”的逻辑变量中，只要有一个为1，“或”运算的结果就为1。仅当两个变量都为0时，或运算的结果才为0。计算时，要特别注意和算术运算的加法加以区别。</p>
<hr>
<h3 id="（2）逻辑“与”运算"><a href="#（2）逻辑“与”运算" class="headerlink" title="（2）逻辑“与”运算"></a>（2）逻辑“与”运算</h3><p>又称为逻辑乘，常用符号“×”或“· ”或“∧”表示。“与”运算遵循如下运算规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">0×1＝0或0·1＝0或0∧1＝0</div><div class="line">1×0＝0或1·0＝0或1∧0＝0</div><div class="line">1×1＝1或1·1＝1或1∧1＝1</div></pre></td></tr></table></figure></p>
<p>可见，两个相“与”的逻辑变量中，只要有一个为0，“与”运算的结果就为0。仅当两个变量都为1时，“与”运算的结果才为1。</p>
<hr>
<h3 id="（3）逻辑“非”运算"><a href="#（3）逻辑“非”运算" class="headerlink" title="（3）逻辑“非”运算"></a>（3）逻辑“非”运算</h3><p>又称为逻辑否定，实际上就是将原逻辑变量的状态求反，其运算规则如下：<br>…</p>
<p>可见，在变量的上方加一横线表示“非”。逻辑变量为0时，“非”运算的结果为1。逻辑变量为1时，“非”运算的结果为0。</p>
<hr>
<h3 id="（4）逻辑“异或”运算"><a href="#（4）逻辑“异或”运算" class="headerlink" title="（4）逻辑“异或”运算"></a>（4）逻辑“异或”运算</h3><p>“异或”运算，常用符号“”或“”来表示，其运算规则为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">00＝0 或 00＝0</div><div class="line">01＝1 或 01＝1</div><div class="line">10＝1 或 10＝1</div><div class="line">11＝0 或 11＝0</div></pre></td></tr></table></figure></p>
<p>可见：两个相“异或”的逻辑运算变量取值相同时，“异或”的结果为0。取值相异时，“异或”的结果为1<br>以上仅就逻辑变量只有一位的情况得到了逻辑“与”、“或”、“非”、“异或”运算的运算规则。当逻辑变量为多位时，可在两个逻辑变量对应位之间按上述规则进行运算。特别注意，所有的逻辑运算都是按位进行的，位与位之间没有任何联系，即不存在算术运算过程中的进位或借位关系。下面举例说明。</p>
<h3 id="【例1-1】-如两变量的取值-X＝00FFH，Y＝5555H，求Z1＝X∧Y；Z2＝X∨Y；Z3＝；Z4＝XY的值。"><a href="#【例1-1】-如两变量的取值-X＝00FFH，Y＝5555H，求Z1＝X∧Y；Z2＝X∨Y；Z3＝；Z4＝XY的值。" class="headerlink" title="【例1.1】 如两变量的取值 X＝00FFH，Y＝5555H，求Z1＝X∧Y；Z2＝X∨Y；Z3＝；Z4＝XY的值。"></a>【例1.1】 如两变量的取值 X＝00FFH，Y＝5555H，求Z1＝X∧Y；Z2＝X∨Y；Z3＝；Z4＝XY的值。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">解：</div><div class="line">&amp;nbsp;&amp;nbsp;X＝0000000011111111</div><div class="line">&amp;nbsp;&amp;nbsp;Y＝0101010101010101</div><div class="line">则：</div><div class="line">&amp;nbsp;&amp;nbsp;Z1＝0000000001010101＝0055H</div><div class="line">&amp;nbsp;&amp;nbsp;Z2＝0101010111111111＝55FFH</div><div class="line">&amp;nbsp;&amp;nbsp;Z3＝1111111100000000＝FF00H</div><div class="line">&amp;nbsp;&amp;nbsp;Z4＝0101010110101010＝55AAH</div></pre></td></tr></table></figure>
<p>算术运算及逻辑运算规则见下表:<br>…</p>
<h2 id="数在计算机中的表示"><a href="#数在计算机中的表示" class="headerlink" title="数在计算机中的表示"></a>数在计算机中的表示</h2><h3 id="在计算机中要处理的数有无符号数和有符号数。这些数在计算机中是如何表示的呢？"><a href="#在计算机中要处理的数有无符号数和有符号数。这些数在计算机中是如何表示的呢？" class="headerlink" title="在计算机中要处理的数有无符号数和有符号数。这些数在计算机中是如何表示的呢？"></a>在计算机中要处理的数有无符号数和有符号数。这些数在计算机中是如何表示的呢？</h3><h3 id="1．无符号数"><a href="#1．无符号数" class="headerlink" title="1．无符号数"></a>1．无符号数</h3><p>所谓无符号数，通常表示一个数的绝对值，即数的各位都用来表示数值的大小。一个字节（8位）二进制数只能表示0～255范围内的数。因此，要表示大于255的数，必须采用多个字节来表示，它的长度可以为任意倍字节长，其数据格式如图1.1所示。<br>…</p>
<h3 id="2．有符号数"><a href="#2．有符号数" class="headerlink" title="2．有符号数"></a>2．有符号数</h3><p>所谓有符号数，即用来表示一个任意位长的正数或负数。我们知道，在普通数字中，区分正负数是在数的绝对值前面加上符号来表示，即“＋”表示正数，“－”表示负数。在计算机中数的符号也数码化了，即用一位二进制数位来表示符号。一般是，用一个数的最高位来表示符号位，用“0”表示正号，用“1”表示负号，而其余位为数值位。其数据格式如图1.2所示。<br>…</p>
<h3 id="3．有符号数的原码、反码、补码及补码运算"><a href="#3．有符号数的原码、反码、补码及补码运算" class="headerlink" title="3．有符号数的原码、反码、补码及补码运算"></a>3．有符号数的原码、反码、补码及补码运算</h3><p>带正、负号的二进制数称为数的真值表示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">例如：X＝＋1010110</div><div class="line">　　　Y＝－0110101</div></pre></td></tr></table></figure></p>
<p>为了运算方便，在计算机里的有符号数，有三种表示方法，即原码、反码和补码，称为机器数。</p>
<h4 id="（1）原码"><a href="#（1）原码" class="headerlink" title="（1）原码"></a>（1）原码</h4><p>正数的符号位用“0”表示，负数的符号位用“1”表示，其余数字位表示数值本身，这种表示法称为原码。<br>例如：上例中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[X]原＝01010110</div><div class="line">[Y]原＝10110101</div></pre></td></tr></table></figure></p>
<p>对于0，可以认为它是＋0，也可以认为它是－0。因此在原码中，0有下列两种表示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[＋0]原＝00000000</div><div class="line">[－0]原＝10000000</div></pre></td></tr></table></figure></p>
<p>原码表示数的方法很简单，只需要在真值的基础上，将符号位用数码“0”和“1”表示即可。但采用原码表示的数在计算机中进行加减运算时很麻烦。如：遇到两个异号数相加，或两个同号数相减时，就要用减法运算。为了把减法运算转变成加法运算，则引入了反码和补码。</p>
<hr>
<h4 id="（2）反码"><a href="#（2）反码" class="headerlink" title="（2）反码"></a>（2）反码</h4><p>在原码表示的基础上很容易求得一个数的反码。正数的反码与原码相同，而负数的反码则是在原码的基础上，符号位不变（仍为1），其余数位按位求反，即0→1，1→0。<br>例如：上例中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[X]反＝01010110</div><div class="line">[Y]反＝11001010</div><div class="line">而：[＋0]反＝00000000</div><div class="line">　　[－0]反＝11111111</div></pre></td></tr></table></figure></p>
<hr>
<h4 id="（3）补码"><a href="#（3）补码" class="headerlink" title="（3）补码"></a>（3）补码</h4><p>一个数的补码也很容易求得。如果是正数，补码同原码也同反码，如果是负数，则在反码的基础上最末位加1。<br>例如：上例中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[X]补＝01010110＝[X]反＝[X]原 </div><div class="line">[Y]补＝11001011</div><div class="line">注：补码中0只有一种表示，无正负之分，即：</div><div class="line">[＋0]补＝[－0]补＝00000000</div><div class="line">不难证明，补码具有如下特性：</div><div class="line">[[X]补]补＝[X]原</div></pre></td></tr></table></figure></p>
<p>用8位二进制数来表示无符号数及有符号数的原码、反码、补码时的对应关系见表1.5。</p>
<p>由表1.5可知，用8位二进制数，表示无符号数为0～255；表示原码为－127～＋127；表示反码为－127～＋127；表示补码为－128～＋127。</p>
<hr>
<h4 id="（4）补码运算"><a href="#（4）补码运算" class="headerlink" title="（4）补码运算"></a>（4）补码运算</h4><p>两个用补码表示的带符号数进行加减运算时，特点是把符号位上表示正负的“1”和“0”也看成数，与数值部分一同进行运算，所得的结果也为补码形式，即结果的符号位为“0”，表示正数，结果的符号位为“1”表示负数。下面分加、减两种情况予以讨论。<br>两个带符号的数X和Y进行相加时，是将两个数分别转换为补码的形式，然后进行补码加运算，所得的结果为和的补码形式。即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[X＋Y]补＝[X]补＋[Y]补</div></pre></td></tr></table></figure></p>
<h3 id="【例1-2】-用补码进行下列运算-＋18-＋-－15-；-－18-＋-＋15-；-－18-＋-－11"><a href="#【例1-2】-用补码进行下列运算-＋18-＋-－15-；-－18-＋-＋15-；-－18-＋-－11" class="headerlink" title="【例1.2】 用补码进行下列运算 (＋18)＋(－15)；(－18)＋(＋15)；(－18)＋(－11)"></a>【例1.2】 用补码进行下列运算 (＋18)＋(－15)；(－18)＋(＋15)；(－18)＋(－11)</h3><p>解：…</p>
<p>由例1.2可知：当带符号的数采用补码形式进行相加时，可把符号位也当作普通数字一样与数值部分一起进行加法运算，若符号位上产生进位时，则自动丢掉，所得的结果为两数之和的补码形式。如果想得到运算后原码的结果，可对运算结果再求一次补码即可。</p>
<h3 id="两个带符号数相减，可通过下面的公式进行："><a href="#两个带符号数相减，可通过下面的公式进行：" class="headerlink" title="两个带符号数相减，可通过下面的公式进行："></a>两个带符号数相减，可通过下面的公式进行：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">X－Y＝X＋（－Y）</div><div class="line">则　[X－Y]补＝[X＋(－Y)]补＝[X]补＋[－Y]补</div></pre></td></tr></table></figure>
<p>可见：求[X－Y]补，可以用[X]补和[－Y]补相加来实现。这里关键在于求[－Y]补。如果已知[Y]补，那么对[Y]补的每一位（包括符号位）都按位求反，然后再在末位加1，结果即为[－Y]补。（证明从略）。一般称[－Y]补为对[Y]补的“变补”，即[[Y]补]变补＝[－Y]补；已知[Y]补求[－Y]补的过程叫变补。<br>这样一来，求两个带符号的二进制数之差，可以用“减数（补码）变补与被减数（补码）相加”来实现。这是补码表示法的主要优点之一。 </p>
<hr>
<h3 id="【例1-3】-用补码进行下列运算：①-96－19；-②-－56-－-－17"><a href="#【例1-3】-用补码进行下列运算：①-96－19；-②-－56-－-－17" class="headerlink" title="【例1.3】 用补码进行下列运算：① 96－19； ② (－56)－(－17)"></a>【例1.3】 用补码进行下列运算：① 96－19； ② (－56)－(－17)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">解：① X＝96，Y＝19 则[X]补＝01100000　　　　　　　　　　　　　　　　　　　</div><div class="line">[Y]补＝00010011</div><div class="line">[－Y]补＝11101101故 [X－Y]补＝[X－Y]原＝01001101＝＋77</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">② X＝－56，Y＝－17， 则</div><div class="line">[X]补＝11001000</div><div class="line">[Y]补＝11101111</div><div class="line">[－Y]补＝00010001</div><div class="line">则 [X－Y]补＝11011001</div><div class="line">故 [X－Y]原 ＝[[X－Y]补]补＝10100111＝－39</div><div class="line">综上所述，对于补码的加、减运算可用下边一般公式表示：</div><div class="line">[X±Y]补＝[X]补＋[±Y]补 （都小于2n+1）</div></pre></td></tr></table></figure>
<hr>
<h4 id="（5）溢出判断"><a href="#（5）溢出判断" class="headerlink" title="（5）溢出判断"></a>（5）溢出判断</h4><p>当两个有符号数进行补码运算时，若运算结果的绝对值超出运算装置容量时，数值部分就会发生溢出，占据符号位的位置，导致错误的结果。这种现象通常称为补码溢出，简称溢出。这和正常运算时符号位的进位自动丢失在性质上是不同的。下面举例说明。例如：某运算装置共有五位，除最高位表示符号位外，还有四位用来表示数值。先看下面两组运算。</p>
<p>① 计算13＋7＝？</p>
<p>② 计算(－4)＋(－4)＝？</p>
<h3 id="①-的运算结果显然是错误的，因为两个正数相加不可能得到负数的结果，产生错误的原因是由于两个数相加后的数值超出了加法装置所允许位数（数值部分4位，可以表示的最大数值为24＝16），因而从数值的最高位向符号位产生了进位，或说这种现象是由于“溢出”而造成的。"><a href="#①-的运算结果显然是错误的，因为两个正数相加不可能得到负数的结果，产生错误的原因是由于两个数相加后的数值超出了加法装置所允许位数（数值部分4位，可以表示的最大数值为24＝16），因而从数值的最高位向符号位产生了进位，或说这种现象是由于“溢出”而造成的。" class="headerlink" title="① 的运算结果显然是错误的，因为两个正数相加不可能得到负数的结果，产生错误的原因是由于两个数相加后的数值超出了加法装置所允许位数（数值部分4位，可以表示的最大数值为24＝16），因而从数值的最高位向符号位产生了进位，或说这种现象是由于“溢出”而造成的。"></a>① 的运算结果显然是错误的，因为两个正数相加不可能得到负数的结果，产生错误的原因是由于两个数相加后的数值超出了加法装置所允许位数（数值部分4位，可以表示的最大数值为24＝16），因而从数值的最高位向符号位产生了进位，或说这种现象是由于“溢出”而造成的。</h3><h3 id="②-的结果显然是正确的，由符号位产生的进位自动丢失。"><a href="#②-的结果显然是正确的，由符号位产生的进位自动丢失。" class="headerlink" title="② 的结果显然是正确的，由符号位产生的进位自动丢失。"></a>② 的结果显然是正确的，由符号位产生的进位自动丢失。</h3><p>为了保证运算结果的正确性，计算机必须能够判别出是正常进位还是发生了溢出错误。<br>微机中常用的溢出判别称为双高位判别法，并常用“异或”电路来实现溢出判别。其表达式为..</p>
<h2 id="数的编码方法"><a href="#数的编码方法" class="headerlink" title="数的编码方法"></a>数的编码方法</h2><p>在计算机里，所有用到的数字、字母、符号、指令等都必须用特定的二进制码来表示，这就是二进制编码。</p>
<h3 id="1．二进制编码的十进制数"><a href="#1．二进制编码的十进制数" class="headerlink" title="1．二进制编码的十进制数"></a>1．二进制编码的十进制数</h3><h4 id="计算机只能识别二进制数，但是，人们却熟悉十进制数。所以，在计算机输入和输出数据时，往往采用十进制数表示。不过，这样的十进制数是用二进制编码表示的，称为二进制编码的十进制数——BCD（binary-code-decimal）码。"><a href="#计算机只能识别二进制数，但是，人们却熟悉十进制数。所以，在计算机输入和输出数据时，往往采用十进制数表示。不过，这样的十进制数是用二进制编码表示的，称为二进制编码的十进制数——BCD（binary-code-decimal）码。" class="headerlink" title="计算机只能识别二进制数，但是，人们却熟悉十进制数。所以，在计算机输入和输出数据时，往往采用十进制数表示。不过，这样的十进制数是用二进制编码表示的，称为二进制编码的十进制数——BCD（binary code decimal）码。"></a>计算机只能识别二进制数，但是，人们却熟悉十进制数。所以，在计算机输入和输出数据时，往往采用十进制数表示。不过，这样的十进制数是用二进制编码表示的，称为二进制编码的十进制数——BCD（binary code decimal）码。</h4><h4 id="用二进制数为十进制数编码，每一位十进制数需要由四位二进制数来表示。四位二进制数共有16种编码形式，由于十进制数只有0～9十个数码，故有六个码是多余的，放弃不用。而这种多余性便产生了多种不同的BCD码。在计算机中较常用的是8421-BCD码（在以后的章节中简称BCD码）。这种BCD码用四位二进制数表示一位十进制数的数码0～9，而这四位的权从高位到低位依次为8，4，2，1。十进制数0～15与8421-BCD码的编码关系见表1-6。"><a href="#用二进制数为十进制数编码，每一位十进制数需要由四位二进制数来表示。四位二进制数共有16种编码形式，由于十进制数只有0～9十个数码，故有六个码是多余的，放弃不用。而这种多余性便产生了多种不同的BCD码。在计算机中较常用的是8421-BCD码（在以后的章节中简称BCD码）。这种BCD码用四位二进制数表示一位十进制数的数码0～9，而这四位的权从高位到低位依次为8，4，2，1。十进制数0～15与8421-BCD码的编码关系见表1-6。" class="headerlink" title="用二进制数为十进制数编码，每一位十进制数需要由四位二进制数来表示。四位二进制数共有16种编码形式，由于十进制数只有0～9十个数码，故有六个码是多余的，放弃不用。而这种多余性便产生了多种不同的BCD码。在计算机中较常用的是8421 BCD码（在以后的章节中简称BCD码）。这种BCD码用四位二进制数表示一位十进制数的数码0～9，而这四位的权从高位到低位依次为8，4，2，1。十进制数0～15与8421 BCD码的编码关系见表1.6。"></a>用二进制数为十进制数编码，每一位十进制数需要由四位二进制数来表示。四位二进制数共有16种编码形式，由于十进制数只有0～9十个数码，故有六个码是多余的，放弃不用。而这种多余性便产生了多种不同的BCD码。在计算机中较常用的是8421 BCD码（在以后的章节中简称BCD码）。这种BCD码用四位二进制数表示一位十进制数的数码0～9，而这四位的权从高位到低位依次为8，4，2，1。十进制数0～15与8421 BCD码的编码关系见表1.6。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">例如：(208)10＝(0010 0000 1000)8421 BCD</div><div class="line">　　　(1001 0001 0111 0101)8421 BCD＝(9175)10</div></pre></td></tr></table></figure>
<h3 id="2．字母与符号的编码"><a href="#2．字母与符号的编码" class="headerlink" title="2．字母与符号的编码"></a>2．字母与符号的编码</h3><h4 id="在计算机里，字母和符号也必须用特定的二进制编码来表示。目前，在微机、通信设备和仪器仪表中广泛采用的是美国标准信息交换码ASCII（american-standard-code-for-information-interchange）码。它用七位二进制码表示一个字母或符号，共能表示27＝128个不同的字符。其中包括数字0～9、英文26个大、小写字母、运算符、标点及其他的一些控制符号。常用的七位ASCII码见表1-7。"><a href="#在计算机里，字母和符号也必须用特定的二进制编码来表示。目前，在微机、通信设备和仪器仪表中广泛采用的是美国标准信息交换码ASCII（american-standard-code-for-information-interchange）码。它用七位二进制码表示一个字母或符号，共能表示27＝128个不同的字符。其中包括数字0～9、英文26个大、小写字母、运算符、标点及其他的一些控制符号。常用的七位ASCII码见表1-7。" class="headerlink" title="在计算机里，字母和符号也必须用特定的二进制编码来表示。目前，在微机、通信设备和仪器仪表中广泛采用的是美国标准信息交换码ASCII（american standard code for information interchange）码。它用七位二进制码表示一个字母或符号，共能表示27＝128个不同的字符。其中包括数字0～9、英文26个大、小写字母、运算符、标点及其他的一些控制符号。常用的七位ASCII码见表1.7。"></a>在计算机里，字母和符号也必须用特定的二进制编码来表示。目前，在微机、通信设备和仪器仪表中广泛采用的是美国标准信息交换码ASCII（american standard code for information interchange）码。它用七位二进制码表示一个字母或符号，共能表示27＝128个不同的字符。其中包括数字0～9、英文26个大、小写字母、运算符、标点及其他的一些控制符号。常用的七位ASCII码见表1.7。</h4><p>例如：数字0的ASCII码为0110000B 或 30H<br>　　　数字9的ASCII码为0111001B 或 39H<br>　　　字母A的ASCII码为1000001B　或 41H</p>
<h4 id="ASCII码多用于微型计算机的输入-输出设备（如电传打字机）及在数据传送过程中进行奇偶校验。"><a href="#ASCII码多用于微型计算机的输入-输出设备（如电传打字机）及在数据传送过程中进行奇偶校验。" class="headerlink" title="ASCII码多用于微型计算机的输入/输出设备（如电传打字机）及在数据传送过程中进行奇偶校验。"></a>ASCII码多用于微型计算机的输入/输出设备（如电传打字机）及在数据传送过程中进行奇偶校验。</h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;二进制数的运算方法&quot;&gt;&lt;a href=&quot;#二进制数的运算方法&quot; class=&quot;headerlink&quot; title=&quot;二进制数的运算方法&quot;&gt;&lt;/a&gt;二进制数的运算方法&lt;/h2&gt;&lt;p&gt;电子计算机具有强大的运算能力，它可以进行两种运算：算术运算和逻辑运算。&lt;/p&gt;
&lt;h1 id=&quot;1．二进制数的算术运算&quot;&gt;&lt;a href=&quot;#1．二进制数的算术运算&quot; class=&quot;headerlink&quot; title=&quot;1．二进制数的算术运算&quot;&gt;&lt;/a&gt;1．二进制数的算术运算&lt;/h1&gt;&lt;p&gt;二进制数的算术运算包括：加、减、乘、除四则运算，下面分别予以介绍。&lt;br&gt;
    
    </summary>
    
    
      <category term="计算机基础" scheme="http://xj8c.cc/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="进制转换" scheme="http://xj8c.cc/tags/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>CEAC-office2010实操题练习评测系统</title>
    <link href="http://xj8c.cc/2015/11/08/CEAC-office2010/"/>
    <id>http://xj8c.cc/2015/11/08/CEAC-office2010/</id>
    <published>2015-11-07T16:01:20.000Z</published>
    <updated>2017-05-26T06:29:50.245Z</updated>
    
    <content type="html"><![CDATA[<p>CEAC，即国家信息化计算机教育认证，是国家信息产业部和中国电子商务协会共同批准、设立。是为建立国家信息化培训标准、加强培训渠道建设、完善信息化考试系统平台和考核标准的新举措。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="由-CEAC-国家信息化培训认证管理办公室统一管理、实施。"><a href="#由-CEAC-国家信息化培训认证管理办公室统一管理、实施。" class="headerlink" title="由 CEAC 国家信息化培训认证管理办公室统一管理、实施。"></a>由 CEAC 国家信息化培训认证管理办公室统一管理、实施。</h3><h3 id="CEAC-认证证书是信息产业部向从业人员颁发的信息技术专业标准证书。具有广泛的认可度和专业权威性，代表了当今信息技术应用专业资格认证的国家标准。"><a href="#CEAC-认证证书是信息产业部向从业人员颁发的信息技术专业标准证书。具有广泛的认可度和专业权威性，代表了当今信息技术应用专业资格认证的国家标准。" class="headerlink" title="CEAC 认证证书是信息产业部向从业人员颁发的信息技术专业标准证书。具有广泛的认可度和专业权威性，代表了当今信息技术应用专业资格认证的国家标准。"></a>CEAC 认证证书是信息产业部向从业人员颁发的信息技术专业标准证书。具有广泛的认可度和专业权威性，代表了当今信息技术应用专业资格认证的国家标准。</h3><a id="more"></a>
<h3 id="CEAC-认证证书将陆续成为信息产业系统和各地方政府主管部门，对信息技术从业人员素质考核的主要参考因素，并针逐渐演变为对所有人员从业的基本要求"><a href="#CEAC-认证证书将陆续成为信息产业系统和各地方政府主管部门，对信息技术从业人员素质考核的主要参考因素，并针逐渐演变为对所有人员从业的基本要求" class="headerlink" title="CEAC 认证证书将陆续成为信息产业系统和各地方政府主管部门，对信息技术从业人员素质考核的主要参考因素，并针逐渐演变为对所有人员从业的基本要求"></a>CEAC 认证证书将陆续成为信息产业系统和各地方政府主管部门，对信息技术从业人员素质考核的主要参考因素，并针逐渐演变为对所有人员从业的基本要求</h3><h3 id="国家信息化计算机教育认证项目（CEAC）为信息产业部核准、设立，由CEAC国家信息化培训认证管理办公室统一管理、实施的国家级教育认证项目。项目按照国际规范和信息技术培训标准设计符合中国政府、企业、行业信息化需求的人才培训、认证解决方案。依托于建立在各地的CEAC认证机构，实现大规模信息化人力资源培训的发展战略，从而大力推进政府、企业、行业信息化进程。"><a href="#国家信息化计算机教育认证项目（CEAC）为信息产业部核准、设立，由CEAC国家信息化培训认证管理办公室统一管理、实施的国家级教育认证项目。项目按照国际规范和信息技术培训标准设计符合中国政府、企业、行业信息化需求的人才培训、认证解决方案。依托于建立在各地的CEAC认证机构，实现大规模信息化人力资源培训的发展战略，从而大力推进政府、企业、行业信息化进程。" class="headerlink" title="国家信息化计算机教育认证项目（CEAC）为信息产业部核准、设立，由CEAC国家信息化培训认证管理办公室统一管理、实施的国家级教育认证项目。项目按照国际规范和信息技术培训标准设计符合中国政府、企业、行业信息化需求的人才培训、认证解决方案。依托于建立在各地的CEAC认证机构，实现大规模信息化人力资源培训的发展战略，从而大力推进政府、企业、行业信息化进程。"></a>国家信息化计算机教育认证项目（CEAC）为信息产业部核准、设立，由CEAC国家信息化培训认证管理办公室统一管理、实施的国家级教育认证项目。项目按照国际规范和信息技术培训标准设计符合中国政府、企业、行业信息化需求的人才培训、认证解决方案。依托于建立在各地的CEAC认证机构，实现大规模信息化人力资源培训的发展战略，从而大力推进政府、企业、行业信息化进程。</h3><h3 id="国家信息化计算机教育认证项目（CEAC）以先进的课程方案、独特的教学方法、权威的国家认证服务于国家信息化建设。设立以来，深得社会各界认可，已获得计算机技术培训行业多项奖项。"><a href="#国家信息化计算机教育认证项目（CEAC）以先进的课程方案、独特的教学方法、权威的国家认证服务于国家信息化建设。设立以来，深得社会各界认可，已获得计算机技术培训行业多项奖项。" class="headerlink" title="国家信息化计算机教育认证项目（CEAC）以先进的课程方案、独特的教学方法、权威的国家认证服务于国家信息化建设。设立以来，深得社会各界认可，已获得计算机技术培训行业多项奖项。"></a>国家信息化计算机教育认证项目（CEAC）以先进的课程方案、独特的教学方法、权威的国家认证服务于国家信息化建设。设立以来，深得社会各界认可，已获得计算机技术培训行业多项奖项。</h3><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><p><a href="http://pan.baidu.com/s/1pJqxXjl" target="_blank" rel="external">office2010实操题练习评测系统</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CEAC，即国家信息化计算机教育认证，是国家信息产业部和中国电子商务协会共同批准、设立。是为建立国家信息化培训标准、加强培训渠道建设、完善信息化考试系统平台和考核标准的新举措。&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;h3 id=&quot;由-CEAC-国家信息化培训认证管理办公室统一管理、实施。&quot;&gt;&lt;a href=&quot;#由-CEAC-国家信息化培训认证管理办公室统一管理、实施。&quot; class=&quot;headerlink&quot; title=&quot;由 CEAC 国家信息化培训认证管理办公室统一管理、实施。&quot;&gt;&lt;/a&gt;由 CEAC 国家信息化培训认证管理办公室统一管理、实施。&lt;/h3&gt;&lt;h3 id=&quot;CEAC-认证证书是信息产业部向从业人员颁发的信息技术专业标准证书。具有广泛的认可度和专业权威性，代表了当今信息技术应用专业资格认证的国家标准。&quot;&gt;&lt;a href=&quot;#CEAC-认证证书是信息产业部向从业人员颁发的信息技术专业标准证书。具有广泛的认可度和专业权威性，代表了当今信息技术应用专业资格认证的国家标准。&quot; class=&quot;headerlink&quot; title=&quot;CEAC 认证证书是信息产业部向从业人员颁发的信息技术专业标准证书。具有广泛的认可度和专业权威性，代表了当今信息技术应用专业资格认证的国家标准。&quot;&gt;&lt;/a&gt;CEAC 认证证书是信息产业部向从业人员颁发的信息技术专业标准证书。具有广泛的认可度和专业权威性，代表了当今信息技术应用专业资格认证的国家标准。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="CEAC" scheme="http://xj8c.cc/tags/CEAC/"/>
    
      <category term="office2010" scheme="http://xj8c.cc/tags/office2010/"/>
    
      <category term="绿色软件" scheme="http://xj8c.cc/tags/%E7%BB%BF%E8%89%B2%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>测试用例设计进阶(下)</title>
    <link href="http://xj8c.cc/2015/10/28/test-case-design-advanced(bottom)/"/>
    <id>http://xj8c.cc/2015/10/28/test-case-design-advanced(bottom)/</id>
    <published>2015-10-28T13:58:11.000Z</published>
    <updated>2017-05-26T06:29:50.551Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景分析法设计测试用例-—-场景分析相关概念"><a href="#场景分析法设计测试用例-—-场景分析相关概念" class="headerlink" title="场景分析法设计测试用例 — 场景分析相关概念"></a>场景分析法设计测试用例 — 场景分析相关概念</h2><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>应用软件一般都是用事件触发来控制流程的，事件触发时的情景便形成了场景。</p>
<h3 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h3><p>同一事件不同的触发顺序和处理结果就形成事件流，事件流分为基本流和备选流。</p>
<h3 id="基本流"><a href="#基本流" class="headerlink" title="基本流"></a>基本流</h3><p>程序从开始执行直到成功结束所经过的最短路径。<br><a id="more"></a></p>
<h3 id="备选流"><a href="#备选流" class="headerlink" title="备选流"></a>备选流</h3><p>一个备选流可能从基本流开始，在某个特定条件下执行，然后重新加入基本流中；也可能起源于另一个备选流，执行后加入基本流或者终止用例。</p>
<h3 id="一个典型的场景分析图"><a href="#一个典型的场景分析图" class="headerlink" title="一个典型的场景分析图"></a>一个典型的场景分析图</h3><h2 id="场景分析法设计测试用例-—-使用场景分析设计测试用例"><a href="#场景分析法设计测试用例-—-使用场景分析设计测试用例" class="headerlink" title="场景分析法设计测试用例 — 使用场景分析设计测试用例"></a>场景分析法设计测试用例 — 使用场景分析设计测试用例</h2><h3 id="场景分析法"><a href="#场景分析法" class="headerlink" title="场景分析法"></a>场景分析法</h3><p>通过分析事件流设计测试用例的方法。</p>
<h3 id="场景分析法的使用场景"><a href="#场景分析法的使用场景" class="headerlink" title="场景分析法的使用场景"></a>场景分析法的使用场景</h3><p>场景分析一般在分析业务流程或流程化处理功能时使用。</p>
<h3 id="场景分析法的优点"><a href="#场景分析法的优点" class="headerlink" title="场景分析法的优点"></a>场景分析法的优点</h3><p>场景分析法可以比较生动地描绘出事件触发时的情景，有利于测试设计者设计测试用例，同时使测试用例更容易理解和执行。</p>
<h3 id="场景分析法设计测试用例的步骤："><a href="#场景分析法设计测试用例的步骤：" class="headerlink" title="场景分析法设计测试用例的步骤："></a>场景分析法设计测试用例的步骤：</h3><h4 id="1、分析软件规格说明描述，整理出基本流和备选流。"><a href="#1、分析软件规格说明描述，整理出基本流和备选流。" class="headerlink" title="1、分析软件规格说明描述，整理出基本流和备选流。"></a>1、分析软件规格说明描述，整理出基本流和备选流。</h4><h4 id="2、根据基本流和备选流组合关系生成场景。"><a href="#2、根据基本流和备选流组合关系生成场景。" class="headerlink" title="2、根据基本流和备选流组合关系生成场景。"></a>2、根据基本流和备选流组合关系生成场景。</h4><h4 id="3、分析所有场景，合并测试内容重复的场景。"><a href="#3、分析所有场景，合并测试内容重复的场景。" class="headerlink" title="3、分析所有场景，合并测试内容重复的场景。"></a>3、分析所有场景，合并测试内容重复的场景。</h4><h4 id="4、根据场景逐一设计测试用例。"><a href="#4、根据场景逐一设计测试用例。" class="headerlink" title="4、根据场景逐一设计测试用例。"></a>4、根据场景逐一设计测试用例。</h4><p>例、在用信用卡网上支付时，输入信用卡卡号、查询密码和实时短信验证码，信息全部正确且账户金额充足的情况下可以完成付款。如果相关信息不正确则给出对应提示信息；多条信息不正确时按输入顺序提示；短信验证码一分钟内有效，出错三次则退出本次支付。</p>
<h3 id="1）整理基本流和备选流"><a href="#1）整理基本流和备选流" class="headerlink" title="1）整理基本流和备选流"></a>1）整理基本流和备选流</h3><h4 id="基本流：正常支付"><a href="#基本流：正常支付" class="headerlink" title="基本流：正常支付"></a>基本流：正常支付</h4><h4 id="备选流1：账户不存在；"><a href="#备选流1：账户不存在；" class="headerlink" title="备选流1：账户不存在；"></a>备选流1：账户不存在；</h4><h4 id="备选流2：查询密码不正确；"><a href="#备选流2：查询密码不正确；" class="headerlink" title="备选流2：查询密码不正确；"></a>备选流2：查询密码不正确；</h4><h4 id="备选流3：短信验证码不正确；"><a href="#备选流3：短信验证码不正确；" class="headerlink" title="备选流3：短信验证码不正确；"></a>备选流3：短信验证码不正确；</h4><h4 id="备选流4：短信验证码失效；"><a href="#备选流4：短信验证码失效；" class="headerlink" title="备选流4：短信验证码失效；"></a>备选流4：短信验证码失效；</h4><h4 id="备选流5：账户余额不足；"><a href="#备选流5：账户余额不足；" class="headerlink" title="备选流5：账户余额不足；"></a>备选流5：账户余额不足；</h4><h4 id="备选流6：退出支付"><a href="#备选流6：退出支付" class="headerlink" title="备选流6：退出支付"></a>备选流6：退出支付</h4><h3 id="2）根据事件流生成场景"><a href="#2）根据事件流生成场景" class="headerlink" title="2）根据事件流生成场景"></a>2）根据事件流生成场景</h3><h4 id="场景1：基本流"><a href="#场景1：基本流" class="headerlink" title="场景1：基本流"></a>场景1：基本流</h4><h4 id="场景2：基本流-备选流1"><a href="#场景2：基本流-备选流1" class="headerlink" title="场景2：基本流-备选流1"></a>场景2：基本流-备选流1</h4><h4 id="场景3：基本流-备选流2"><a href="#场景3：基本流-备选流2" class="headerlink" title="场景3：基本流-备选流2"></a>场景3：基本流-备选流2</h4><h4 id="场景4：基本流-备选流3"><a href="#场景4：基本流-备选流3" class="headerlink" title="场景4：基本流-备选流3"></a>场景4：基本流-备选流3</h4><h4 id="场景5：基本流-备选流4"><a href="#场景5：基本流-备选流4" class="headerlink" title="场景5：基本流-备选流4"></a>场景5：基本流-备选流4</h4><h4 id="场景6：基本流-备选流5-备选流6"><a href="#场景6：基本流-备选流5-备选流6" class="headerlink" title="场景6：基本流-备选流5-备选流6"></a>场景6：基本流-备选流5-备选流6</h4><h4 id="场景7：基本流-备选流1-备选流2-备选流3-备选流6"><a href="#场景7：基本流-备选流1-备选流2-备选流3-备选流6" class="headerlink" title="场景7：基本流-备选流1-备选流2-备选流3-备选流6"></a>场景7：基本流-备选流1-备选流2-备选流3-备选流6</h4><h4 id="场景8：基本流-备选流3-备选流4-备选流5-备选流6"><a href="#场景8：基本流-备选流3-备选流4-备选流5-备选流6" class="headerlink" title="场景8：基本流-备选流3-备选流4-备选流5-备选流6"></a>场景8：基本流-备选流3-备选流4-备选流5-备选流6</h4><h3 id="3）合并重复场景"><a href="#3）合并重复场景" class="headerlink" title="3）合并重复场景"></a>3）合并重复场景</h3><h4 id="场景1：基本流-1"><a href="#场景1：基本流-1" class="headerlink" title="场景1：基本流"></a>场景1：基本流</h4><h4 id="场景2：基本流-备选流5-备选流6"><a href="#场景2：基本流-备选流5-备选流6" class="headerlink" title="场景2：基本流-备选流5-备选流6"></a>场景2：基本流-备选流5-备选流6</h4><h4 id="场景3：基本流-备选流1-备选流2-备选流3-备选流6"><a href="#场景3：基本流-备选流1-备选流2-备选流3-备选流6" class="headerlink" title="场景3：基本流-备选流1-备选流2-备选流3-备选流6"></a>场景3：基本流-备选流1-备选流2-备选流3-备选流6</h4><h4 id="场景4：基本流-备选流3-备选流4-备选流5-备选流6"><a href="#场景4：基本流-备选流3-备选流4-备选流5-备选流6" class="headerlink" title="场景4：基本流-备选流3-备选流4-备选流5-备选流6"></a>场景4：基本流-备选流3-备选流4-备选流5-备选流6</h4><h3 id="4）根据最终的场景逐一设计测试用例"><a href="#4）根据最终的场景逐一设计测试用例" class="headerlink" title="4）根据最终的场景逐一设计测试用例"></a>4）根据最终的场景逐一设计测试用例</h3><h2 id="测试用例总结-—-测试用例设计策略"><a href="#测试用例总结-—-测试用例设计策略" class="headerlink" title="测试用例总结 — 测试用例设计策略"></a>测试用例总结 — 测试用例设计策略</h2><h3 id="1、任何情况下都要使用边界值分析法设计测试用例，经验表明这种测试用例发现程序错误的能力最强。"><a href="#1、任何情况下都要使用边界值分析法设计测试用例，经验表明这种测试用例发现程序错误的能力最强。" class="headerlink" title="1、任何情况下都要使用边界值分析法设计测试用例，经验表明这种测试用例发现程序错误的能力最强。"></a>1、任何情况下都要使用边界值分析法设计测试用例，经验表明这种测试用例发现程序错误的能力最强。</h3><h3 id="2、使用等价类划分法补充必要的测试用例。"><a href="#2、使用等价类划分法补充必要的测试用例。" class="headerlink" title="2、使用等价类划分法补充必要的测试用例。"></a>2、使用等价类划分法补充必要的测试用例。</h3><h3 id="3、如果程序规格说明中多个条件决定多个动作，每个条件的取值只有两种，并且条件和动作之间的逻辑关系明确，那么使用判定表法设计测试用例。"><a href="#3、如果程序规格说明中多个条件决定多个动作，每个条件的取值只有两种，并且条件和动作之间的逻辑关系明确，那么使用判定表法设计测试用例。" class="headerlink" title="3、如果程序规格说明中多个条件决定多个动作，每个条件的取值只有两种，并且条件和动作之间的逻辑关系明确，那么使用判定表法设计测试用例。"></a>3、如果程序规格说明中多个条件决定多个动作，每个条件的取值只有两种，并且条件和动作之间的逻辑关系明确，那么使用判定表法设计测试用例。</h3><h3 id="4、针对程序规格说明中含有多个条件的组合，输入与输出关系比较复杂的情况，使用因果图法设计测试用例。"><a href="#4、针对程序规格说明中含有多个条件的组合，输入与输出关系比较复杂的情况，使用因果图法设计测试用例。" class="headerlink" title="4、针对程序规格说明中含有多个条件的组合，输入与输出关系比较复杂的情况，使用因果图法设计测试用例。"></a>4、针对程序规格说明中含有多个条件的组合，输入与输出关系比较复杂的情况，使用因果图法设计测试用例。</h3><h3 id="5、针对程序规格说明中的复杂业务流程、操作流程等，使用场景分析法设计测试用例。"><a href="#5、针对程序规格说明中的复杂业务流程、操作流程等，使用场景分析法设计测试用例。" class="headerlink" title="5、针对程序规格说明中的复杂业务流程、操作流程等，使用场景分析法设计测试用例。"></a>5、针对程序规格说明中的复杂业务流程、操作流程等，使用场景分析法设计测试用例。</h3><h3 id="6、对照程序实现逻辑，检查已设计出的测试用例的逻辑覆盖程度，如果没有达到覆盖要求，应当分析具体情况，补充足够的测试用例。"><a href="#6、对照程序实现逻辑，检查已设计出的测试用例的逻辑覆盖程度，如果没有达到覆盖要求，应当分析具体情况，补充足够的测试用例。" class="headerlink" title="6、对照程序实现逻辑，检查已设计出的测试用例的逻辑覆盖程度，如果没有达到覆盖要求，应当分析具体情况，补充足够的测试用例。"></a>6、对照程序实现逻辑，检查已设计出的测试用例的逻辑覆盖程度，如果没有达到覆盖要求，应当分析具体情况，补充足够的测试用例。</h3><h3 id="7、分析程序规格说明，使用错误推测法补充一部分测试用例。"><a href="#7、分析程序规格说明，使用错误推测法补充一部分测试用例。" class="headerlink" title="7、分析程序规格说明，使用错误推测法补充一部分测试用例。"></a>7、分析程序规格说明，使用错误推测法补充一部分测试用例。</h3><h3 id="8、测试过程中针对具体实现，将已有测试用例未覆盖的部分，选用合适的测试用例设计方法再补充一些必要的测试用例。"><a href="#8、测试过程中针对具体实现，将已有测试用例未覆盖的部分，选用合适的测试用例设计方法再补充一些必要的测试用例。" class="headerlink" title="8、测试过程中针对具体实现，将已有测试用例未覆盖的部分，选用合适的测试用例设计方法再补充一些必要的测试用例。"></a>8、测试过程中针对具体实现，将已有测试用例未覆盖的部分，选用合适的测试用例设计方法再补充一些必要的测试用例。</h3><h2 id="测试用例总结-—-测试用例编写策略"><a href="#测试用例总结-—-测试用例编写策略" class="headerlink" title="测试用例总结 — 测试用例编写策略"></a>测试用例总结 — 测试用例编写策略</h2><h3 id="1、功能测试用例覆盖的功能点需要尽量小，方便测试执行时提取用例。"><a href="#1、功能测试用例覆盖的功能点需要尽量小，方便测试执行时提取用例。" class="headerlink" title="1、功能测试用例覆盖的功能点需要尽量小，方便测试执行时提取用例。"></a>1、功能测试用例覆盖的功能点需要尽量小，方便测试执行时提取用例。</h3><h3 id="2、对于常用控件的测试可以整理出针对控件的通用测试点，在具体的功能测试用例中就可以不再编写通用测试点已经覆盖的内容了。"><a href="#2、对于常用控件的测试可以整理出针对控件的通用测试点，在具体的功能测试用例中就可以不再编写通用测试点已经覆盖的内容了。" class="headerlink" title="2、对于常用控件的测试可以整理出针对控件的通用测试点，在具体的功能测试用例中就可以不再编写通用测试点已经覆盖的内容了。"></a>2、对于常用控件的测试可以整理出针对控件的通用测试点，在具体的功能测试用例中就可以不再编写通用测试点已经覆盖的内容了。</h3><h3 id="3、对于系统相关流程的测试用例，可以提取出来，编写有针对性的流程测试用例。"><a href="#3、对于系统相关流程的测试用例，可以提取出来，编写有针对性的流程测试用例。" class="headerlink" title="3、对于系统相关流程的测试用例，可以提取出来，编写有针对性的流程测试用例。"></a>3、对于系统相关流程的测试用例，可以提取出来，编写有针对性的流程测试用例。</h3><h3 id="4、对于业务关联性比较强的功能，可以提取出来，针对存在的业务场景编写功能测试用例。"><a href="#4、对于业务关联性比较强的功能，可以提取出来，针对存在的业务场景编写功能测试用例。" class="headerlink" title="4、对于业务关联性比较强的功能，可以提取出来，针对存在的业务场景编写功能测试用例。"></a>4、对于业务关联性比较强的功能，可以提取出来，针对存在的业务场景编写功能测试用例。</h3><h2 id="测试用例总结-—-测试用例的维护管理"><a href="#测试用例总结-—-测试用例的维护管理" class="headerlink" title="测试用例总结 — 测试用例的维护管理"></a>测试用例总结 — 测试用例的维护管理</h2><p>测试用例伴随着软件产品的整个生命周期，随着软件功能的日渐完善，测试用例也在不断改进、扩充和完善。在这个过程中，如何维护和管理测试用例将是直接影响软件测试质量的重要工作内容。</p>
<h3 id="维护测试用例的原因"><a href="#维护测试用例的原因" class="headerlink" title="维护测试用例的原因"></a>维护测试用例的原因</h3><h4 id="软件需求变更"><a href="#软件需求变更" class="headerlink" title="软件需求变更"></a>软件需求变更</h4><h4 id="需求分析错误"><a href="#需求分析错误" class="headerlink" title="需求分析错误"></a>需求分析错误</h4><h4 id="测试需求误解或遗漏"><a href="#测试需求误解或遗漏" class="headerlink" title="测试需求误解或遗漏"></a>测试需求误解或遗漏</h4><h4 id="测试用例遗漏"><a href="#测试用例遗漏" class="headerlink" title="测试用例遗漏"></a>测试用例遗漏</h4><h3 id="测试用例的维护"><a href="#测试用例的维护" class="headerlink" title="测试用例的维护"></a>测试用例的维护</h3><p>日常维护主要有测试用例修改、测试用例删除和测试用例增加。</p>
<h3 id="用例修改"><a href="#用例修改" class="headerlink" title="用例修改"></a>用例修改</h3><p>测试设计人员在设计测试用例时考虑不够全面，对测试需求的理解偏差或误解，功能实现和设计存在出入等都是造成测试用例修改的直接原因。</p>
<h3 id="用例删除"><a href="#用例删除" class="headerlink" title="用例删除"></a>用例删除</h3><p>测试用例的删除主要是因为软件相关功能发生较大变化或已去掉，对应测试用例已不适用时，就需要删除对应用例；冗余的测试用例也需要删除。</p>
<h3 id="用例增加"><a href="#用例增加" class="headerlink" title="用例增加"></a>用例增加</h3><p>测试人员在测试过程中发现有测试用例未覆盖的功能，用例评审时发现有未覆盖的测试需求，需求分析错误或收到新的需求时都需要新增对应功能的测试用例。</p>
<h3 id="用例维护注意事项"><a href="#用例维护注意事项" class="headerlink" title="用例维护注意事项"></a>用例维护注意事项</h3><h4 id="用例的维护都需要保留维护记录。"><a href="#用例的维护都需要保留维护记录。" class="headerlink" title="用例的维护都需要保留维护记录。"></a>用例的维护都需要保留维护记录。</h4><h4 id="同一软件不同现场功能出入较大的话，需要根据现场维护不同的测试用例。"><a href="#同一软件不同现场功能出入较大的话，需要根据现场维护不同的测试用例。" class="headerlink" title="同一软件不同现场功能出入较大的话，需要根据现场维护不同的测试用例。"></a>同一软件不同现场功能出入较大的话，需要根据现场维护不同的测试用例。</h4><h4 id="同一软件多版本共存的话，需要在测试用例中标注不同版本的用例差异。"><a href="#同一软件多版本共存的话，需要在测试用例中标注不同版本的用例差异。" class="headerlink" title="同一软件多版本共存的话，需要在测试用例中标注不同版本的用例差异。"></a>同一软件多版本共存的话，需要在测试用例中标注不同版本的用例差异。</h4><h3 id="测试用例的管理"><a href="#测试用例的管理" class="headerlink" title="测试用例的管理"></a>测试用例的管理</h3><p>测试用例根据公司代码和文档管理体制的不同采用对应的管理方式。如果公司资料文档使用同一个管理软件的话，将测试用例直接纳入管理软件测试相关目录即可；如果测试是作为一个完全独立的部门，相关资料文档有自己的管理软件的话，则将测试用例纳入自己软件的相关目录。</p>
<h3 id="管理测试用例的作用"><a href="#管理测试用例的作用" class="headerlink" title="管理测试用例的作用"></a>管理测试用例的作用</h3><h4 id="保护测试人员工作成果。"><a href="#保护测试人员工作成果。" class="headerlink" title="保护测试人员工作成果。"></a>保护测试人员工作成果。</h4><h4 id="测试人员变动不会影响测试工作的正常进行。"><a href="#测试人员变动不会影响测试工作的正常进行。" class="headerlink" title="测试人员变动不会影响测试工作的正常进行。"></a>测试人员变动不会影响测试工作的正常进行。</h4><h3 id="用例管理注意事项"><a href="#用例管理注意事项" class="headerlink" title="用例管理注意事项"></a>用例管理注意事项</h3><h4 id="用例设计人员只有上传和更新用例文档的权限，不具有删除用例文档的权限，删除用例文档需经过相关人员核准。"><a href="#用例设计人员只有上传和更新用例文档的权限，不具有删除用例文档的权限，删除用例文档需经过相关人员核准。" class="headerlink" title="用例设计人员只有上传和更新用例文档的权限，不具有删除用例文档的权限，删除用例文档需经过相关人员核准。"></a>用例设计人员只有上传和更新用例文档的权限，不具有删除用例文档的权限，删除用例文档需经过相关人员核准。</h4><h4 id="用例文档更新的人员、日期等历史信息需要能够查询。"><a href="#用例文档更新的人员、日期等历史信息需要能够查询。" class="headerlink" title="用例文档更新的人员、日期等历史信息需要能够查询。"></a>用例文档更新的人员、日期等历史信息需要能够查询。</h4><h4 id="用例执行人员不具有编辑用例文档的权限。"><a href="#用例执行人员不具有编辑用例文档的权限。" class="headerlink" title="用例执行人员不具有编辑用例文档的权限。"></a>用例执行人员不具有编辑用例文档的权限。</h4><h4 id="所有的用例评审结论文档都需要纳入文档管理系统。"><a href="#所有的用例评审结论文档都需要纳入文档管理系统。" class="headerlink" title="所有的用例评审结论文档都需要纳入文档管理系统。"></a>所有的用例评审结论文档都需要纳入文档管理系统。</h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;场景分析法设计测试用例-—-场景分析相关概念&quot;&gt;&lt;a href=&quot;#场景分析法设计测试用例-—-场景分析相关概念&quot; class=&quot;headerlink&quot; title=&quot;场景分析法设计测试用例 — 场景分析相关概念&quot;&gt;&lt;/a&gt;场景分析法设计测试用例 — 场景分析相关概念&lt;/h2&gt;&lt;h3 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h3&gt;&lt;p&gt;应用软件一般都是用事件触发来控制流程的，事件触发时的情景便形成了场景。&lt;/p&gt;
&lt;h3 id=&quot;事件流&quot;&gt;&lt;a href=&quot;#事件流&quot; class=&quot;headerlink&quot; title=&quot;事件流&quot;&gt;&lt;/a&gt;事件流&lt;/h3&gt;&lt;p&gt;同一事件不同的触发顺序和处理结果就形成事件流，事件流分为基本流和备选流。&lt;/p&gt;
&lt;h3 id=&quot;基本流&quot;&gt;&lt;a href=&quot;#基本流&quot; class=&quot;headerlink&quot; title=&quot;基本流&quot;&gt;&lt;/a&gt;基本流&lt;/h3&gt;&lt;p&gt;程序从开始执行直到成功结束所经过的最短路径。&lt;br&gt;
    
    </summary>
    
    
      <category term="软件测试" scheme="http://xj8c.cc/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>测试用例设计进阶（上）</title>
    <link href="http://xj8c.cc/2015/10/28/test-case-design-in-order(upper)/"/>
    <id>http://xj8c.cc/2015/10/28/test-case-design-in-order(upper)/</id>
    <published>2015-10-28T13:43:03.000Z</published>
    <updated>2017-05-26T06:29:50.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="判定表法设计测试用例-—-判定表相关概念"><a href="#判定表法设计测试用例-—-判定表相关概念" class="headerlink" title="判定表法设计测试用例 — 判定表相关概念"></a>判定表法设计测试用例 — 判定表相关概念</h2><h3 id="判定表"><a href="#判定表" class="headerlink" title="判定表"></a>判定表</h3><p>是分析和表达多逻辑条件下执行不同操作的工具。<br>判定表是由条件桩、动作桩、条件项、动作项四部分内容构成的表格。</p>
<h3 id="条件桩（Condition-Stub）"><a href="#条件桩（Condition-Stub）" class="headerlink" title="条件桩（Condition Stub）"></a>条件桩（Condition Stub）</h3><p>列出了问题的所有条件。通常认为列出条件的次序无关紧要。</p>
<h3 id="动作桩（Action-Stub）"><a href="#动作桩（Action-Stub）" class="headerlink" title="动作桩（Action Stub）"></a>动作桩（Action Stub）</h3><p>列出了问题规定可能采取的操作。这些操作的排列顺序没有约束。<br><a id="more"></a></p>
<h3 id="条件项（Condition-Entry）"><a href="#条件项（Condition-Entry）" class="headerlink" title="条件项（Condition Entry）"></a>条件项（Condition Entry）</h3><p>列出针对所列条件的取值。在所有可能情况下的真假值。</p>
<h3 id="动作项（Action-Entry）"><a href="#动作项（Action-Entry）" class="headerlink" title="动作项（Action Entry）"></a>动作项（Action Entry）</h3><p>列出在条件项的各种取值情况下应该采取的动作。</p>
<h3 id="判定表中的规则"><a href="#判定表中的规则" class="headerlink" title="判定表中的规则"></a>判定表中的规则</h3><p>任何一个条件组合的特定取值及其相应要执行的操作称为规则。在判定表中贯穿条件项和动作项的一列就是一条规则。</p>
<h3 id="判定表的化简"><a href="#判定表的化简" class="headerlink" title="判定表的化简"></a>判定表的化简</h3><p>合并判定表中两条或多条具有相同动作，并且其条件项之间存在着极为相似关系的规则这一过程。</p>
<h2 id="判定表法设计测试用例-—-使用判定表设计测试用例"><a href="#判定表法设计测试用例-—-使用判定表设计测试用例" class="headerlink" title="判定表法设计测试用例 — 使用判定表设计测试用例"></a>判定表法设计测试用例 — 使用判定表设计测试用例</h2><h3 id="判定表使用场景"><a href="#判定表使用场景" class="headerlink" title="判定表使用场景"></a>判定表使用场景</h3><p>如果程序中多个条件决定多个动作，并且每个条件的取值只有两种，且条件和动作之间的逻辑关系明确。</p>
<h3 id="判定表的优点"><a href="#判定表的优点" class="headerlink" title="判定表的优点"></a>判定表的优点</h3><p>能够将复杂的问题按照各种可能的情况全部列举出来，简明并且可以避免遗漏。</p>
<h3 id="判定表的建立步骤："><a href="#判定表的建立步骤：" class="headerlink" title="判定表的建立步骤："></a>判定表的建立步骤：</h3><h4 id="1、列出所有的条件和动作"><a href="#1、列出所有的条件和动作" class="headerlink" title="1、列出所有的条件和动作"></a>1、列出所有的条件和动作</h4><h4 id="2、确定规则的个数（假如有n个条件，每个条件有两个取值（0-1），就可以产生2的n次方种规则）"><a href="#2、确定规则的个数（假如有n个条件，每个条件有两个取值（0-1），就可以产生2的n次方种规则）" class="headerlink" title="2、确定规则的个数（假如有n个条件，每个条件有两个取值（0,1），就可以产生2的n次方种规则）"></a>2、确定规则的个数（假如有n个条件，每个条件有两个取值（0,1），就可以产生2的n次方种规则）</h4><h4 id="3、填写判定表"><a href="#3、填写判定表" class="headerlink" title="3、填写判定表"></a>3、填写判定表</h4><h4 id="4、化简判定表"><a href="#4、化简判定表" class="headerlink" title="4、化简判定表"></a>4、化简判定表</h4><p>例1    问题要求：“……对功率大于50马力的机器、维修记录不全或已运行10年以上的机器，应优先维修处理……” 。这里假定，“维修记录不全”和“优先维修处理”均已在别处有更严格的定义 。<br>1）列出所有的条件和动作</p>
<h3 id="条件：功率大于50马力-维修记录不全-已运行10年以上？"><a href="#条件：功率大于50马力-维修记录不全-已运行10年以上？" class="headerlink" title="条件：功率大于50马力?/维修记录不全?/已运行10年以上？"></a>条件：功率大于50马力?/维修记录不全?/已运行10年以上？</h3><h3 id="动作：优先维修处理-其它处理方式"><a href="#动作：优先维修处理-其它处理方式" class="headerlink" title="动作：优先维修处理/其它处理方式"></a>动作：优先维修处理/其它处理方式</h3><p>2）确定规则的个数</p>
<h3 id="这里有3个条件，每个条件有两个取值，故应有8种规则。"><a href="#这里有3个条件，每个条件有两个取值，故应有8种规则。" class="headerlink" title="这里有3个条件，每个条件有两个取值，故应有8种规则。"></a>这里有3个条件，每个条件有两个取值，故应有8种规则。</h3><p>3）填写判定表</p>
<p>4）化简判定表<br>首先，找出判定表中相似的规则。</p>
<p>5）合并相似规则，就得到了化简后的判定表。</p>
<h2 id="因果图法设计测试用例-—-因果图相关概念"><a href="#因果图法设计测试用例-—-因果图相关概念" class="headerlink" title="因果图法设计测试用例 — 因果图相关概念"></a>因果图法设计测试用例 — 因果图相关概念</h2><h3 id="因果图"><a href="#因果图" class="headerlink" title="因果图"></a>因果图</h3><p>是分析输入条件之间的联系及相互组合、输入与输出之间关系的分析方法。这里的输入就是原因，输出就是结果，所以这种分析方法称为因果图。</p>
<h3 id="因果图的关系"><a href="#因果图的关系" class="headerlink" title="因果图的关系"></a>因果图的关系</h3><p>恒等：Ci=1,Ei=1;Ci=0,Ei=0.</p>
<p>非：Ci=1,Ei=0;Ci=0,Ei=1.</p>
<p>或：C1、C2、C3有一个是1，Ei为1； C1、C2、C3全是0，Ei为0。</p>
<p>与：C1、C2、C3有一个是0，Ei为0； C1、C2、C3全是1，Ei为1。</p>
<h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><p>输入或输出状态相互之间还可能存在某些依赖关系，称为约束。</p>
<h3 id="因果图的约束"><a href="#因果图的约束" class="headerlink" title="因果图的约束"></a>因果图的约束</h3><h3 id="A、输入条件的约束有以下四类："><a href="#A、输入条件的约束有以下四类：" class="headerlink" title="A、输入条件的约束有以下四类："></a>A、输入条件的约束有以下四类：</h3><p>E约束（异）：a和b中至多有一个可能为1，即a和b不能同时为1。</p>
<p>I约束（或）：a、b和c中至少有一个必须是1，即 a、b 和c不能同时为0。</p>
<p>O约束（唯一）：a和b必须有一个，且仅有一个为1。</p>
<p>R约束（要求）：a是1时，b必须是1，即不可能a是1时b是0。</p>
<h3 id="B、输出条件约束：M约束（强制）：若结果a是1，则结果b强制为0。"><a href="#B、输出条件约束：M约束（强制）：若结果a是1，则结果b强制为0。" class="headerlink" title="B、输出条件约束：M约束（强制）：若结果a是1，则结果b强制为0。"></a>B、输出条件约束：M约束（强制）：若结果a是1，则结果b强制为0。</h3><h2 id="因果图法设计测试用例-—-使用因果图设计测试用例"><a href="#因果图法设计测试用例-—-使用因果图设计测试用例" class="headerlink" title="因果图法设计测试用例 — 使用因果图设计测试用例"></a>因果图法设计测试用例 — 使用因果图设计测试用例</h2><h3 id="因果图使用场景"><a href="#因果图使用场景" class="headerlink" title="因果图使用场景"></a>因果图使用场景</h3><p>适合于检查程序输入条件的各种组合情况，分析输入与输出之间的关系。</p>
<h3 id="因果图的优点"><a href="#因果图的优点" class="headerlink" title="因果图的优点"></a>因果图的优点</h3><p>以图形化的方式将输入与输出之间的关系、输入条件、输出条件之间的相互约束标示出来，方便生成判定表，并能避免遗漏。</p>
<h3 id="因果图法设计测试用例的步骤："><a href="#因果图法设计测试用例的步骤：" class="headerlink" title="因果图法设计测试用例的步骤："></a>因果图法设计测试用例的步骤：</h3><h4 id="1、分析软件规格说明描述-找出原因（即输入条件或输入条件的等价类）和结果（即输出条件）-并给每个原因和结果赋予一个标识符。"><a href="#1、分析软件规格说明描述-找出原因（即输入条件或输入条件的等价类）和结果（即输出条件）-并给每个原因和结果赋予一个标识符。" class="headerlink" title="1、分析软件规格说明描述, 找出原因（即输入条件或输入条件的等价类）和结果（即输出条件）, 并给每个原因和结果赋予一个标识符。"></a>1、分析软件规格说明描述, 找出原因（即输入条件或输入条件的等价类）和结果（即输出条件）, 并给每个原因和结果赋予一个标识符。</h4><h4 id="2、分析软件规格说明描述中的语义，找出原因与结果之间、原因与原因之间对应的关系，根据这些关系，画出因果图。"><a href="#2、分析软件规格说明描述中的语义，找出原因与结果之间、原因与原因之间对应的关系，根据这些关系，画出因果图。" class="headerlink" title="2、分析软件规格说明描述中的语义，找出原因与结果之间、原因与原因之间对应的关系，根据这些关系，画出因果图。"></a>2、分析软件规格说明描述中的语义，找出原因与结果之间、原因与原因之间对应的关系，根据这些关系，画出因果图。</h4><h4 id="3、由于语法或环境限制-有些原因与原因之间、原因与结果之间的组合情况不可能"><a href="#3、由于语法或环境限制-有些原因与原因之间、原因与结果之间的组合情况不可能" class="headerlink" title="3、由于语法或环境限制, 有些原因与原因之间、原因与结果之间的组合情况不可能"></a>3、由于语法或环境限制, 有些原因与原因之间、原因与结果之间的组合情况不可能</h4><p>出现，为表明这些特殊情况, 在因果图上用一些记号表明约束或限制条件。</p>
<h4 id="4、把因果图转换为判定表，并化简判定表。"><a href="#4、把因果图转换为判定表，并化简判定表。" class="headerlink" title="4、把因果图转换为判定表，并化简判定表。"></a>4、把因果图转换为判定表，并化简判定表。</h4><h4 id="5、以最终的判定表的每一列为依据设计测试用例。"><a href="#5、以最终的判定表的每一列为依据设计测试用例。" class="headerlink" title="5、以最终的判定表的每一列为依据设计测试用例。"></a>5、以最终的判定表的每一列为依据设计测试用例。</h4><p>例2    用户登录系统时需要输入用户名、用户密码、验证码，且验证码在1分钟内有效。如果用户输入的用户名、用户密码和验证码都正确则可以登录到系统；如果用户名、用户密码和验证码有一个未输入则给出对应的提示信息，如果多于一项未输入，那么提示输入次序在前的输入项；如果用户名或用户密码不正确，则提示“用户，不存在或密码不正确”；如果验证码失效给出失效提示信息。</p>
<p>输入项为空的逻辑在画因果图时不考虑，我们只分析输入错误和正确的情况。</p>
<p>1）找出原因和结果</p>
<h3 id="原因：a、用户名，b、用户密码，c、验证码"><a href="#原因：a、用户名，b、用户密码，c、验证码" class="headerlink" title="原因：a、用户名，b、用户密码，c、验证码"></a>原因：a、用户名，b、用户密码，c、验证码</h3><h3 id="结果：ab、用户不存在或密码不正确，c1、验证码不正确，c2、验证码失效，-d、登入系统"><a href="#结果：ab、用户不存在或密码不正确，c1、验证码不正确，c2、验证码失效，-d、登入系统" class="headerlink" title="结果：ab、用户不存在或密码不正确，c1、验证码不正确，c2、验证码失效， d、登入系统"></a>结果：ab、用户不存在或密码不正确，c1、验证码不正确，c2、验证码失效， d、登入系统</h3><p>2、3）分析因果关系，画出因果图，并在因果图上添加相关约束</p>
<p>4）将因果图转化为判定表，并化简</p>
<p>5）以最终判定表的每一列为依据设计测试用例</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;判定表法设计测试用例-—-判定表相关概念&quot;&gt;&lt;a href=&quot;#判定表法设计测试用例-—-判定表相关概念&quot; class=&quot;headerlink&quot; title=&quot;判定表法设计测试用例 — 判定表相关概念&quot;&gt;&lt;/a&gt;判定表法设计测试用例 — 判定表相关概念&lt;/h2&gt;&lt;h3 id=&quot;判定表&quot;&gt;&lt;a href=&quot;#判定表&quot; class=&quot;headerlink&quot; title=&quot;判定表&quot;&gt;&lt;/a&gt;判定表&lt;/h3&gt;&lt;p&gt;是分析和表达多逻辑条件下执行不同操作的工具。&lt;br&gt;判定表是由条件桩、动作桩、条件项、动作项四部分内容构成的表格。&lt;/p&gt;
&lt;h3 id=&quot;条件桩（Condition-Stub）&quot;&gt;&lt;a href=&quot;#条件桩（Condition-Stub）&quot; class=&quot;headerlink&quot; title=&quot;条件桩（Condition Stub）&quot;&gt;&lt;/a&gt;条件桩（Condition Stub）&lt;/h3&gt;&lt;p&gt;列出了问题的所有条件。通常认为列出条件的次序无关紧要。&lt;/p&gt;
&lt;h3 id=&quot;动作桩（Action-Stub）&quot;&gt;&lt;a href=&quot;#动作桩（Action-Stub）&quot; class=&quot;headerlink&quot; title=&quot;动作桩（Action Stub）&quot;&gt;&lt;/a&gt;动作桩（Action Stub）&lt;/h3&gt;&lt;p&gt;列出了问题规定可能采取的操作。这些操作的排列顺序没有约束。&lt;br&gt;
    
    </summary>
    
    
      <category term="软件测试" scheme="http://xj8c.cc/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>边界值分析法相关概念 — 边界点相关概念</title>
    <link href="http://xj8c.cc/2015/10/25/boundary-value/"/>
    <id>http://xj8c.cc/2015/10/25/boundary-value/</id>
    <published>2015-10-25T05:21:45.000Z</published>
    <updated>2017-05-26T06:29:50.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="边界点分为上点、内点和离点"><a href="#边界点分为上点、内点和离点" class="headerlink" title="边界点分为上点、内点和离点"></a>边界点分为上点、内点和离点</h2><h3 id="上点：就是边界上的点，不管它是开区间还是闭区间，就是说，如果该点是封闭的，那上点就在域范围内，如果该点是开放的，那上点就在域范围外。"><a href="#上点：就是边界上的点，不管它是开区间还是闭区间，就是说，如果该点是封闭的，那上点就在域范围内，如果该点是开放的，那上点就在域范围外。" class="headerlink" title="上点：就是边界上的点，不管它是开区间还是闭区间，就是说，如果该点是封闭的，那上点就在域范围内，如果该点是开放的，那上点就在域范围外。"></a>上点：就是边界上的点，不管它是开区间还是闭区间，就是说，如果该点是封闭的，那上点就在域范围内，如果该点是开放的，那上点就在域范围外。</h3><h3 id="内点：就是域范围内的任意一个点。"><a href="#内点：就是域范围内的任意一个点。" class="headerlink" title="内点：就是域范围内的任意一个点。"></a>内点：就是域范围内的任意一个点。</h3><h3 id="离点：就是离上点最近的一个点，如果边界是封闭的，那离点就是域范围外离上点最近的点，如果边界是开的，那离点就是域范围内离上点最近的点。"><a href="#离点：就是离上点最近的一个点，如果边界是封闭的，那离点就是域范围外离上点最近的点，如果边界是开的，那离点就是域范围内离上点最近的点。" class="headerlink" title="离点：就是离上点最近的一个点，如果边界是封闭的，那离点就是域范围外离上点最近的点，如果边界是开的，那离点就是域范围内离上点最近的点。"></a>离点：就是离上点最近的一个点，如果边界是封闭的，那离点就是域范围外离上点最近的点，如果边界是开的，那离点就是域范围内离上点最近的点。</h3><h2 id="边界值分析法相关概念-—-边界值分析法的概念"><a href="#边界值分析法相关概念-—-边界值分析法的概念" class="headerlink" title="边界值分析法相关概念 — 边界值分析法的概念"></a>边界值分析法相关概念 — 边界值分析法的概念</h2><a id="more"></a>
<p>就是对输入或输出域的边界值进行测试的一种黑盒测试方法。通常边界值分析法是作为对等价类划分法的补充，这种情况下，其测试用例来自等价类的边界。</p>
<h2 id="边界值分析法相关概念-—-与等价类划分法的区别"><a href="#边界值分析法相关概念-—-与等价类划分法的区别" class="headerlink" title="边界值分析法相关概念 — 与等价类划分法的区别"></a>边界值分析法相关概念 — 与等价类划分法的区别</h2><h3 id="边界值分析法不是从某等价类中随便挑一个作为代表，而是使这个等价类的每个边界都要作为测试条件。"><a href="#边界值分析法不是从某等价类中随便挑一个作为代表，而是使这个等价类的每个边界都要作为测试条件。" class="headerlink" title="边界值分析法不是从某等价类中随便挑一个作为代表，而是使这个等价类的每个边界都要作为测试条件。"></a>边界值分析法不是从某等价类中随便挑一个作为代表，而是使这个等价类的每个边界都要作为测试条件。</h3><h3 id="边界值分析法不仅考虑输入条件，还要考虑程序输出产生的测试情况。"><a href="#边界值分析法不仅考虑输入条件，还要考虑程序输出产生的测试情况。" class="headerlink" title="边界值分析法不仅考虑输入条件，还要考虑程序输出产生的测试情况。"></a>边界值分析法不仅考虑输入条件，还要考虑程序输出产生的测试情况。</h3><h2 id="使用边界值分析法设计测试用例-—-确定边界值的原则"><a href="#使用边界值分析法设计测试用例-—-确定边界值的原则" class="headerlink" title="使用边界值分析法设计测试用例 — 确定边界值的原则"></a>使用边界值分析法设计测试用例 — 确定边界值的原则</h2><h3 id="原则一"><a href="#原则一" class="headerlink" title="原则一"></a>原则一</h3><p>如果输入或输出条件规定了取值范围，则应该以该范围的边界值及边界附近的值作为测试数据。<br>例1.1  工人的工龄范围是大于等于0，小于等于50的整数。</p>
<h3 id="边界值：-1，0，50，51"><a href="#边界值：-1，0，50，51" class="headerlink" title="边界值：-1，0，50，51"></a>边界值：-1，0，50，51</h3><p>例1.2  用户登录软件系统时，软件根据用户的权限加载相关模块功能。</p>
<h3 id="边界值：没有权限，有一个模块的权限，有所有模块的权限。"><a href="#边界值：没有权限，有一个模块的权限，有所有模块的权限。" class="headerlink" title="边界值：没有权限，有一个模块的权限，有所有模块的权限。"></a>边界值：没有权限，有一个模块的权限，有所有模块的权限。</h3><h3 id="原则二"><a href="#原则二" class="headerlink" title="原则二"></a>原则二</h3><p>如果输入或输出条件规定了值的个数，则用最大个数、最小个数、比最小个数少1、比最大个数多1的数作为测试数据。<br>例2.1  报表定义中限定报表字段至少有两个字段，至多不能超过10个字段。</p>
<h3 id="边界值：1，2，10，11"><a href="#边界值：1，2，10，11" class="headerlink" title="边界值：1，2，10，11"></a>边界值：1，2，10，11</h3><p>例2.2  查询结果多于15条记录时需要提供翻页功能。</p>
<h3 id="边界值：-0，1，15，16"><a href="#边界值：-0，1，15，16" class="headerlink" title="边界值： 0，1，15，16"></a>边界值： 0，1，15，16</h3><h3 id="原则三"><a href="#原则三" class="headerlink" title="原则三"></a>原则三</h3><p>如果程序规格说明书中提到的输入或输出是一个有序的集合，应该注意选取有序集合的第一个和最后一个元素作为测试数据。<br>例3.1  下拉列表选择控件的测试。</p>
<h3 id="边界值：下拉列表第一个选项，下拉列表最后一个选项"><a href="#边界值：下拉列表第一个选项，下拉列表最后一个选项" class="headerlink" title="边界值：下拉列表第一个选项，下拉列表最后一个选项"></a>边界值：下拉列表第一个选项，下拉列表最后一个选项</h3><p>例3.2  系统在编号从1-100的拓扑图中定位包含网元A的拓扑图，将含有网元A的拓扑图名称按照编号从小到大的顺序显示出来，在单击拓扑图名称后定位出网元A在拓扑图中的位置。</p>
<h3 id="边界值：在包含网元A的编号最小的拓扑图中定位，在包含网元A的编号最大的拓扑图中定位。"><a href="#边界值：在包含网元A的编号最小的拓扑图中定位，在包含网元A的编号最大的拓扑图中定位。" class="headerlink" title="边界值：在包含网元A的编号最小的拓扑图中定位，在包含网元A的编号最大的拓扑图中定位。"></a>边界值：在包含网元A的编号最小的拓扑图中定位，在包含网元A的编号最大的拓扑图中定位。</h3><h3 id="原则四"><a href="#原则四" class="headerlink" title="原则四"></a>原则四</h3><p>如果程序中使用了一个内部数据结构，则应当选择这个内部数据结构的边界上的值作为测试数据。<br>例4  程序根据用户近三个月的消费状况给用户评级，月均消费超过3000元的用户或至少一个月消费超过5000的用户为优级用户，月均消费超过1500元或至少一个月消费超过3000元的为良级用户，月均消费超过800元的为潜力用户。</p>
<h3 id="边界值：月均消费为-3000-3001-1500-1501-799-800-，不满足月均消费数据但某月消费-5000-5001-3500-3501"><a href="#边界值：月均消费为-3000-3001-1500-1501-799-800-，不满足月均消费数据但某月消费-5000-5001-3500-3501" class="headerlink" title="边界值：月均消费为 {3000,3001,1500,1501,799,800}，不满足月均消费数据但某月消费{5000,5001,3500,3501}"></a>边界值：月均消费为 {3000,3001,1500,1501,799,800}，不满足月均消费数据但某月消费{5000,5001,3500,3501}</h3><h2 id="使用边界值分析法设计测试用例-—-设计测试用例的原则"><a href="#使用边界值分析法设计测试用例-—-设计测试用例的原则" class="headerlink" title="使用边界值分析法设计测试用例 — 设计测试用例的原则"></a>使用边界值分析法设计测试用例 — 设计测试用例的原则</h2><h3 id="给所有划分出来的等价类编号"><a href="#给所有划分出来的等价类编号" class="headerlink" title="给所有划分出来的等价类编号"></a>给所有划分出来的等价类编号</h3><h3 id="对所有有效等价类逐个确定边界值"><a href="#对所有有效等价类逐个确定边界值" class="headerlink" title="对所有有效等价类逐个确定边界值"></a>对所有有效等价类逐个确定边界值</h3><h3 id="对所有无效等价类逐个确定边界值"><a href="#对所有无效等价类逐个确定边界值" class="headerlink" title="对所有无效等价类逐个确定边界值"></a>对所有无效等价类逐个确定边界值</h3><h3 id="合并等价类和边界值设计出的测试数据中重复的数据"><a href="#合并等价类和边界值设计出的测试数据中重复的数据" class="headerlink" title="合并等价类和边界值设计出的测试数据中重复的数据"></a>合并等价类和边界值设计出的测试数据中重复的数据</h3><h3 id="分析程序规格说明书，应用确定边界值的各原则找出其它的边界值"><a href="#分析程序规格说明书，应用确定边界值的各原则找出其它的边界值" class="headerlink" title="分析程序规格说明书，应用确定边界值的各原则找出其它的边界值"></a>分析程序规格说明书，应用确定边界值的各原则找出其它的边界值</h3><h2 id="使用边界值分析法设计测试用例-—-错误推测法"><a href="#使用边界值分析法设计测试用例-—-错误推测法" class="headerlink" title="使用边界值分析法设计测试用例 — 错误推测法"></a>使用边界值分析法设计测试用例 — 错误推测法</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>就是根据经验和直觉推测程序中可能存在的各种错误，从而有针对性地设计测试用例的方法。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>列举出程序中所有可能有的错误和容易发生错误的特殊情况，根据它们选择测试用例。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;边界点分为上点、内点和离点&quot;&gt;&lt;a href=&quot;#边界点分为上点、内点和离点&quot; class=&quot;headerlink&quot; title=&quot;边界点分为上点、内点和离点&quot;&gt;&lt;/a&gt;边界点分为上点、内点和离点&lt;/h2&gt;&lt;h3 id=&quot;上点：就是边界上的点，不管它是开区间还是闭区间，就是说，如果该点是封闭的，那上点就在域范围内，如果该点是开放的，那上点就在域范围外。&quot;&gt;&lt;a href=&quot;#上点：就是边界上的点，不管它是开区间还是闭区间，就是说，如果该点是封闭的，那上点就在域范围内，如果该点是开放的，那上点就在域范围外。&quot; class=&quot;headerlink&quot; title=&quot;上点：就是边界上的点，不管它是开区间还是闭区间，就是说，如果该点是封闭的，那上点就在域范围内，如果该点是开放的，那上点就在域范围外。&quot;&gt;&lt;/a&gt;上点：就是边界上的点，不管它是开区间还是闭区间，就是说，如果该点是封闭的，那上点就在域范围内，如果该点是开放的，那上点就在域范围外。&lt;/h3&gt;&lt;h3 id=&quot;内点：就是域范围内的任意一个点。&quot;&gt;&lt;a href=&quot;#内点：就是域范围内的任意一个点。&quot; class=&quot;headerlink&quot; title=&quot;内点：就是域范围内的任意一个点。&quot;&gt;&lt;/a&gt;内点：就是域范围内的任意一个点。&lt;/h3&gt;&lt;h3 id=&quot;离点：就是离上点最近的一个点，如果边界是封闭的，那离点就是域范围外离上点最近的点，如果边界是开的，那离点就是域范围内离上点最近的点。&quot;&gt;&lt;a href=&quot;#离点：就是离上点最近的一个点，如果边界是封闭的，那离点就是域范围外离上点最近的点，如果边界是开的，那离点就是域范围内离上点最近的点。&quot; class=&quot;headerlink&quot; title=&quot;离点：就是离上点最近的一个点，如果边界是封闭的，那离点就是域范围外离上点最近的点，如果边界是开的，那离点就是域范围内离上点最近的点。&quot;&gt;&lt;/a&gt;离点：就是离上点最近的一个点，如果边界是封闭的，那离点就是域范围外离上点最近的点，如果边界是开的，那离点就是域范围内离上点最近的点。&lt;/h3&gt;&lt;h2 id=&quot;边界值分析法相关概念-—-边界值分析法的概念&quot;&gt;&lt;a href=&quot;#边界值分析法相关概念-—-边界值分析法的概念&quot; class=&quot;headerlink&quot; title=&quot;边界值分析法相关概念 — 边界值分析法的概念&quot;&gt;&lt;/a&gt;边界值分析法相关概念 — 边界值分析法的概念&lt;/h2&gt;
    
    </summary>
    
    
      <category term="软件测试" scheme="http://xj8c.cc/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>软件测试基础知识</title>
    <link href="http://xj8c.cc/2015/10/24/basic-knowledge-of-software-testing/"/>
    <id>http://xj8c.cc/2015/10/24/basic-knowledge-of-software-testing/</id>
    <published>2015-10-24T14:18:50.000Z</published>
    <updated>2017-05-26T06:29:50.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用的软件测试模型-—-模型的概念和作用"><a href="#常用的软件测试模型-—-模型的概念和作用" class="headerlink" title="常用的软件测试模型 — 模型的概念和作用"></a>常用的软件测试模型 — 模型的概念和作用</h2><h3 id="模型的概念"><a href="#模型的概念" class="headerlink" title="模型的概念"></a>模型的概念</h3><p>通过主观意识借助实体或者虚拟表现、构成客观阐述形态、结构的一种表达目的的物件。在软件行业来说就是：对系统实现步骤或系统知识的抽象表示。</p>
<h3 id="模型的作用"><a href="#模型的作用" class="headerlink" title="模型的作用"></a>模型的作用</h3><p>1.参与构造软件的人员之间沟通的基础<br>2.指导具体的软件实现过程<br>3.管理者制定相关工作计划的基础<br><a id="more"></a></p>
<h2 id="常用的软件测试模型-—-V模型"><a href="#常用的软件测试模型-—-V模型" class="headerlink" title="常用的软件测试模型 — V模型"></a>常用的软件测试模型 — V模型</h2><h2 id="常用的软件测试模型-—-W模型"><a href="#常用的软件测试模型-—-W模型" class="headerlink" title="常用的软件测试模型 — W模型"></a>常用的软件测试模型 — W模型</h2><h2 id="常用的软件测试模型-—-X模型"><a href="#常用的软件测试模型-—-X模型" class="headerlink" title="常用的软件测试模型 — X模型"></a>常用的软件测试模型 — X模型</h2><h2 id="常用的软件测试模型-—-H模型"><a href="#常用的软件测试模型-—-H模型" class="headerlink" title="常用的软件测试模型 — H模型"></a>常用的软件测试模型 — H模型</h2><h2 id="软件测试的阶段划分-—-软件测试的各个阶段"><a href="#软件测试的阶段划分-—-软件测试的各个阶段" class="headerlink" title="软件测试的阶段划分 — 软件测试的各个阶段"></a>软件测试的阶段划分 — 软件测试的各个阶段</h2><h2 id="软件测试的阶段划分-—-软件测试各阶段工作重点"><a href="#软件测试的阶段划分-—-软件测试各阶段工作重点" class="headerlink" title="软件测试的阶段划分 — 软件测试各阶段工作重点"></a>软件测试的阶段划分 — 软件测试各阶段工作重点</h2><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>单元模块内的功能测试、边界测试、容错测试、界面测试、控制流和数据流测试，以及模块内的业务流程测试等。</p>
<h3 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h3><p>系统集成以后的相关接口测试、功能测试、容错测试、约束测试，跨模块的业务流程测试等。</p>
<h3 id="系统测试"><a href="#系统测试" class="headerlink" title="系统测试"></a>系统测试</h3><p>系统性的初始化测试、功能测试、业务处理和数据处理测试、性能测试、压力测试、安装卸载测试等。</p>
<h3 id="验收测试"><a href="#验收测试" class="headerlink" title="验收测试"></a>验收测试</h3><p>在用户现场和用户一起对系统进行功能确认、用户需求确认、备份恢复测试、安全性测试等。</p>
<h3 id="回归测试"><a href="#回归测试" class="headerlink" title="回归测试"></a>回归测试</h3><p>系统使用过程中发现问题修改完成以后，测试对应的问题是否修改好了，测试新修改的功能是否引发新的缺陷，测试与修改代码相关的其它程序功能是否依然正确。</p>
<h2 id="测试用例相关知识-—-测试用例的概念"><a href="#测试用例相关知识-—-测试用例的概念" class="headerlink" title="测试用例相关知识 — 测试用例的概念"></a>测试用例相关知识 — 测试用例的概念</h2><p>为了特定的测试目的而设计的具有测试输入、测试执行条件、预期结果及结果验证方法的文档。</p>
<h2 id="测试用例相关知识-—-测试用例的特点"><a href="#测试用例相关知识-—-测试用例的特点" class="headerlink" title="测试用例相关知识 — 测试用例的特点"></a>测试用例相关知识 — 测试用例的特点</h2><p>1.最有可能抓住错误的<br>2.不是重复的、多余的<br>3.一组相似测试用例中最有效的<br>4.既不是太简单，也不是太复杂</p>
<h2 id="测试用例相关知识-—-测试用例设计原则"><a href="#测试用例相关知识-—-测试用例设计原则" class="headerlink" title="测试用例相关知识 — 测试用例设计原则"></a>测试用例相关知识 — 测试用例设计原则</h2><p>1.测试用例的代表性<br>2.需求的可追溯性<br>3.测试结果的可判定性、可再现性<br>4.测试用例粒度的合适性</p>
<h2 id="Bug相关知识-—-Bug的概念"><a href="#Bug相关知识-—-Bug的概念" class="headerlink" title="Bug相关知识 — Bug的概念"></a>Bug相关知识 — Bug的概念</h2><p>Bug就是程序的缺陷，是指软件程序运行过程中由于程序本身有问题导致的功能不正常、体验不佳、数据丢失、死机、非正常中断等现象。</p>
<h2 id="Bug相关知识-—-Bug相关要素"><a href="#Bug相关知识-—-Bug相关要素" class="headerlink" title="Bug相关知识 — Bug相关要素"></a>Bug相关知识 — Bug相关要素</h2><h2 id="Bug相关知识-—-Bug记录原则及技巧"><a href="#Bug相关知识-—-Bug记录原则及技巧" class="headerlink" title="Bug相关知识 — Bug记录原则及技巧"></a>Bug相关知识 — Bug记录原则及技巧</h2><h3 id="Bug记录原则"><a href="#Bug记录原则" class="headerlink" title="Bug记录原则"></a>Bug记录原则</h3><p>1.发现的所有问题都要记录Bug<br>2.Bug描述要清晰准确<br>3.避免重复Bug</p>
<h3 id="Bug记录技巧"><a href="#Bug记录技巧" class="headerlink" title="Bug记录技巧"></a>Bug记录技巧</h3><p>描述简明扼要，最好附带错误截图，尽量抓取错误日志，说清错误发生场景，可附带自己对错误的推测分析。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;常用的软件测试模型-—-模型的概念和作用&quot;&gt;&lt;a href=&quot;#常用的软件测试模型-—-模型的概念和作用&quot; class=&quot;headerlink&quot; title=&quot;常用的软件测试模型 — 模型的概念和作用&quot;&gt;&lt;/a&gt;常用的软件测试模型 — 模型的概念和作用&lt;/h2&gt;&lt;h3 id=&quot;模型的概念&quot;&gt;&lt;a href=&quot;#模型的概念&quot; class=&quot;headerlink&quot; title=&quot;模型的概念&quot;&gt;&lt;/a&gt;模型的概念&lt;/h3&gt;&lt;p&gt;通过主观意识借助实体或者虚拟表现、构成客观阐述形态、结构的一种表达目的的物件。在软件行业来说就是：对系统实现步骤或系统知识的抽象表示。&lt;/p&gt;
&lt;h3 id=&quot;模型的作用&quot;&gt;&lt;a href=&quot;#模型的作用&quot; class=&quot;headerlink&quot; title=&quot;模型的作用&quot;&gt;&lt;/a&gt;模型的作用&lt;/h3&gt;&lt;p&gt;1.参与构造软件的人员之间沟通的基础&lt;br&gt;2.指导具体的软件实现过程&lt;br&gt;3.管理者制定相关工作计划的基础&lt;br&gt;
    
    </summary>
    
    
      <category term="软件测试" scheme="http://xj8c.cc/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>软件测试概述</title>
    <link href="http://xj8c.cc/2015/10/24/overview-of-software-testing/"/>
    <id>http://xj8c.cc/2015/10/24/overview-of-software-testing/</id>
    <published>2015-10-24T14:06:08.000Z</published>
    <updated>2017-05-26T06:29:50.493Z</updated>
    
    <content type="html"><![CDATA[<h2 id="软件测试的概念及分类-—-软件测试相关概念"><a href="#软件测试的概念及分类-—-软件测试相关概念" class="headerlink" title="软件测试的概念及分类 — 软件测试相关概念"></a>软件测试的概念及分类 — 软件测试相关概念</h2><h3 id="软件测试的定义"><a href="#软件测试的定义" class="headerlink" title="软件测试的定义"></a>软件测试的定义</h3><p>通过手工或自动化的手段来运行或测定某个软件产品系统的过程，目的在于检测软件产品是否满足规定的需求，或者弄清楚预期结果与实际结果之间的差别。</p>
<h3 id="软件测试的目的"><a href="#软件测试的目的" class="headerlink" title="软件测试的目的"></a>软件测试的目的</h3><p>1. 是为了发现程序中存在的错误而执行程序；<br>2. 是为了证明程序有错，而不是证明程序无错误。<br><a id="more"></a></p>
<h3 id="软件测试工作流程"><a href="#软件测试工作流程" class="headerlink" title="软件测试工作流程"></a>软件测试工作流程</h3><h3 id="软件测试的阶段划分"><a href="#软件测试的阶段划分" class="headerlink" title="软件测试的阶段划分"></a>软件测试的阶段划分</h3><h2 id="软件测试的概念及分类-—-软件测试类型划分"><a href="#软件测试的概念及分类-—-软件测试类型划分" class="headerlink" title="软件测试的概念及分类 — 软件测试类型划分"></a>软件测试的概念及分类 — 软件测试类型划分</h2><h3 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h3><p>测试软件各个功能模块处理是否正确，业务逻辑是否正确，数据流转、呈现、处理和存储是否正确。</p>
<h3 id="用户界面测试"><a href="#用户界面测试" class="headerlink" title="用户界面测试"></a>用户界面测试</h3><p>测试用户界面是否美观，界面设计是否人性化、易操作，提示是否友好完善，不同屏幕分辨率下各界面显示是否正确、美观，软件支持的不同语言版本下，各界面显示的文字是否正确、美观等。</p>
<h3 id="兼容性测试"><a href="#兼容性测试" class="headerlink" title="兼容性测试"></a>兼容性测试</h3><p>主要测试浏览器兼容性、操作系统兼容性、硬件兼容性。 </p>
<h3 id="安装、卸载测试"><a href="#安装、卸载测试" class="headerlink" title="安装、卸载测试"></a>安装、卸载测试</h3><p>正常情况下软件安装完成后可以正常运行，可以完全卸载；<br>用户无权限、硬件资源不满足等异常情况下能够给出准确的提示信息。 </p>
<h3 id="安全和访问控制测试"><a href="#安全和访问控制测试" class="headerlink" title="安全和访问控制测试"></a>安全和访问控制测试</h3><h4 id="分应用程序级别、系统级别两个层次。"><a href="#分应用程序级别、系统级别两个层次。" class="headerlink" title="分应用程序级别、系统级别两个层次。"></a>分应用程序级别、系统级别两个层次。</h4><p>1. 应用程序级别主要是用户登录、数据和功能权限控制的正确性。<br>2. 系统级别主要是服务器的访问控制和用户权限设置。</p>
<h3 id="故障转移和恢复测试"><a href="#故障转移和恢复测试" class="headerlink" title="故障转移和恢复测试"></a>故障转移和恢复测试</h3><p>1. 主服务器不能服务备用服务器接管服务<br>2. 主服务器恢复服务备用服务器停止服务</p>
<h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><p>包括负载测试、压力测试、并发测试、可靠性测试、失效恢复测试等。</p>
<h3 id="发布测试"><a href="#发布测试" class="headerlink" title="发布测试"></a>发布测试</h3><p>测试软件产品附带的各种说明书、帮助文档等。</p>
<h2 id="软件测试入行指导和职业发展之路-—-软件测试入行要掌握的知识和技能"><a href="#软件测试入行指导和职业发展之路-—-软件测试入行要掌握的知识和技能" class="headerlink" title="软件测试入行指导和职业发展之路 — 软件测试入行要掌握的知识和技能"></a>软件测试入行指导和职业发展之路 — 软件测试入行要掌握的知识和技能</h2><h3 id="软件测试相关的概念、术语、测试工作流程"><a href="#软件测试相关的概念、术语、测试工作流程" class="headerlink" title="软件测试相关的概念、术语、测试工作流程"></a>软件测试相关的概念、术语、测试工作流程</h3><h3 id="与人沟通、表述看法的能力"><a href="#与人沟通、表述看法的能力" class="headerlink" title="与人沟通、表述看法的能力"></a>与人沟通、表述看法的能力</h3><h3 id="测试用例设计方法"><a href="#测试用例设计方法" class="headerlink" title="测试用例设计方法"></a>测试用例设计方法</h3><h3 id="基本的程序逻辑结构"><a href="#基本的程序逻辑结构" class="headerlink" title="基本的程序逻辑结构"></a>基本的程序逻辑结构</h3><h3 id="基本的数据库操作"><a href="#基本的数据库操作" class="headerlink" title="基本的数据库操作"></a>基本的数据库操作</h3><h3 id="服务器日志查看方法"><a href="#服务器日志查看方法" class="headerlink" title="服务器日志查看方法"></a>服务器日志查看方法</h3><h2 id="软件测试入行指导和职业发展之路-—-测试从业人员的持续学习"><a href="#软件测试入行指导和职业发展之路-—-测试从业人员的持续学习" class="headerlink" title="软件测试入行指导和职业发展之路 — 测试从业人员的持续学习"></a>软件测试入行指导和职业发展之路 — 测试从业人员的持续学习</h2><h3 id="软件所服务行业的业务知识"><a href="#软件所服务行业的业务知识" class="headerlink" title="软件所服务行业的业务知识"></a>软件所服务行业的业务知识</h3><h3 id="公司软件测试涉及的相关工具"><a href="#公司软件测试涉及的相关工具" class="headerlink" title="公司软件测试涉及的相关工具"></a>公司软件测试涉及的相关工具</h3><h3 id="提高个人工作效率和质量的工具"><a href="#提高个人工作效率和质量的工具" class="headerlink" title="提高个人工作效率和质量的工具"></a>提高个人工作效率和质量的工具</h3><h3 id="提高测试团队工作效率的方法或工具"><a href="#提高测试团队工作效率的方法或工具" class="headerlink" title="提高测试团队工作效率的方法或工具"></a>提高测试团队工作效率的方法或工具</h3><h2 id="软件测试入行指导和职业发展之路-—-测试从业人员职业发展之路"><a href="#软件测试入行指导和职业发展之路-—-测试从业人员职业发展之路" class="headerlink" title="软件测试入行指导和职业发展之路 — 测试从业人员职业发展之路"></a>软件测试入行指导和职业发展之路 — 测试从业人员职业发展之路</h2><h2 id="软件测试的生命周期及原则-—-软件测试的生命周期"><a href="#软件测试的生命周期及原则-—-软件测试的生命周期" class="headerlink" title="软件测试的生命周期及原则 — 软件测试的生命周期"></a>软件测试的生命周期及原则 — 软件测试的生命周期</h2><h2 id="软件测试的生命周期及原则-—-软件测试的原则"><a href="#软件测试的生命周期及原则-—-软件测试的原则" class="headerlink" title="软件测试的生命周期及原则 — 软件测试的原则"></a>软件测试的生命周期及原则 — 软件测试的原则</h2><h3 id="软件测试的基本原则"><a href="#软件测试的基本原则" class="headerlink" title="软件测试的基本原则"></a>软件测试的基本原则</h3><p>站在用户的角度，从需求出发，对软件进行全面的、深入的测试，尽早、尽可多地发现Bug，并跟踪和分析软件中存在的问题，对不足之处提出质疑和改进意见。</p>
<h3 id="软件测试的具体原则"><a href="#软件测试的具体原则" class="headerlink" title="软件测试的具体原则"></a>软件测试的具体原则</h3><p>1、准备详尽的测试工作计划，并及时维护。<br>2、所有测试的标准都应该建立在需求之上。<br>3、事先定义好产品的质量标准，并不遗余力的去执行。<br>4、尽可能早的开始测试工作。<br>5、避免让程序员测试自己的程序。<br>6、测试用例是设计出来的，不是写出来的。<br>7、对发现错误较多的程序段，应进行更深入的测试；对于出错多的程序员编写的程序同样需要给予特别关注。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;软件测试的概念及分类-—-软件测试相关概念&quot;&gt;&lt;a href=&quot;#软件测试的概念及分类-—-软件测试相关概念&quot; class=&quot;headerlink&quot; title=&quot;软件测试的概念及分类 — 软件测试相关概念&quot;&gt;&lt;/a&gt;软件测试的概念及分类 — 软件测试相关概念&lt;/h2&gt;&lt;h3 id=&quot;软件测试的定义&quot;&gt;&lt;a href=&quot;#软件测试的定义&quot; class=&quot;headerlink&quot; title=&quot;软件测试的定义&quot;&gt;&lt;/a&gt;软件测试的定义&lt;/h3&gt;&lt;p&gt;通过手工或自动化的手段来运行或测定某个软件产品系统的过程，目的在于检测软件产品是否满足规定的需求，或者弄清楚预期结果与实际结果之间的差别。&lt;/p&gt;
&lt;h3 id=&quot;软件测试的目的&quot;&gt;&lt;a href=&quot;#软件测试的目的&quot; class=&quot;headerlink&quot; title=&quot;软件测试的目的&quot;&gt;&lt;/a&gt;软件测试的目的&lt;/h3&gt;&lt;p&gt;1. 是为了发现程序中存在的错误而执行程序；&lt;br&gt;2. 是为了证明程序有错，而不是证明程序无错误。&lt;br&gt;
    
    </summary>
    
    
      <category term="软件测试" scheme="http://xj8c.cc/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>XML学习笔记(一)</title>
    <link href="http://xj8c.cc/2015/10/20/xml-note-1/"/>
    <id>http://xj8c.cc/2015/10/20/xml-note-1/</id>
    <published>2015-10-20T14:52:19.000Z</published>
    <updated>2017-05-26T06:29:50.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Xml简单的历史介绍"><a href="#Xml简单的历史介绍" class="headerlink" title="Xml简单的历史介绍"></a>Xml简单的历史介绍</h2><h3 id="1969-gml-通用标记语言-主要的目的时候要在不同的机器进行通信的数据规范"><a href="#1969-gml-通用标记语言-主要的目的时候要在不同的机器进行通信的数据规范" class="headerlink" title="1969  gml  (通用标记语言)  [主要的目的时候要在不同的机器进行通信的数据规范]"></a>1969  gml  (通用标记语言)  [主要的目的时候要在不同的机器进行通信的数据规范]</h3><h3 id="1985-sgml-标准通用标记语言"><a href="#1985-sgml-标准通用标记语言" class="headerlink" title="1985  sgml  (标准通用标记语言)"></a>1985  sgml  (标准通用标记语言)</h3><h3 id="1993-html-万维网"><a href="#1993-html-万维网" class="headerlink" title="1993  html  (万维网)"></a>1993  html  (万维网)</h3><h3 id="1998-xml"><a href="#1998-xml" class="headerlink" title="1998  xml"></a>1998  xml</h3><a id="more"></a>
<h2 id="Html语言本身是有一些缺陷的"><a href="#Html语言本身是有一些缺陷的" class="headerlink" title="Html语言本身是有一些缺陷的"></a>Html语言本身是有一些缺陷的</h2><h3 id="1-标记不能自定义"><a href="#1-标记不能自定义" class="headerlink" title="1.标记不能自定义"></a>1.标记不能自定义</h3><h3 id="2-Html本身缺少一些含义"><a href="#2-Html本身缺少一些含义" class="headerlink" title="2.Html本身缺少一些含义"></a>2.Html本身缺少一些含义</h3><h3 id="3-Html本身没有真正的国际化"><a href="#3-Html本身没有真正的国际化" class="headerlink" title="3.Html本身没有真正的国际化"></a>3.Html本身没有真正的国际化</h3><p>Html    -&gt;xhtml-&gt;Xml: Extensible Markup Language 可扩展标记语言</p>
<h2 id="Xml的特点"><a href="#Xml的特点" class="headerlink" title="Xml的特点"></a>Xml的特点</h2><h3 id="1-xml描述的是结构和语义，而不是格式化"><a href="#1-xml描述的是结构和语义，而不是格式化" class="headerlink" title="1.xml描述的是结构和语义，而不是格式化"></a>1.xml描述的是结构和语义，而不是格式化</h3><h3 id="2-xml讲数据内容和现实格式相分离"><a href="#2-xml讲数据内容和现实格式相分离" class="headerlink" title="2.xml讲数据内容和现实格式相分离"></a>2.xml讲数据内容和现实格式相分离</h3><h3 id="3-xml是元标记语言。Xml的标记不是预先定义好的，而是自定义的。"><a href="#3-xml是元标记语言。Xml的标记不是预先定义好的，而是自定义的。" class="headerlink" title="3.xml是元标记语言。Xml的标记不是预先定义好的，而是自定义的。"></a>3.xml是元标记语言。Xml的标记不是预先定义好的，而是自定义的。</h3><h3 id="4-xml是自描述语言"><a href="#4-xml是自描述语言" class="headerlink" title="4.xml是自描述语言"></a>4.xml是自描述语言</h3><h3 id="5-xml是独立于平台的"><a href="#5-xml是独立于平台的" class="headerlink" title="5.xml是独立于平台的"></a>5.xml是独立于平台的</h3><h3 id="6-xml不进行任何操作"><a href="#6-xml不进行任何操作" class="headerlink" title="6.xml不进行任何操作"></a>6.xml不进行任何操作</h3><h3 id="7-xml具有良好的保值性"><a href="#7-xml具有良好的保值性" class="headerlink" title="7.xml具有良好的保值性"></a>7.xml具有良好的保值性</h3><h2 id="xml和html的不同"><a href="#xml和html的不同" class="headerlink" title="xml和html的不同"></a>xml和html的不同</h2><h3 id="1-xml和html都来自于SGML，它们都含有标记，有着相似的语法，区别：html不具有扩展性，它用固有的标记来描述、显示网页内容"><a href="#1-xml和html都来自于SGML，它们都含有标记，有着相似的语法，区别：html不具有扩展性，它用固有的标记来描述、显示网页内容" class="headerlink" title="1.xml和html都来自于SGML，它们都含有标记，有着相似的语法，区别：html不具有扩展性，它用固有的标记来描述、显示网页内容."></a>1.xml和html都来自于SGML，它们都含有标记，有着相似的语法，区别：html不具有扩展性，它用固有的标记来描述、显示网页内容.</h3><h3 id="2-Html的核心不是为了体现数据的含义，而是为了体现数据的显示格式。"><a href="#2-Html的核心不是为了体现数据的含义，而是为了体现数据的显示格式。" class="headerlink" title="2.Html的核心不是为了体现数据的含义，而是为了体现数据的显示格式。"></a>2.Html的核心不是为了体现数据的含义，而是为了体现数据的显示格式。</h3><h3 id="3-吸取html松散格式带来的经验教训，xml一开始就坚持实行“良好的格式”。"><a href="#3-吸取html松散格式带来的经验教训，xml一开始就坚持实行“良好的格式”。" class="headerlink" title="3.吸取html松散格式带来的经验教训，xml一开始就坚持实行“良好的格式”。"></a>3.吸取html松散格式带来的经验教训，xml一开始就坚持实行“良好的格式”。</h3><h2 id="为什么需要学习xml？"><a href="#为什么需要学习xml？" class="headerlink" title="为什么需要学习xml？"></a>为什么需要学习xml？</h2><h3 id="1-需求"><a href="#1-需求" class="headerlink" title="1.需求"></a>1.需求</h3><h3 id="2-做配置文件"><a href="#2-做配置文件" class="headerlink" title="2.做配置文件"></a>2.做配置文件</h3><h3 id="3-Xml还可以描述很复杂的数据关系"><a href="#3-Xml还可以描述很复杂的数据关系" class="headerlink" title="3.Xml还可以描述很复杂的数据关系"></a>3.Xml还可以描述很复杂的数据关系</h3><h2 id="Xml的常见应用"><a href="#Xml的常见应用" class="headerlink" title="Xml的常见应用"></a>Xml的常见应用</h2><h3 id="1-数据传送通用格式"><a href="#1-数据传送通用格式" class="headerlink" title="1.数据传送通用格式"></a>1.数据传送通用格式</h3><h3 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h3><h3 id="3-充当小型数据库"><a href="#3-充当小型数据库" class="headerlink" title="3.充当小型数据库"></a>3.充当小型数据库</h3><h2 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h2><h3 id="ANSI-编码-是American-national-standard-institute-美国国家标准协会"><a href="#ANSI-编码-是American-national-standard-institute-美国国家标准协会" class="headerlink" title="ANSI 编码 是American national standard institute 美国国家标准协会"></a>ANSI 编码 是American national standard institute 美国国家标准协会</h3><h3 id="ansi编码在不同的国家是不一样的"><a href="#ansi编码在不同的国家是不一样的" class="headerlink" title="ansi编码在不同的国家是不一样的"></a>ansi编码在不同的国家是不一样的</h3><p>ansi -&gt;gb2312 、ansi -&gt;gbk、big5 ……</p>
<h2 id="Xml语法"><a href="#Xml语法" class="headerlink" title="Xml语法"></a>Xml语法</h2><h3 id="1-文档声明"><a href="#1-文档声明" class="headerlink" title="1.文档声明"></a>1.文档声明</h3><h3 id="lt-xml-version-”1-0”-encoding-”编码方式”-standalone-”yes-no”-gt"><a href="#lt-xml-version-”1-0”-encoding-”编码方式”-standalone-”yes-no”-gt" class="headerlink" title="&lt;?xml version=”1.0” encoding=”编码方式” standalone=”yes/no”?&gt;"></a>&lt;?xml version=”1.0” encoding=”编码方式” standalone=”yes/no”?&gt;</h3><h3 id="2-一个xml文档中，有且只有有一个根元素"><a href="#2-一个xml文档中，有且只有有一个根元素" class="headerlink" title="2..一个xml文档中，有且只有有一个根元素"></a>2..一个xml文档中，有且只有有一个根元素</h3><p>元素—标签—节点</p>
<h5 id="属性值用双引号-“-或单引号-‘-分隔-如果属性值中有’，用”分隔；有”，用’分隔"><a href="#属性值用双引号-“-或单引号-‘-分隔-如果属性值中有’，用”分隔；有”，用’分隔" class="headerlink" title="属性值用双引号(“)或单引号(‘)分隔(如果属性值中有’，用”分隔；有”，用’分隔)"></a>属性值用双引号(“)或单引号(‘)分隔(如果属性值中有’，用”分隔；有”，用’分隔)</h5><h5 id="特别说明：如果属性值有单引号，有双引号，则需要使用实体：html-gt-nbsp-copy"><a href="#特别说明：如果属性值有单引号，有双引号，则需要使用实体：html-gt-nbsp-copy" class="headerlink" title="特别说明：如果属性值有单引号，有双引号，则需要使用实体：html -&gt; &nbsp; &copy;"></a>特别说明：如果属性值有单引号，有双引号，则需要使用实体：html -&gt; &nbsp; &copy;</h5><h3 id="4-CDATA节"><a href="#4-CDATA节" class="headerlink" title="4.CDATA节"></a>4.CDATA节</h3><p>有时我们希望传递一些特殊字符，&lt;&gt;!@#$%^&amp;* 可以使用CDATA节包括</p>
<h3 id="基本用法：-lt-CDATA-……-gt"><a href="#基本用法：-lt-CDATA-……-gt" class="headerlink" title="基本用法：&lt;![CDATA[……]]&gt;"></a>基本用法：&lt;![CDATA[……]]&gt;</h3><h2 id="面试题："><a href="#面试题：" class="headerlink" title="面试题："></a>面试题：</h2><h3 id="问：如何使用xml去传递小图片？"><a href="#问：如何使用xml去传递小图片？" class="headerlink" title="问：如何使用xml去传递小图片？"></a>问：如何使用xml去传递小图片？</h3><h3 id="答：可以把文件读取成一个-byte-，然后放到CDATA节，再传递。"><a href="#答：可以把文件读取成一个-byte-，然后放到CDATA节，再传递。" class="headerlink" title="答：可以把文件读取成一个 byte[]，然后放到CDATA节，再传递。"></a>答：可以把文件读取成一个 byte[]，然后放到CDATA节，再传递。</h3><h2 id="Xml语法小结"><a href="#Xml语法小结" class="headerlink" title="Xml语法小结"></a>Xml语法小结</h2><h3 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h3><p>Xml声明语句</p>
<h3 id="lt-xml-version-”1-0”-encoding-”gb2312”-gt"><a href="#lt-xml-version-”1-0”-encoding-”gb2312”-gt" class="headerlink" title="&lt;?xml version=”1.0” encoding=”gb2312”?&gt;"></a>&lt;?xml version=”1.0” encoding=”gb2312”?&gt;</h3><h3 id="1-必须有且仅有一个根元素"><a href="#1-必须有且仅有一个根元素" class="headerlink" title="1.必须有且仅有一个根元素"></a>1.必须有且仅有一个根元素</h3><h3 id="2-标记大小写敏感"><a href="#2-标记大小写敏感" class="headerlink" title="2.标记大小写敏感"></a>2.标记大小写敏感</h3><h3 id="3-属性值用引号"><a href="#3-属性值用引号" class="headerlink" title="3.属性值用引号"></a>3.属性值用引号</h3><h3 id="4-标记成对"><a href="#4-标记成对" class="headerlink" title="4.标记成对"></a>4.标记成对</h3><h3 id="5-空标记关闭"><a href="#5-空标记关闭" class="headerlink" title="5.空标记关闭"></a>5.空标记关闭</h3><h3 id="6-元素正确嵌套"><a href="#6-元素正确嵌套" class="headerlink" title="6.元素正确嵌套"></a>6.元素正确嵌套</h3><h2 id="元素语法"><a href="#元素语法" class="headerlink" title="元素语法"></a>元素语法</h2><h3 id="1-名称中可以包含字母、数字或者其它字符"><a href="#1-名称中可以包含字母、数字或者其它字符" class="headerlink" title="1.名称中可以包含字母、数字或者其它字符"></a>1.名称中可以包含字母、数字或者其它字符</h3><h3 id="2-名称中不能包含空格"><a href="#2-名称中不能包含空格" class="headerlink" title="2.名称中不能包含空格"></a>2.名称中不能包含空格</h3><h3 id="3-名称中不能含冒号-注：冒号留给命名空间使用"><a href="#3-名称中不能含冒号-注：冒号留给命名空间使用" class="headerlink" title="3.名称中不能含冒号(注：冒号留给命名空间使用)"></a>3.名称中不能含冒号(注：冒号留给命名空间使用)</h3><h2 id="元素之间的嵌套规则"><a href="#元素之间的嵌套规则" class="headerlink" title="元素之间的嵌套规则"></a>元素之间的嵌套规则</h2><h3 id="1-父元素的起始标记必须在子元素的起始标记之前-父元素的结束标记必须在子元素的结束标记之后-元素之间不可交叉嵌套"><a href="#1-父元素的起始标记必须在子元素的起始标记之前-父元素的结束标记必须在子元素的结束标记之后-元素之间不可交叉嵌套" class="headerlink" title="1.父元素的起始标记必须在子元素的起始标记之前,父元素的结束标记必须在子元素的结束标记之后.元素之间不可交叉嵌套"></a>1.父元素的起始标记必须在子元素的起始标记之前,父元素的结束标记必须在子元素的结束标记之后.元素之间不可交叉嵌套</h3><h3 id="2-子元素与子元素间是兄弟关系"><a href="#2-子元素与子元素间是兄弟关系" class="headerlink" title="2.子元素与子元素间是兄弟关系"></a>2.子元素与子元素间是兄弟关系</h3><h3 id="3-两元素之间不能既是父子元素又是兄弟关系"><a href="#3-两元素之间不能既是父子元素又是兄弟关系" class="headerlink" title="3.两元素之间不能既是父子元素又是兄弟关系."></a>3.两元素之间不能既是父子元素又是兄弟关系.</h3><h2 id="定义属性时应该注意以下几点"><a href="#定义属性时应该注意以下几点" class="headerlink" title="定义属性时应该注意以下几点"></a>定义属性时应该注意以下几点</h2><h3 id="1-属性的命名规则同元素命名"><a href="#1-属性的命名规则同元素命名" class="headerlink" title="1.属性的命名规则同元素命名"></a>1.属性的命名规则同元素命名</h3><h3 id="2-属性值必须用引号括起来"><a href="#2-属性值必须用引号括起来" class="headerlink" title="2.属性值必须用引号括起来"></a>2.属性值必须用引号括起来</h3><h3 id="3-属性只能包含在开始标记中"><a href="#3-属性只能包含在开始标记中" class="headerlink" title="3.属性只能包含在开始标记中"></a>3.属性只能包含在开始标记中</h3><h3 id="4-特点在属性名称在同一个元素中只能出现一次"><a href="#4-特点在属性名称在同一个元素中只能出现一次" class="headerlink" title="4.特点在属性名称在同一个元素中只能出现一次"></a>4.特点在属性名称在同一个元素中只能出现一次</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Xml简单的历史介绍&quot;&gt;&lt;a href=&quot;#Xml简单的历史介绍&quot; class=&quot;headerlink&quot; title=&quot;Xml简单的历史介绍&quot;&gt;&lt;/a&gt;Xml简单的历史介绍&lt;/h2&gt;&lt;h3 id=&quot;1969-gml-通用标记语言-主要的目的时候要在不同的机器进行通信的数据规范&quot;&gt;&lt;a href=&quot;#1969-gml-通用标记语言-主要的目的时候要在不同的机器进行通信的数据规范&quot; class=&quot;headerlink&quot; title=&quot;1969  gml  (通用标记语言)  [主要的目的时候要在不同的机器进行通信的数据规范]&quot;&gt;&lt;/a&gt;1969  gml  (通用标记语言)  [主要的目的时候要在不同的机器进行通信的数据规范]&lt;/h3&gt;&lt;h3 id=&quot;1985-sgml-标准通用标记语言&quot;&gt;&lt;a href=&quot;#1985-sgml-标准通用标记语言&quot; class=&quot;headerlink&quot; title=&quot;1985  sgml  (标准通用标记语言)&quot;&gt;&lt;/a&gt;1985  sgml  (标准通用标记语言)&lt;/h3&gt;&lt;h3 id=&quot;1993-html-万维网&quot;&gt;&lt;a href=&quot;#1993-html-万维网&quot; class=&quot;headerlink&quot; title=&quot;1993  html  (万维网)&quot;&gt;&lt;/a&gt;1993  html  (万维网)&lt;/h3&gt;&lt;h3 id=&quot;1998-xml&quot;&gt;&lt;a href=&quot;#1998-xml&quot; class=&quot;headerlink&quot; title=&quot;1998  xml&quot;&gt;&lt;/a&gt;1998  xml&lt;/h3&gt;
    
    </summary>
    
    
      <category term="xml" scheme="http://xj8c.cc/tags/xml/"/>
    
  </entry>
  
  <entry>
    <title>当最深沉的筹谋换来最清明的理想</title>
    <link href="http://xj8c.cc/2015/10/12/when-the-deepest-counsel-comes-to-the-most-clear-ideal/"/>
    <id>http://xj8c.cc/2015/10/12/when-the-deepest-counsel-comes-to-the-most-clear-ideal/</id>
    <published>2015-10-12T04:51:41.000Z</published>
    <updated>2017-05-26T06:29:50.687Z</updated>
    
    <content type="html"><![CDATA[<h3 id="我用了一周的时间，看完《琅琊榜》。期间或是在第一排坐在上课时把手机放在课桌下看，或是夜里已然熄灯把手机窝在被窝里看，或是吃饭的时候，偶尔也不能舍下。"><a href="#我用了一周的时间，看完《琅琊榜》。期间或是在第一排坐在上课时把手机放在课桌下看，或是夜里已然熄灯把手机窝在被窝里看，或是吃饭的时候，偶尔也不能舍下。" class="headerlink" title="我用了一周的时间，看完《琅琊榜》。期间或是在第一排坐在上课时把手机放在课桌下看，或是夜里已然熄灯把手机窝在被窝里看，或是吃饭的时候，偶尔也不能舍下。"></a>我用了一周的时间，看完《琅琊榜》。期间或是在第一排坐在上课时把手机放在课桌下看，或是夜里已然熄灯把手机窝在被窝里看，或是吃饭的时候，偶尔也不能舍下。</h3><h3 id="它关于亲情，兄弟，家国之恨。它如此沉重，我却甘之如饴。"><a href="#它关于亲情，兄弟，家国之恨。它如此沉重，我却甘之如饴。" class="headerlink" title="它关于亲情，兄弟，家国之恨。它如此沉重，我却甘之如饴。"></a>它关于亲情，兄弟，家国之恨。它如此沉重，我却甘之如饴。</h3><h3 id="不管是一夜历经人生颠覆的萧景睿，还是一直貌似纨绔，却心思敏捷的言豫津；不管是镇守云南，巾帼不让须眉的郡主霓凰，还是貌美如花，琴技卓然的花魁宫羽；不管是心如稚童的飞流，还是风流不羁，重情重义的蔺晨……然而我最不能忘的，仍是那琅琊榜上第一公子——梅长苏。"><a href="#不管是一夜历经人生颠覆的萧景睿，还是一直貌似纨绔，却心思敏捷的言豫津；不管是镇守云南，巾帼不让须眉的郡主霓凰，还是貌美如花，琴技卓然的花魁宫羽；不管是心如稚童的飞流，还是风流不羁，重情重义的蔺晨……然而我最不能忘的，仍是那琅琊榜上第一公子——梅长苏。" class="headerlink" title="不管是一夜历经人生颠覆的萧景睿，还是一直貌似纨绔，却心思敏捷的言豫津；不管是镇守云南，巾帼不让须眉的郡主霓凰，还是貌美如花，琴技卓然的花魁宫羽；不管是心如稚童的飞流，还是风流不羁，重情重义的蔺晨……然而我最不能忘的，仍是那琅琊榜上第一公子——梅长苏。"></a>不管是一夜历经人生颠覆的萧景睿，还是一直貌似纨绔，却心思敏捷的言豫津；不管是镇守云南，巾帼不让须眉的郡主霓凰，还是貌美如花，琴技卓然的花魁宫羽；不管是心如稚童的飞流，还是风流不羁，重情重义的蔺晨……然而我最不能忘的，仍是那琅琊榜上第一公子——梅长苏。</h3><a id="more"></a>
<h3 id="开始几章只是一个病弱的江湖公子和游历之后回家的豪门子弟到金陵去养病，普通到再没有那么普通，没有波涛起伏，没有勾心斗角，江湖侠客和富家公子相处融洽，就算有那么点小病，金陵的环境那么好，养几天，早晚会好起来的。身边的少年虽然心智不全，可是很乖很漂亮。嗯，世界大同，很好，很温情。"><a href="#开始几章只是一个病弱的江湖公子和游历之后回家的豪门子弟到金陵去养病，普通到再没有那么普通，没有波涛起伏，没有勾心斗角，江湖侠客和富家公子相处融洽，就算有那么点小病，金陵的环境那么好，养几天，早晚会好起来的。身边的少年虽然心智不全，可是很乖很漂亮。嗯，世界大同，很好，很温情。" class="headerlink" title="开始几章只是一个病弱的江湖公子和游历之后回家的豪门子弟到金陵去养病，普通到再没有那么普通，没有波涛起伏，没有勾心斗角，江湖侠客和富家公子相处融洽，就算有那么点小病，金陵的环境那么好，养几天，早晚会好起来的。身边的少年虽然心智不全，可是很乖很漂亮。嗯，世界大同，很好，很温情。"></a>开始几章只是一个病弱的江湖公子和游历之后回家的豪门子弟到金陵去养病，普通到再没有那么普通，没有波涛起伏，没有勾心斗角，江湖侠客和富家公子相处融洽，就算有那么点小病，金陵的环境那么好，养几天，早晚会好起来的。身边的少年虽然心智不全，可是很乖很漂亮。嗯，世界大同，很好，很温情。</h3><h3 id="可是梅长苏，你为什么要感叹，说什么前尘往事如烟似梦，云散水涸不能重来！冠盖满京华，阳光明亮的刺眼，这些少年眉目张扬笑容温暖，有了这么美好的开端，以后的波诡云谲天翻地覆，那么残忍。"><a href="#可是梅长苏，你为什么要感叹，说什么前尘往事如烟似梦，云散水涸不能重来！冠盖满京华，阳光明亮的刺眼，这些少年眉目张扬笑容温暖，有了这么美好的开端，以后的波诡云谲天翻地覆，那么残忍。" class="headerlink" title="可是梅长苏，你为什么要感叹，说什么前尘往事如烟似梦，云散水涸不能重来！冠盖满京华，阳光明亮的刺眼，这些少年眉目张扬笑容温暖，有了这么美好的开端，以后的波诡云谲天翻地覆，那么残忍。"></a>可是梅长苏，你为什么要感叹，说什么前尘往事如烟似梦，云散水涸不能重来！冠盖满京华，阳光明亮的刺眼，这些少年眉目张扬笑容温暖，有了这么美好的开端，以后的波诡云谲天翻地覆，那么残忍。</h3><h3 id="孱弱的躯壳里是死过一次的灵魂，常年围炉而坐，不由衷的笑意，永远凉的惊心的指尖，却偏偏，在偌大的金陵翻云覆雨等闲间。你跟着梅长苏的节奏，看他无声无息的救出祁王遗孤，看他不动声色的解决敌国虎视眈眈的求亲，看他一手把夺嫡之争推上了高潮，看他一手拉太子和誉王下位，看他一手把靖王推上高处。"><a href="#孱弱的躯壳里是死过一次的灵魂，常年围炉而坐，不由衷的笑意，永远凉的惊心的指尖，却偏偏，在偌大的金陵翻云覆雨等闲间。你跟着梅长苏的节奏，看他无声无息的救出祁王遗孤，看他不动声色的解决敌国虎视眈眈的求亲，看他一手把夺嫡之争推上了高潮，看他一手拉太子和誉王下位，看他一手把靖王推上高处。" class="headerlink" title="孱弱的躯壳里是死过一次的灵魂，常年围炉而坐，不由衷的笑意，永远凉的惊心的指尖，却偏偏，在偌大的金陵翻云覆雨等闲间。你跟着梅长苏的节奏，看他无声无息的救出祁王遗孤，看他不动声色的解决敌国虎视眈眈的求亲，看他一手把夺嫡之争推上了高潮，看他一手拉太子和誉王下位，看他一手把靖王推上高处。"></a>孱弱的躯壳里是死过一次的灵魂，常年围炉而坐，不由衷的笑意，永远凉的惊心的指尖，却偏偏，在偌大的金陵翻云覆雨等闲间。你跟着梅长苏的节奏，看他无声无息的救出祁王遗孤，看他不动声色的解决敌国虎视眈眈的求亲，看他一手把夺嫡之争推上了高潮，看他一手拉太子和誉王下位，看他一手把靖王推上高处。</h3><h3 id="一点一点，一步一步，紧凑的，执着的，拼却残生。"><a href="#一点一点，一步一步，紧凑的，执着的，拼却残生。" class="headerlink" title="一点一点，一步一步，紧凑的，执着的，拼却残生。"></a>一点一点，一步一步，紧凑的，执着的，拼却残生。</h3><h3 id="因为他的生命太短，他的使命太重。所以你不得不连呼吸都和他一样小心翼翼，就这样看着他运筹帷幄之中，决胜朝堂之上。"><a href="#因为他的生命太短，他的使命太重。所以你不得不连呼吸都和他一样小心翼翼，就这样看着他运筹帷幄之中，决胜朝堂之上。" class="headerlink" title="因为他的生命太短，他的使命太重。所以你不得不连呼吸都和他一样小心翼翼，就这样看着他运筹帷幄之中，决胜朝堂之上。"></a>因为他的生命太短，他的使命太重。所以你不得不连呼吸都和他一样小心翼翼，就这样看着他运筹帷幄之中，决胜朝堂之上。</h3><h3 id="谁不想当年的兄友弟恭君臣和睦，谁不想当年的鲜衣怒马飞扬跋扈，可是谁都回不去了。十二万热血，十二万英魂。天下不再记得，朝臣不敢提起，君王假装忘记。虽然还是有人记得当年的小火人，虽然还有人念念不忘赤炎少帅，虽然还有人放不下少年的小殊，可是，没有用。肌肤骨骼一点一点碎裂，而后重长，十三年忍辱负重，他就只是梅长苏。梅长苏不是来妥协的，梅长苏不是来失败的，梅长苏永远不会放弃。他毕生的精力只用在了一件事上。"><a href="#谁不想当年的兄友弟恭君臣和睦，谁不想当年的鲜衣怒马飞扬跋扈，可是谁都回不去了。十二万热血，十二万英魂。天下不再记得，朝臣不敢提起，君王假装忘记。虽然还是有人记得当年的小火人，虽然还有人念念不忘赤炎少帅，虽然还有人放不下少年的小殊，可是，没有用。肌肤骨骼一点一点碎裂，而后重长，十三年忍辱负重，他就只是梅长苏。梅长苏不是来妥协的，梅长苏不是来失败的，梅长苏永远不会放弃。他毕生的精力只用在了一件事上。" class="headerlink" title="谁不想当年的兄友弟恭君臣和睦，谁不想当年的鲜衣怒马飞扬跋扈，可是谁都回不去了。十二万热血，十二万英魂。天下不再记得，朝臣不敢提起，君王假装忘记。虽然还是有人记得当年的小火人，虽然还有人念念不忘赤炎少帅，虽然还有人放不下少年的小殊，可是，没有用。肌肤骨骼一点一点碎裂，而后重长，十三年忍辱负重，他就只是梅长苏。梅长苏不是来妥协的，梅长苏不是来失败的，梅长苏永远不会放弃。他毕生的精力只用在了一件事上。"></a>谁不想当年的兄友弟恭君臣和睦，谁不想当年的鲜衣怒马飞扬跋扈，可是谁都回不去了。十二万热血，十二万英魂。天下不再记得，朝臣不敢提起，君王假装忘记。虽然还是有人记得当年的小火人，虽然还有人念念不忘赤炎少帅，虽然还有人放不下少年的小殊，可是，没有用。肌肤骨骼一点一点碎裂，而后重长，十三年忍辱负重，他就只是梅长苏。梅长苏不是来妥协的，梅长苏不是来失败的，梅长苏永远不会放弃。他毕生的精力只用在了一件事上。</h3><h3 id="梅长苏，你的一个挥手，一个眼神，闻不惯的香味，喜欢吃的榛子糕，甚至连呼吸方式和生命期限，都有目的。你不累吗？"><a href="#梅长苏，你的一个挥手，一个眼神，闻不惯的香味，喜欢吃的榛子糕，甚至连呼吸方式和生命期限，都有目的。你不累吗？" class="headerlink" title="梅长苏，你的一个挥手，一个眼神，闻不惯的香味，喜欢吃的榛子糕，甚至连呼吸方式和生命期限，都有目的。你不累吗？"></a>梅长苏，你的一个挥手，一个眼神，闻不惯的香味，喜欢吃的榛子糕，甚至连呼吸方式和生命期限，都有目的。你不累吗？</h3><h3 id="靖王被立为太子，权柄在握，战功显赫，朝堂之上再也没有人可与之争锋。"><a href="#靖王被立为太子，权柄在握，战功显赫，朝堂之上再也没有人可与之争锋。" class="headerlink" title="靖王被立为太子，权柄在握，战功显赫，朝堂之上再也没有人可与之争锋。"></a>靖王被立为太子，权柄在握，战功显赫，朝堂之上再也没有人可与之争锋。</h3><h3 id="梅长苏，你累不累？都走到了这一步，只要靖王上位，什么案不能翻？"><a href="#梅长苏，你累不累？都走到了这一步，只要靖王上位，什么案不能翻？" class="headerlink" title="梅长苏，你累不累？都走到了这一步，只要靖王上位，什么案不能翻？"></a>梅长苏，你累不累？都走到了这一步，只要靖王上位，什么案不能翻？</h3><h3 id="可是，他为什么不等。"><a href="#可是，他为什么不等。" class="headerlink" title="可是，他为什么不等。"></a>可是，他为什么不等。</h3><h3 id="因为就算是正义是事实，只要靖王指摘的是自己的父亲，他就会背上不忠不孝的骂名？"><a href="#因为就算是正义是事实，只要靖王指摘的是自己的父亲，他就会背上不忠不孝的骂名？" class="headerlink" title="因为就算是正义是事实，只要靖王指摘的是自己的父亲，他就会背上不忠不孝的骂名？"></a>因为就算是正义是事实，只要靖王指摘的是自己的父亲，他就会背上不忠不孝的骂名？</h3><h3 id="处心积虑，让君王无力遮掩，只能正视自己的错。"><a href="#处心积虑，让君王无力遮掩，只能正视自己的错。" class="headerlink" title="处心积虑，让君王无力遮掩，只能正视自己的错。"></a>处心积虑，让君王无力遮掩，只能正视自己的错。</h3><h3 id="罪己诏？唤不回十二万英魂！"><a href="#罪己诏？唤不回十二万英魂！" class="headerlink" title="罪己诏？唤不回十二万英魂！"></a>罪己诏？唤不回十二万英魂！</h3><h3 id="他只是想，让他的兄弟上位之后一身光明磊落，千古流芳。他只是想，让错的人知道自己的错。他只是太坚持他的原则。"><a href="#他只是想，让他的兄弟上位之后一身光明磊落，千古流芳。他只是想，让错的人知道自己的错。他只是太坚持他的原则。" class="headerlink" title="他只是想，让他的兄弟上位之后一身光明磊落，千古流芳。他只是想，让错的人知道自己的错。他只是太坚持他的原则。"></a>他只是想，让他的兄弟上位之后一身光明磊落，千古流芳。他只是想，让错的人知道自己的错。他只是太坚持他的原则。</h3><h3 id="十三年的冤案昭雪，是不是一切的纷争都走到了尽头？梅长苏，你太累了，该歇歇了。"><a href="#十三年的冤案昭雪，是不是一切的纷争都走到了尽头？梅长苏，你太累了，该歇歇了。" class="headerlink" title="十三年的冤案昭雪，是不是一切的纷争都走到了尽头？梅长苏，你太累了，该歇歇了。"></a>十三年的冤案昭雪，是不是一切的纷争都走到了尽头？梅长苏，你太累了，该歇歇了。</h3><h3 id="可是，他没有。因为他是梅长苏。"><a href="#可是，他没有。因为他是梅长苏。" class="headerlink" title="可是，他没有。因为他是梅长苏。"></a>可是，他没有。因为他是梅长苏。</h3><h3 id="外敌来犯，靖王刚刚登基，一国之本，不可出战。可是，国无栋梁。梅长苏，用重药之后披甲上阵。赤炎军的灵魂在他手中重生。天下人终于知道，赤炎军的英名不灭，灵魂不死。这才是真正的昭雪。"><a href="#外敌来犯，靖王刚刚登基，一国之本，不可出战。可是，国无栋梁。梅长苏，用重药之后披甲上阵。赤炎军的灵魂在他手中重生。天下人终于知道，赤炎军的英名不灭，灵魂不死。这才是真正的昭雪。" class="headerlink" title="外敌来犯，靖王刚刚登基，一国之本，不可出战。可是，国无栋梁。梅长苏，用重药之后披甲上阵。赤炎军的灵魂在他手中重生。天下人终于知道，赤炎军的英名不灭，灵魂不死。这才是真正的昭雪。"></a>外敌来犯，靖王刚刚登基，一国之本，不可出战。可是，国无栋梁。梅长苏，用重药之后披甲上阵。赤炎军的灵魂在他手中重生。天下人终于知道，赤炎军的英名不灭，灵魂不死。这才是真正的昭雪。</h3><h3 id="赤炎昭雪，你的使命完成了，所以，你撑不下去了吗？"><a href="#赤炎昭雪，你的使命完成了，所以，你撑不下去了吗？" class="headerlink" title="赤炎昭雪，你的使命完成了，所以，你撑不下去了吗？"></a>赤炎昭雪，你的使命完成了，所以，你撑不下去了吗？</h3><h3 id="梅长苏，像你这样的人，也该歇歇了。"><a href="#梅长苏，像你这样的人，也该歇歇了。" class="headerlink" title="梅长苏，像你这样的人，也该歇歇了。"></a>梅长苏，像你这样的人，也该歇歇了。</h3><h3 id="从开篇到结尾，我没有等到梅长苏的那个她。整个故事，梅长苏有的只是计谋和病痛。心智不全的少年和他赤炎军的兄弟们，陪着他走到最后。"><a href="#从开篇到结尾，我没有等到梅长苏的那个她。整个故事，梅长苏有的只是计谋和病痛。心智不全的少年和他赤炎军的兄弟们，陪着他走到最后。" class="headerlink" title="从开篇到结尾，我没有等到梅长苏的那个她。整个故事，梅长苏有的只是计谋和病痛。心智不全的少年和他赤炎军的兄弟们，陪着他走到最后。"></a>从开篇到结尾，我没有等到梅长苏的那个她。整个故事，梅长苏有的只是计谋和病痛。心智不全的少年和他赤炎军的兄弟们，陪着他走到最后。</h3><h3 id="梅长苏，下一个故事，一定要有红泥小火炉，一定要有红袖添香夜读书，一定要有那个让你渴望延续生命的人，一定要，有人陪着你。"><a href="#梅长苏，下一个故事，一定要有红泥小火炉，一定要有红袖添香夜读书，一定要有那个让你渴望延续生命的人，一定要，有人陪着你。" class="headerlink" title="梅长苏，下一个故事，一定要有红泥小火炉，一定要有红袖添香夜读书，一定要有那个让你渴望延续生命的人，一定要，有人陪着你。"></a>梅长苏，下一个故事，一定要有红泥小火炉，一定要有红袖添香夜读书，一定要有那个让你渴望延续生命的人，一定要，有人陪着你。</h3><h3 id="看完了，故事也只是故事而已，更何况，架空的历史和军事，这个世界上从来没有这样一个人存在。可是我忍不住要用文字记住他。"><a href="#看完了，故事也只是故事而已，更何况，架空的历史和军事，这个世界上从来没有这样一个人存在。可是我忍不住要用文字记住他。" class="headerlink" title="看完了，故事也只是故事而已，更何况，架空的历史和军事，这个世界上从来没有这样一个人存在。可是我忍不住要用文字记住他。"></a>看完了，故事也只是故事而已，更何况，架空的历史和军事，这个世界上从来没有这样一个人存在。可是我忍不住要用文字记住他。</h3><h3 id="那个“遥映人间冰雪样，暗香幽浮曲临江，遍识天下英雄路，俯首江左有梅郎”的梅长苏；"><a href="#那个“遥映人间冰雪样，暗香幽浮曲临江，遍识天下英雄路，俯首江左有梅郎”的梅长苏；" class="headerlink" title="那个“遥映人间冰雪样，暗香幽浮曲临江，遍识天下英雄路，俯首江左有梅郎”的梅长苏；"></a>那个“遥映人间冰雪样，暗香幽浮曲临江，遍识天下英雄路，俯首江左有梅郎”的梅长苏；</h3><h3 id="那个有着“麒麟之才，得之可得天下”的梅长苏；"><a href="#那个有着“麒麟之才，得之可得天下”的梅长苏；" class="headerlink" title="那个有着“麒麟之才，得之可得天下”的梅长苏；"></a>那个有着“麒麟之才，得之可得天下”的梅长苏；</h3><h3 id="那个一身伤病，生寿难永的梅长苏。"><a href="#那个一身伤病，生寿难永的梅长苏。" class="headerlink" title="那个一身伤病，生寿难永的梅长苏。"></a>那个一身伤病，生寿难永的梅长苏。</h3><h3 id="总是浮现的他的样子，便是一袭白衣，长身玉立的清俊模样，便是惊采绝艳，计谋天下的骄傲模样，也便是洗骨换髓，面色苍白的青年。"><a href="#总是浮现的他的样子，便是一袭白衣，长身玉立的清俊模样，便是惊采绝艳，计谋天下的骄傲模样，也便是洗骨换髓，面色苍白的青年。" class="headerlink" title="总是浮现的他的样子，便是一袭白衣，长身玉立的清俊模样，便是惊采绝艳，计谋天下的骄傲模样，也便是洗骨换髓，面色苍白的青年。"></a>总是浮现的他的样子，便是一袭白衣，长身玉立的清俊模样，便是惊采绝艳，计谋天下的骄傲模样，也便是洗骨换髓，面色苍白的青年。</h3><h3 id="昔日最疼爱他的皇奶奶逝世之时，他把自己关在屋里尽孝一月，未能在逝者灵前跪拜，他只能遥望宫阙，用手去触摸虚空的记忆。"><a href="#昔日最疼爱他的皇奶奶逝世之时，他把自己关在屋里尽孝一月，未能在逝者灵前跪拜，他只能遥望宫阙，用手去触摸虚空的记忆。" class="headerlink" title="昔日最疼爱他的皇奶奶逝世之时，他把自己关在屋里尽孝一月，未能在逝者灵前跪拜，他只能遥望宫阙，用手去触摸虚空的记忆。"></a>昔日最疼爱他的皇奶奶逝世之时，他把自己关在屋里尽孝一月，未能在逝者灵前跪拜，他只能遥望宫阙，用手去触摸虚空的记忆。</h3><h3 id="昔日最亲密的战友，从小一起长大的挚友，最初用不屑的眼神看他，用毫无感情的冷言嘲讽，只因那张他熟悉的脸孔已变，再无当年少帅的风采，他也唯有心酸无奈，但却一直隐忍。"><a href="#昔日最亲密的战友，从小一起长大的挚友，最初用不屑的眼神看他，用毫无感情的冷言嘲讽，只因那张他熟悉的脸孔已变，再无当年少帅的风采，他也唯有心酸无奈，但却一直隐忍。" class="headerlink" title="昔日最亲密的战友，从小一起长大的挚友，最初用不屑的眼神看他，用毫无感情的冷言嘲讽，只因那张他熟悉的脸孔已变，再无当年少帅的风采，他也唯有心酸无奈，但却一直隐忍。"></a>昔日最亲密的战友，从小一起长大的挚友，最初用不屑的眼神看他，用毫无感情的冷言嘲讽，只因那张他熟悉的脸孔已变，再无当年少帅的风采，他也唯有心酸无奈，但却一直隐忍。</h3><h3 id="昔日的爱人已另投他人怀抱，昔日家园已成废墟一片，可是他还是要继续战斗，为天下仅存的正义和忠勇，为无辜枉死的沙场英烈。"><a href="#昔日的爱人已另投他人怀抱，昔日家园已成废墟一片，可是他还是要继续战斗，为天下仅存的正义和忠勇，为无辜枉死的沙场英烈。" class="headerlink" title="昔日的爱人已另投他人怀抱，昔日家园已成废墟一片，可是他还是要继续战斗，为天下仅存的正义和忠勇，为无辜枉死的沙场英烈。"></a>昔日的爱人已另投他人怀抱，昔日家园已成废墟一片，可是他还是要继续战斗，为天下仅存的正义和忠勇，为无辜枉死的沙场英烈。</h3><h3 id="只因他不仅仅是梅长苏，他还是一个本该死去，却生生从地狱中爬出来的人，昔日皇朝最耀眼，最张扬的赤焰少帅林殊。"><a href="#只因他不仅仅是梅长苏，他还是一个本该死去，却生生从地狱中爬出来的人，昔日皇朝最耀眼，最张扬的赤焰少帅林殊。" class="headerlink" title="只因他不仅仅是梅长苏，他还是一个本该死去，却生生从地狱中爬出来的人，昔日皇朝最耀眼，最张扬的赤焰少帅林殊。"></a>只因他不仅仅是梅长苏，他还是一个本该死去，却生生从地狱中爬出来的人，昔日皇朝最耀眼，最张扬的赤焰少帅林殊。</h3><h3 id="我想看看当年雪夜薄甲，追敌千里的他，跳脱飞扬，如同烈日的他，清风皓月，且歌且行的他。"><a href="#我想看看当年雪夜薄甲，追敌千里的他，跳脱飞扬，如同烈日的他，清风皓月，且歌且行的他。" class="headerlink" title="我想看看当年雪夜薄甲，追敌千里的他，跳脱飞扬，如同烈日的他，清风皓月，且歌且行的他。"></a>我想看看当年雪夜薄甲，追敌千里的他，跳脱飞扬，如同烈日的他，清风皓月，且歌且行的他。</h3><h3 id="然而终究是回不去了，他一身功力尽失，如风中残烛，命在旦夕。"><a href="#然而终究是回不去了，他一身功力尽失，如风中残烛，命在旦夕。" class="headerlink" title="然而终究是回不去了，他一身功力尽失，如风中残烛，命在旦夕。"></a>然而终究是回不去了，他一身功力尽失，如风中残烛，命在旦夕。</h3><h3 id="我看他满脸倦意，心力交瘁；我看他翻云覆雨，纵横捭阖。终于，萧景琰坐上了皇位，赤焰军得以平反。七万英烈的魂魄终得安息"><a href="#我看他满脸倦意，心力交瘁；我看他翻云覆雨，纵横捭阖。终于，萧景琰坐上了皇位，赤焰军得以平反。七万英烈的魂魄终得安息" class="headerlink" title="我看他满脸倦意，心力交瘁；我看他翻云覆雨，纵横捭阖。终于，萧景琰坐上了皇位，赤焰军得以平反。七万英烈的魂魄终得安息"></a>我看他满脸倦意，心力交瘁；我看他翻云覆雨，纵横捭阖。终于，萧景琰坐上了皇位，赤焰军得以平反。七万英烈的魂魄终得安息</h3><h3 id="作为苏哲，他完成了自己的使命"><a href="#作为苏哲，他完成了自己的使命" class="headerlink" title="作为苏哲，他完成了自己的使命"></a>作为苏哲，他完成了自己的使命</h3><h3 id="作为林殊，他承担了自己的责任"><a href="#作为林殊，他承担了自己的责任" class="headerlink" title="作为林殊，他承担了自己的责任"></a>作为林殊，他承担了自己的责任</h3><h3 id="我以为，从此他便只是梅长苏，可以携至交好友，畅游江湖，了却余生。"><a href="#我以为，从此他便只是梅长苏，可以携至交好友，畅游江湖，了却余生。" class="headerlink" title="我以为，从此他便只是梅长苏，可以携至交好友，畅游江湖，了却余生。"></a>我以为，从此他便只是梅长苏，可以携至交好友，畅游江湖，了却余生。</h3><h3 id="我以为，是的，只是我以为。"><a href="#我以为，是的，只是我以为。" class="headerlink" title="我以为，是的，只是我以为。"></a>我以为，是的，只是我以为。</h3><h3 id="终于，他做出了那个令所有人都心痛的决定。他用半年，一年，甚至更久的生命，换取三个月的鲜衣怒马，保家卫国。"><a href="#终于，他做出了那个令所有人都心痛的决定。他用半年，一年，甚至更久的生命，换取三个月的鲜衣怒马，保家卫国。" class="headerlink" title="终于，他做出了那个令所有人都心痛的决定。他用半年，一年，甚至更久的生命，换取三个月的鲜衣怒马，保家卫国。"></a>终于，他做出了那个令所有人都心痛的决定。他用半年，一年，甚至更久的生命，换取三个月的鲜衣怒马，保家卫国。</h3><h3 id="他是林殊。苏哲是你的幻影，梅长苏是他的向往，而那有血有肉有灵魂的只是林殊。哪怕挫骨削皮，哪怕岁月变迁，他也只能是林殊。滚滚热血，依然流淌。"><a href="#他是林殊。苏哲是你的幻影，梅长苏是他的向往，而那有血有肉有灵魂的只是林殊。哪怕挫骨削皮，哪怕岁月变迁，他也只能是林殊。滚滚热血，依然流淌。" class="headerlink" title="他是林殊。苏哲是你的幻影，梅长苏是他的向往，而那有血有肉有灵魂的只是林殊。哪怕挫骨削皮，哪怕岁月变迁，他也只能是林殊。滚滚热血，依然流淌。"></a>他是林殊。苏哲是你的幻影，梅长苏是他的向往，而那有血有肉有灵魂的只是林殊。哪怕挫骨削皮，哪怕岁月变迁，他也只能是林殊。滚滚热血，依然流淌。</h3><h3 id="漫天黄沙中，我又见他昔日肆意张扬的笑脸。"><a href="#漫天黄沙中，我又见他昔日肆意张扬的笑脸。" class="headerlink" title="漫天黄沙中，我又见他昔日肆意张扬的笑脸。"></a>漫天黄沙中，我又见他昔日肆意张扬的笑脸。</h3><h3 id="白骨如山忘姓氏，无非公子与红妆。"><a href="#白骨如山忘姓氏，无非公子与红妆。" class="headerlink" title="白骨如山忘姓氏，无非公子与红妆。"></a>白骨如山忘姓氏，无非公子与红妆。</h3><h3 id="战争结束了，看到新皇在每夜手抄阵亡名单，抄到最后一个却泪流满面的时候，新皇也许注定了孤寂一生。年年雪里埋新酒，却与何人谋一醉？"><a href="#战争结束了，看到新皇在每夜手抄阵亡名单，抄到最后一个却泪流满面的时候，新皇也许注定了孤寂一生。年年雪里埋新酒，却与何人谋一醉？" class="headerlink" title="战争结束了，看到新皇在每夜手抄阵亡名单，抄到最后一个却泪流满面的时候，新皇也许注定了孤寂一生。年年雪里埋新酒，却与何人谋一醉？"></a>战争结束了，看到新皇在每夜手抄阵亡名单，抄到最后一个却泪流满面的时候，新皇也许注定了孤寂一生。年年雪里埋新酒，却与何人谋一醉？</h3><h3 id="我想要记住的是，就算白云苍狗，就算无力回天，也要有自己至死坚持的原则。"><a href="#我想要记住的是，就算白云苍狗，就算无力回天，也要有自己至死坚持的原则。" class="headerlink" title="我想要记住的是，就算白云苍狗，就算无力回天，也要有自己至死坚持的原则。"></a>我想要记住的是，就算白云苍狗，就算无力回天，也要有自己至死坚持的原则。</h3><h3 id="我想要记住的是，就算人心险恶，就算世道沧桑，也要有从未想过放弃的梦想。"><a href="#我想要记住的是，就算人心险恶，就算世道沧桑，也要有从未想过放弃的梦想。" class="headerlink" title="我想要记住的是，就算人心险恶，就算世道沧桑，也要有从未想过放弃的梦想。"></a>我想要记住的是，就算人心险恶，就算世道沧桑，也要有从未想过放弃的梦想。</h3><h3 id="我想要记住的是，这个世界上不光有无耻的奸佞小人，不光有昏聩的无道庸君，还有春闺梦里依依等待却终不可得的少妇，更有为了天下苍生抛头颅洒热血的无名枯骨。"><a href="#我想要记住的是，这个世界上不光有无耻的奸佞小人，不光有昏聩的无道庸君，还有春闺梦里依依等待却终不可得的少妇，更有为了天下苍生抛头颅洒热血的无名枯骨。" class="headerlink" title="我想要记住的是，这个世界上不光有无耻的奸佞小人，不光有昏聩的无道庸君，还有春闺梦里依依等待却终不可得的少妇，更有为了天下苍生抛头颅洒热血的无名枯骨。"></a>我想要记住的是，这个世界上不光有无耻的奸佞小人，不光有昏聩的无道庸君，还有春闺梦里依依等待却终不可得的少妇，更有为了天下苍生抛头颅洒热血的无名枯骨。</h3><h3 id="我想要记住的是，一种心情和一种信念。"><a href="#我想要记住的是，一种心情和一种信念。" class="headerlink" title="我想要记住的是，一种心情和一种信念。"></a>我想要记住的是，一种心情和一种信念。</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;我用了一周的时间，看完《琅琊榜》。期间或是在第一排坐在上课时把手机放在课桌下看，或是夜里已然熄灯把手机窝在被窝里看，或是吃饭的时候，偶尔也不能舍下。&quot;&gt;&lt;a href=&quot;#我用了一周的时间，看完《琅琊榜》。期间或是在第一排坐在上课时把手机放在课桌下看，或是夜里已然熄灯把手机窝在被窝里看，或是吃饭的时候，偶尔也不能舍下。&quot; class=&quot;headerlink&quot; title=&quot;我用了一周的时间，看完《琅琊榜》。期间或是在第一排坐在上课时把手机放在课桌下看，或是夜里已然熄灯把手机窝在被窝里看，或是吃饭的时候，偶尔也不能舍下。&quot;&gt;&lt;/a&gt;我用了一周的时间，看完《琅琊榜》。期间或是在第一排坐在上课时把手机放在课桌下看，或是夜里已然熄灯把手机窝在被窝里看，或是吃饭的时候，偶尔也不能舍下。&lt;/h3&gt;&lt;h3 id=&quot;它关于亲情，兄弟，家国之恨。它如此沉重，我却甘之如饴。&quot;&gt;&lt;a href=&quot;#它关于亲情，兄弟，家国之恨。它如此沉重，我却甘之如饴。&quot; class=&quot;headerlink&quot; title=&quot;它关于亲情，兄弟，家国之恨。它如此沉重，我却甘之如饴。&quot;&gt;&lt;/a&gt;它关于亲情，兄弟，家国之恨。它如此沉重，我却甘之如饴。&lt;/h3&gt;&lt;h3 id=&quot;不管是一夜历经人生颠覆的萧景睿，还是一直貌似纨绔，却心思敏捷的言豫津；不管是镇守云南，巾帼不让须眉的郡主霓凰，还是貌美如花，琴技卓然的花魁宫羽；不管是心如稚童的飞流，还是风流不羁，重情重义的蔺晨……然而我最不能忘的，仍是那琅琊榜上第一公子——梅长苏。&quot;&gt;&lt;a href=&quot;#不管是一夜历经人生颠覆的萧景睿，还是一直貌似纨绔，却心思敏捷的言豫津；不管是镇守云南，巾帼不让须眉的郡主霓凰，还是貌美如花，琴技卓然的花魁宫羽；不管是心如稚童的飞流，还是风流不羁，重情重义的蔺晨……然而我最不能忘的，仍是那琅琊榜上第一公子——梅长苏。&quot; class=&quot;headerlink&quot; title=&quot;不管是一夜历经人生颠覆的萧景睿，还是一直貌似纨绔，却心思敏捷的言豫津；不管是镇守云南，巾帼不让须眉的郡主霓凰，还是貌美如花，琴技卓然的花魁宫羽；不管是心如稚童的飞流，还是风流不羁，重情重义的蔺晨……然而我最不能忘的，仍是那琅琊榜上第一公子——梅长苏。&quot;&gt;&lt;/a&gt;不管是一夜历经人生颠覆的萧景睿，还是一直貌似纨绔，却心思敏捷的言豫津；不管是镇守云南，巾帼不让须眉的郡主霓凰，还是貌美如花，琴技卓然的花魁宫羽；不管是心如稚童的飞流，还是风流不羁，重情重义的蔺晨……然而我最不能忘的，仍是那琅琊榜上第一公子——梅长苏。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="琅琊榜" scheme="http://xj8c.cc/tags/%E7%90%85%E7%90%8A%E6%A6%9C/"/>
    
  </entry>
  
  <entry>
    <title>10个最佳 javascript 开发实践</title>
    <link href="http://xj8c.cc/2015/09/01/10-best-javascript-development-practices/"/>
    <id>http://xj8c.cc/2015/09/01/10-best-javascript-development-practices/</id>
    <published>2015-09-01T11:46:01.000Z</published>
    <updated>2017-05-26T06:29:49.940Z</updated>
    
    <content type="html"><![CDATA[<p>使用很多javascript代码的web页面会加载很慢，过多使用javascript会使网页丑陋拖沓……如何有效使用javascript是一个非常火热的话题。在此列出10个最佳javascript实践，帮助你有效地使用javascript。<br><a id="more"></a></p>
<h2 id="1、尽可能保持代码简洁"><a href="#1、尽可能保持代码简洁" class="headerlink" title="1、尽可能保持代码简洁"></a>1、尽可能保持代码简洁</h2><h3 id="可能大家都听到过了N遍这个代码简洁问题了。作为一个开发人员你可能在你的代码开发过程中使用了很多次，但千万不要在js开发中忘记这点。"><a href="#可能大家都听到过了N遍这个代码简洁问题了。作为一个开发人员你可能在你的代码开发过程中使用了很多次，但千万不要在js开发中忘记这点。" class="headerlink" title="可能大家都听到过了N遍这个代码简洁问题了。作为一个开发人员你可能在你的代码开发过程中使用了很多次，但千万不要在js开发中忘记这点。"></a>可能大家都听到过了N遍这个代码简洁问题了。作为一个开发人员你可能在你的代码开发过程中使用了很多次，但千万不要在js开发中忘记这点。</h3><h3 id="尽量在开发模式中添加注释和空格，这样保持代码的可读性"><a href="#尽量在开发模式中添加注释和空格，这样保持代码的可读性" class="headerlink" title="尽量在开发模式中添加注释和空格，这样保持代码的可读性"></a>尽量在开发模式中添加注释和空格，这样保持代码的可读性</h3><h3 id="在发布到产品环境前请将空格和注释都删除，并且尽量缩写变量和方法名"><a href="#在发布到产品环境前请将空格和注释都删除，并且尽量缩写变量和方法名" class="headerlink" title="在发布到产品环境前请将空格和注释都删除，并且尽量缩写变量和方法名"></a>在发布到产品环境前请将空格和注释都删除，并且尽量缩写变量和方法名</h3><h3 id="使用第三方工具帮助你实现压缩-javascript。"><a href="#使用第三方工具帮助你实现压缩-javascript。" class="headerlink" title="使用第三方工具帮助你实现压缩 javascript。"></a>使用第三方工具帮助你实现压缩 javascript。</h3><h2 id="2、思考后再修改prototypes"><a href="#2、思考后再修改prototypes" class="headerlink" title="2、思考后再修改prototypes"></a>2、思考后再修改prototypes</h2><h3 id="添加新的属性到对象-prototype-中是导致脚本出错的常见原因。"><a href="#添加新的属性到对象-prototype-中是导致脚本出错的常见原因。" class="headerlink" title="添加新的属性到对象 prototype 中是导致脚本出错的常见原因。"></a>添加新的属性到对象 prototype 中是导致脚本出错的常见原因。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yourObject.prototype.anotherFunction = ‘Hello’;</div><div class="line">yourObject.prototype.anotherMethod = function () &#123; … &#125;;</div></pre></td></tr></table></figure>
<h3 id="在上面代码中，所有的变量都会被影响，因为他们都继承于yourObject。这样的使用会导致意想不到的行为。所以建议在使用完后删除类似的修改。"><a href="#在上面代码中，所有的变量都会被影响，因为他们都继承于yourObject。这样的使用会导致意想不到的行为。所以建议在使用完后删除类似的修改。" class="headerlink" title="在上面代码中，所有的变量都会被影响，因为他们都继承于yourObject。这样的使用会导致意想不到的行为。所以建议在使用完后删除类似的修改。"></a>在上面代码中，所有的变量都会被影响，因为他们都继承于yourObject。这样的使用会导致意想不到的行为。所以建议在使用完后删除类似的修改。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yourObject.prototype.anotherFunction = ‘Hello’; yourObject.prototype.anotherMethod = function () &#123; … &#125;; test.anotherMethod();</div><div class="line">delete yourObject.prototype.anotherFunction = ‘Hello’;</div><div class="line">delete yourObject.prototype.anotherMethod = function () &#123; … &#125;;</div></pre></td></tr></table></figure>
<h2 id="3、Debug-Javascript代码"><a href="#3、Debug-Javascript代码" class="headerlink" title="3、Debug Javascript代码"></a>3、Debug Javascript代码</h2><h3 id="即使最好的开发人员都会犯错。为了最大化减少类似错误，请在你的-debugger-中运行你的代码，确认你没有遇到任何细微的错误。"><a href="#即使最好的开发人员都会犯错。为了最大化减少类似错误，请在你的-debugger-中运行你的代码，确认你没有遇到任何细微的错误。" class="headerlink" title="即使最好的开发人员都会犯错。为了最大化减少类似错误，请在你的 debugger 中运行你的代码，确认你没有遇到任何细微的错误。"></a>即使最好的开发人员都会犯错。为了最大化减少类似错误，请在你的 debugger 中运行你的代码，确认你没有遇到任何细微的错误。</h3><h2 id="4、避免-Eval"><a href="#4、避免-Eval" class="headerlink" title="4、避免 Eval"></a>4、避免 Eval</h2><h3 id="你的JS在没有eval方法的时候也可以很好的工作。eval允许访问-javascript-编译器。如果一个字符串作为参数传递到eval，那么它的结果可以被执行。"><a href="#你的JS在没有eval方法的时候也可以很好的工作。eval允许访问-javascript-编译器。如果一个字符串作为参数传递到eval，那么它的结果可以被执行。" class="headerlink" title="你的JS在没有eval方法的时候也可以很好的工作。eval允许访问 javascript 编译器。如果一个字符串作为参数传递到eval，那么它的结果可以被执行。"></a>你的JS在没有eval方法的时候也可以很好的工作。eval允许访问 javascript 编译器。如果一个字符串作为参数传递到eval，那么它的结果可以被执行。</h3><h3 id="这会很大的降低代码的性能。尽量避免在产品环境中使用eval。"><a href="#这会很大的降低代码的性能。尽量避免在产品环境中使用eval。" class="headerlink" title="这会很大的降低代码的性能。尽量避免在产品环境中使用eval。"></a>这会很大的降低代码的性能。尽量避免在产品环境中使用eval。</h3><h2 id="5、最小化DOM访问"><a href="#5、最小化DOM访问" class="headerlink" title="5、最小化DOM访问"></a>5、最小化DOM访问</h2><h3 id="DOM是最复杂的API，会使得代码执行过程变慢。有时候web页面可能没有加载或者加载不完整。最好避免DOM。"><a href="#DOM是最复杂的API，会使得代码执行过程变慢。有时候web页面可能没有加载或者加载不完整。最好避免DOM。" class="headerlink" title="DOM是最复杂的API，会使得代码执行过程变慢。有时候web页面可能没有加载或者加载不完整。最好避免DOM。"></a>DOM是最复杂的API，会使得代码执行过程变慢。有时候web页面可能没有加载或者加载不完整。最好避免DOM。</h3><h2 id="6、在使用js类库之前先学习javascript"><a href="#6、在使用js类库之前先学习javascript" class="headerlink" title="6、在使用js类库之前先学习javascript"></a>6、在使用js类库之前先学习javascript</h2><h3 id="互联网充斥着很多的javascript类库，很多程序员都往往使用js类库而不理解负面影响。强烈建议你在使用第三方类库之前学习基本的JS代码，否则，你就准备着倒霉吧。"><a href="#互联网充斥着很多的javascript类库，很多程序员都往往使用js类库而不理解负面影响。强烈建议你在使用第三方类库之前学习基本的JS代码，否则，你就准备着倒霉吧。" class="headerlink" title="互联网充斥着很多的javascript类库，很多程序员都往往使用js类库而不理解负面影响。强烈建议你在使用第三方类库之前学习基本的JS代码，否则，你就准备着倒霉吧。"></a>互联网充斥着很多的javascript类库，很多程序员都往往使用js类库而不理解负面影响。强烈建议你在使用第三方类库之前学习基本的JS代码，否则，你就准备着倒霉吧。</h3><h2 id="7、不要用-“SetTimeOut”-和-“Setinterval”-方法来作为-“Eval”-的备选"><a href="#7、不要用-“SetTimeOut”-和-“Setinterval”-方法来作为-“Eval”-的备选" class="headerlink" title="7、不要用 “SetTimeOut” 和 “Setinterval” 方法来作为 “Eval” 的备选"></a>7、不要用 “SetTimeOut” 和 “Setinterval” 方法来作为 “Eval” 的备选</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setTimeOut( &quot;document.getID(&apos;value&apos;)&quot;, 3000);</div></pre></td></tr></table></figure>
<h3 id="在以上代码中-document-getID-‘value’-在-setTimeOut-方法中被作为字符串来处理。这类似于eval方法，在每个代码执行中来执行一个字符串，因此会降低性能，因此，建议在这些方法中传递一个方法。"><a href="#在以上代码中-document-getID-‘value’-在-setTimeOut-方法中被作为字符串来处理。这类似于eval方法，在每个代码执行中来执行一个字符串，因此会降低性能，因此，建议在这些方法中传递一个方法。" class="headerlink" title="在以上代码中 document.getID(‘value’) 在 setTimeOut 方法中被作为字符串来处理。这类似于eval方法，在每个代码执行中来执行一个字符串，因此会降低性能，因此，建议在这些方法中传递一个方法。"></a>在以上代码中 document.getID(‘value’) 在 setTimeOut 方法中被作为字符串来处理。这类似于eval方法，在每个代码执行中来执行一个字符串，因此会降低性能，因此，建议在这些方法中传递一个方法。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setTimeOut(yourFunction, 3000);</div></pre></td></tr></table></figure>
<h2 id="8、-比-new-Array-更好"><a href="#8、-比-new-Array-更好" class="headerlink" title="8、[] 比 new Array(); 更好"></a>8、[] 比 new Array(); 更好</h2><h3 id="一个常犯的错误在于使用当需要数组的时候使用一个对象或者该使用对象的时候使用一个数组。但是使用原则很简单："><a href="#一个常犯的错误在于使用当需要数组的时候使用一个对象或者该使用对象的时候使用一个数组。但是使用原则很简单：" class="headerlink" title="一个常犯的错误在于使用当需要数组的时候使用一个对象或者该使用对象的时候使用一个数组。但是使用原则很简单："></a>一个常犯的错误在于使用当需要数组的时候使用一个对象或者该使用对象的时候使用一个数组。但是使用原则很简单：</h3><h3 id="“当属性名称是小的连续整数，你应该使用数组。否则，使用一个对象”-Douglas-Crockford-JavaScript-Good-Parts-的作者。"><a href="#“当属性名称是小的连续整数，你应该使用数组。否则，使用一个对象”-Douglas-Crockford-JavaScript-Good-Parts-的作者。" class="headerlink" title="“当属性名称是小的连续整数，你应该使用数组。否则，使用一个对象” - Douglas Crockford, JavaScript: Good Parts 的作者。"></a>“当属性名称是小的连续整数，你应该使用数组。否则，使用一个对象” - Douglas Crockford, JavaScript: Good Parts 的作者。</h3><p>建议：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var a = [&apos;1A&apos;,&apos;2B&apos;];</div></pre></td></tr></table></figure>
<p>避免：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = new Array();</div><div class="line">a[0] = &quot;1A&quot;;</div><div class="line">a[1] = &quot;2B&quot;;</div></pre></td></tr></table></figure>
<h2 id="9、尽量不要多次使用var"><a href="#9、尽量不要多次使用var" class="headerlink" title="9、尽量不要多次使用var"></a>9、尽量不要多次使用var</h2><h3 id="在初始每一个变量的时候，程序员都习惯使用var关键字。相反，建议你使用逗号来避免多余的关键字，并且减少代码体积。如下："><a href="#在初始每一个变量的时候，程序员都习惯使用var关键字。相反，建议你使用逗号来避免多余的关键字，并且减少代码体积。如下：" class="headerlink" title="在初始每一个变量的时候，程序员都习惯使用var关键字。相反，建议你使用逗号来避免多余的关键字，并且减少代码体积。如下："></a>在初始每一个变量的时候，程序员都习惯使用var关键字。相反，建议你使用逗号来避免多余的关键字，并且减少代码体积。如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var variableOne = ‘string 1’,</div><div class="line">variableTwo = ‘string 2’,</div><div class="line">variableThree = ‘string 3’;</div></pre></td></tr></table></figure>
<h2 id="10、不要忽略分号-“-”"><a href="#10、不要忽略分号-“-”" class="headerlink" title="10、不要忽略分号 “;”"></a>10、不要忽略分号 “;”</h2><h3 id="这往往是大家花费数个小时进行-debug-的原因之一。"><a href="#这往往是大家花费数个小时进行-debug-的原因之一。" class="headerlink" title="这往往是大家花费数个小时进行 debug 的原因之一。"></a>这往往是大家花费数个小时进行 debug 的原因之一。</h3><h3 id="我很确信你肯定也在其它的文章中阅读过以上相关的内容，但是大家可能往往都忽略了很多基本的规则。你是不是也曾经忽略过分号，是不是也遇到过eval关键字问题导致性能问题？"><a href="#我很确信你肯定也在其它的文章中阅读过以上相关的内容，但是大家可能往往都忽略了很多基本的规则。你是不是也曾经忽略过分号，是不是也遇到过eval关键字问题导致性能问题？" class="headerlink" title="我很确信你肯定也在其它的文章中阅读过以上相关的内容，但是大家可能往往都忽略了很多基本的规则。你是不是也曾经忽略过分号，是不是也遇到过eval关键字问题导致性能问题？"></a>我很确信你肯定也在其它的文章中阅读过以上相关的内容，但是大家可能往往都忽略了很多基本的规则。你是不是也曾经忽略过分号，是不是也遇到过eval关键字问题导致性能问题？</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用很多javascript代码的web页面会加载很慢，过多使用javascript会使网页丑陋拖沓……如何有效使用javascript是一个非常火热的话题。在此列出10个最佳javascript实践，帮助你有效地使用javascript。&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://xj8c.cc/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>史上最难回答的30个问题，没有一人都能答对！</title>
    <link href="http://xj8c.cc/2015/08/07/the-30-most-difficult-questions-to-answer-in-history/"/>
    <id>http://xj8c.cc/2015/08/07/the-30-most-difficult-questions-to-answer-in-history/</id>
    <published>2015-08-07T12:55:58.000Z</published>
    <updated>2017-05-26T06:29:50.551Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么男装纽扣在右，而女装在左呢"><a href="#为什么男装纽扣在右，而女装在左呢" class="headerlink" title="为什么男装纽扣在右，而女装在左呢?"></a>为什么男装纽扣在右，而女装在左呢?</h2><p>纽扣最初问世时，只有富人的外套才钉纽扣。按当时的风俗，男士自己穿衣服，女士则由仆人帮穿。女士衬衣上的扣子钉在左边，极大地方便了伺候女主人的仆人们(现在方便男人脱)。男士衬衣的扣子在右边，除了自己穿衣服，还因为用右手方便拔出挂在左腰的佩剑，这样就不容易被衬衫兜住。</p>
<h2 id="为什么是上厕所、下厨房"><a href="#为什么是上厕所、下厨房" class="headerlink" title="为什么是上厕所、下厨房?"></a>为什么是上厕所、下厨房?</h2><p>中国自古以来就有五行，五行分别对应五个方位。古代厕所建造在北面偏东的位置，厨房要建造在南面偏东。去南方时，习惯说南下(皇帝下江南)，去北方时，习惯说北上(北上抗日)。当要去厕所时要去院子的北面，所以说上厕所。当要去厨房时，要去院子的南面，所以说下厨房。<br><a id="more"></a></p>
<h2 id="俗语为什么是不三不四"><a href="#俗语为什么是不三不四" class="headerlink" title="俗语为什么是不三不四?"></a>俗语为什么是不三不四?</h2><p>古人称天为一、地为二。所以天地相加为三，三即成为整体的代表，比如：三部曲、三省、三思、三人行等等;而对于四则称之”周全”，亦有称心如意的意思，比如四大金刚、四大家、四体、四艺、四书等等。所以把”美好事物”之外的，行为不端的人统称为”不三不四”。</p>
<h2 id="李耳为什么叫老子不叫李子"><a href="#李耳为什么叫老子不叫李子" class="headerlink" title="李耳为什么叫老子不叫李子?"></a>李耳为什么叫老子不叫李子?</h2><p>第一种说法，老子生下来就是白胡子白眉，耳朵又大，所以又叫老子又叫李耳。显然这种说法很科幻、很胡扯。第二种说法更贴切一些，李耳本来就姓老，名老聃，即李姓源于老姓。而且李姓渊于老虎图腾，苦县一带虎被称为”狸儿”，所以李耳只是”狸儿”的误传罢了。</p>
<h2 id="佛家弟子为什么都姓释"><a href="#佛家弟子为什么都姓释" class="headerlink" title="佛家弟子为什么都姓释?"></a>佛家弟子为什么都姓释?</h2><p>释姓是汉人姓氏之一，一般为汉传佛教出家人统一使用之姓氏，并未收录于《百家姓》中。中国出家人以释为姓，始于道安禅师。佛教初期魏晋沙门，以师为姓，故姓各不同。道安以为，根本道师乃释迦世尊，故”以释命氏”，后来他译《增一阿含》，有”四海出家，同称释氏”之语。</p>
<h2 id="十二生肖为什么没有猫"><a href="#十二生肖为什么没有猫" class="headerlink" title="十二生肖为什么没有猫?"></a>十二生肖为什么没有猫?</h2><p>有民间神话传说用”鼠骗猫”的说法来解释这个问题，但真正的原因是因为中国古时无猫，猫原产于埃及，何时传入中国已不可考，民间传说则由唐三藏从印度带回(其实是汉朝)。所以猫在传入中国以前，中国的十二生肖早就排完成定论了。而且，十二生肖中已经有了老虎这只大猫，所以小猫就不用值班了。</p>
<h2 id="人为什么要打呵欠"><a href="#人为什么要打呵欠" class="headerlink" title="人为什么要打呵欠?"></a>人为什么要打呵欠?</h2><p>打呵欠这种行为一直困扰着科学家有两个原因。一是打呵欠似乎没有任何作用。但打呵欠的时候，如果你想抑制它，你的身体会不由自主地抽搐，面部会因痛苦而扭曲，你感觉血液似乎要从鼻孔里涌出。同样困扰科学家的还有呵欠的传染性。看看，你刚打呵欠了吧?</p>
<h2 id="回复姓氏为什么要免贵"><a href="#回复姓氏为什么要免贵" class="headerlink" title="回复姓氏为什么要免贵?"></a>回复姓氏为什么要免贵?</h2><p>在夏商周之时，姓氏分而为二，男子称氏，女子称姓。《通志·氏族略》有云：”贵者有氏，贱者有名无氏。”姓用来区别婚姻，同氏不同姓可通婚，同姓不同氏不可通婚。秦统一以后，姓氏合二为一。因姓氏还是贵者，所以往往要问”贵姓”，而有人问”贵姓”，才能回答”免贵姓某”。当然，如果你姓张和姓孔，你就不需要回答免贵了，因为这是老天爷和孔圣人的姓噢。</p>
<h2 id="诺贝尔奖为什么没有数学奖"><a href="#诺贝尔奖为什么没有数学奖" class="headerlink" title="诺贝尔奖为什么没有数学奖?"></a>诺贝尔奖为什么没有数学奖?</h2><p>诺贝尔在遗嘱中提到：奖励那些对人类做出巨大贡献的”发明或发现”。他不认为数学是人类可藉以得益的实践科学，因而数学被排除在诺贝尔奖之外。其实是诺贝尔曾向一位女士求婚，而她却嫁给了名叫米泰莱弗勒的数学家，还共同欺骗了诺贝尔，诺贝尔终身未娶，他恨数学啊。</p>
<h2 id="本命年为什么要穿红"><a href="#本命年为什么要穿红" class="headerlink" title="本命年为什么要穿红?"></a>本命年为什么要穿红?</h2><p>风水位理学认为，逢本命年时，生肖守护神要去天庭参拜，按现在的说法就是述职，这时对人的保护就会减弱，妖魔邪祟就会乘虚而入，红色能够去灾辟邪。这与”过年”贴春联的来历也有关联，所以人们用穿红衣服，系红腰带来去灾辟邪，后来被人们发扬光大，连内裤袜子都要红色。</p>
<h2 id="百家姓开头四姓为什么是“赵钱孙李”"><a href="#百家姓开头四姓为什么是“赵钱孙李”" class="headerlink" title="百家姓开头四姓为什么是“赵钱孙李”?"></a>百家姓开头四姓为什么是“赵钱孙李”?</h2><p>明清文献记载，《百家姓》是宋朝初期，由一位吴越地区的儒家学者最先编辑。所以他用了当朝皇帝的姓氏为第一姓;五代十国时期吴越国的国王姓”钱”;”孙”是宋朝皇族妻妾的姓;”李”是后唐皇帝李后主的姓氏。这就是《百家姓》开头四姓”赵钱孙李”次序的由来。</p>
<h2 id="犬子的来历"><a href="#犬子的来历" class="headerlink" title="犬子的来历"></a>犬子的来历</h2><p>“犬子”本是司马相如小名，《史记》记载，司马相如”少时好读书，学击剑，故其亲名之曰犬子”。他长大后，也觉得名字不好听，加上又仰慕蔺相如的为人，自己便更名为相如。但司马相如的成名，”犬子”也不断为人所知。人们便争相效仿，谦称自家儿郎，用上了”犬子”一词。那么龟儿子呢?</p>
<h2 id="二百五的来历"><a href="#二百五的来历" class="headerlink" title="二百五的来历"></a>二百五的来历</h2><p>苏秦一直努力说服六国联合抗秦，史称”六国封相”。但苏秦在齐国的时候被刺客杀了，齐王为了抓出刺客，特贴出告示，声称苏秦为大内奸，刺杀苏秦者赏金千两。告示一出，立刻有四个上钩，声称是自己所为。齐王正恨刺客牙痒，怒：千两黄金每人二百五，顺便把这四个二百五推出去砍了!</p>
<h2 id="过年为什么要给孩子压岁钱"><a href="#过年为什么要给孩子压岁钱" class="headerlink" title="过年为什么要给孩子压岁钱?"></a>过年为什么要给孩子压岁钱?</h2><p>北宋神宗年间，某年春节夜晚，有个副宰相王韶的小儿子南陔，跟随大人在街头观灯游玩时，不料被歹人掠走，想勒索王韶一笔钱财。逃跑中正巧遇朝廷车子经过，南陔大声呼救，歹人放下南陔仓皇逃跑。后来，宋神宗得知此事后，就赐予南陔一些金钱，给他压惊，从此”压岁钱”在民间流传开来。</p>
<h2 id="中国人为什么把说大话叫吹牛"><a href="#中国人为什么把说大话叫吹牛" class="headerlink" title="中国人为什么把说大话叫吹牛?"></a>中国人为什么把说大话叫吹牛?</h2><p>从前宰羊时放完血，屠夫会在羊的腿上割开一个小口，把嘴凑上去使劲往里吹气，直到羊全身都膨胀起来，用刀轻轻一拉，皮就会自己裂开。这叫吹猪或吹羊。如果谁要说可以把牛皮吹起来，那就是说大话了，因为牛皮很大，而且非常坚韧，根本吹不起来。所以”吹牛”就是说大话的代名词!</p>
<h2 id="宰相肚里能撑船的来历"><a href="#宰相肚里能撑船的来历" class="headerlink" title="宰相肚里能撑船的来历"></a>宰相肚里能撑船的来历</h2><p>宋时宰相王安石中年丧妻，续娶了一妾名唤姣娘。老夫少妻的生活，使得姣娘私下与年轻仆人偷情。王安石知道后，本来火冒三丈，但一忍再忍，干脆在中秋节对诗的时候，诱使姣娘讲出实情，但姣娘一句”宰相肚里能撑船”让王安石深知其苦，即赐银千两，送姣娘与仆人成婚。</p>
<h2 id="为什么是替罪羊而不是替罪狗"><a href="#为什么是替罪羊而不是替罪狗" class="headerlink" title="为什么是替罪羊而不是替罪狗?"></a>为什么是替罪羊而不是替罪狗?</h2><p>圣经《旧约》：挪亚后有个叫亚伯拉罕的闪族人，他99岁得一子。一天，耶和华突然降临，要他杀子以撒献祭。以撒不知自己是祭品，跟随父亲上山，亚伯拉罕准备好一切，正将儿子放上祭坛欲动刀时，天使飞来拉住其手，不准他杀子，告诉他只是耶和华的考验，并改用羊来做为祭品。这就是替罪羊的来历。</p>
<h2 id="拍马屁是怎么来的"><a href="#拍马屁是怎么来的" class="headerlink" title="拍马屁是怎么来的?"></a>拍马屁是怎么来的?</h2><p>一说是元代蒙古人有个习惯，两人牵马相遇，要在对方马屁股上拍一下，表示尊敬。二是蒙古族好骑手遇到烈性马便拍拍马屁股，使马感到舒服，随即乘势跃身上马，纵马而去。三是蒙古人爱马，如果马肥，两股必然隆起，所以见到骏马，总喜欢拍着马屁股称赞一番。</p>
<h2 id="哪壶不开提哪壶的来历"><a href="#哪壶不开提哪壶的来历" class="headerlink" title="哪壶不开提哪壶的来历"></a>哪壶不开提哪壶的来历</h2><p>早年，有父子俩开了一个小茶馆。知县白老爷是一个贪财好利的主儿，经常来白吃白喝。虽然父子俩受不了，有气，但也没办法。有一段时间老掌柜病了，小掌柜司炉掌壶。等老掌柜病好以后，发现县太爷再没来了。问其缘由，小掌柜一笑说：”我给他沏茶，是哪壶不开提哪壶!”</p>
<h2 id="为什么占女人便宜叫“吃豆腐”"><a href="#为什么占女人便宜叫“吃豆腐”" class="headerlink" title="为什么占女人便宜叫“吃豆腐”?"></a>为什么占女人便宜叫“吃豆腐”?</h2><p>汉朝，长安街上有个夫妻开的豆腐店，老板娘生得漂亮，风情万种，人称”豆腐西施”，为招徕顾客，难免有卖弄风情之举，引得周围男人老以”吃豆腐”为名到豆腐店与老板娘调情，趁付铜板时摸摸老板娘的纤手等。后来，“吃豆腐”便成了男人轻薄女人的代名词。</p>
<h2 id="孺子牛的来历"><a href="#孺子牛的来历" class="headerlink" title="孺子牛的来历?"></a>孺子牛的来历?</h2><p>齐景公非常疼爱庶子荼，有一次齐景公和荼在一起嬉戏，竟然口里衔根绳子，让荼牵着走。不料，儿子不小心跌倒，把齐景公的牙齿拉折了。齐景公临死前遗命立荼为国君。景公死后，陈僖子要立公子阳生。齐景公的大臣鲍牧对陈僖子说：”汝忘君之为孺子牛而折其齿乎?而背之也!”</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么男装纽扣在右，而女装在左呢&quot;&gt;&lt;a href=&quot;#为什么男装纽扣在右，而女装在左呢&quot; class=&quot;headerlink&quot; title=&quot;为什么男装纽扣在右，而女装在左呢?&quot;&gt;&lt;/a&gt;为什么男装纽扣在右，而女装在左呢?&lt;/h2&gt;&lt;p&gt;纽扣最初问世时，只有富人的外套才钉纽扣。按当时的风俗，男士自己穿衣服，女士则由仆人帮穿。女士衬衣上的扣子钉在左边，极大地方便了伺候女主人的仆人们(现在方便男人脱)。男士衬衣的扣子在右边，除了自己穿衣服，还因为用右手方便拔出挂在左腰的佩剑，这样就不容易被衬衫兜住。&lt;/p&gt;
&lt;h2 id=&quot;为什么是上厕所、下厨房&quot;&gt;&lt;a href=&quot;#为什么是上厕所、下厨房&quot; class=&quot;headerlink&quot; title=&quot;为什么是上厕所、下厨房?&quot;&gt;&lt;/a&gt;为什么是上厕所、下厨房?&lt;/h2&gt;&lt;p&gt;中国自古以来就有五行，五行分别对应五个方位。古代厕所建造在北面偏东的位置，厨房要建造在南面偏东。去南方时，习惯说南下(皇帝下江南)，去北方时，习惯说北上(北上抗日)。当要去厕所时要去院子的北面，所以说上厕所。当要去厨房时，要去院子的南面，所以说下厨房。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
